//
//  HabiticaIcons.swift
//  Habitica
//
//  Created by Phillip Thelen on 03.07.18.
//  Copyright Â© 2018 HabitRPG Inc.. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class HabiticaIcons : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfExperience: UIImage?
        static var experienceTargets: [AnyObject]?
        static var imageOfMagic: UIImage?
        static var magicTargets: [AnyObject]?
        static var imageOfGold: UIImage?
        static var goldTargets: [AnyObject]?
        static var imageOfGem: UIImage?
        static var gemTargets: [AnyObject]?
        static var imageOfHourglass: UIImage?
        static var hourglassTargets: [AnyObject]?
        static var imageOfExperienceReward: UIImage?
        static var experienceRewardTargets: [AnyObject]?
        static var imageOfGoldReward: UIImage?
        static var goldRewardTargets: [AnyObject]?
        static var imageOfHeartDarkBg: UIImage?
        static var heartDarkBgTargets: [AnyObject]?
        static var imageOfHeartLightBg: UIImage?
        static var heartLightBgTargets: [AnyObject]?
        static var imageOfHeartLarge: UIImage?
        static var heartLargeTargets: [AnyObject]?
        static var imageOfStarSmall: UIImage?
        static var starSmallTargets: [AnyObject]?
        static var imageOfStarLarge: UIImage?
        static var starLargeTargets: [AnyObject]?
        static var imageOfStarMedium: UIImage?
        static var starMediumTargets: [AnyObject]?
        static var imageOfPinnedItem: UIImage?
        static var pinnedItemTargets: [AnyObject]?
        static var imageOfPinItem: UIImage?
        static var pinItemTargets: [AnyObject]?
        static var imageOfUnpinItem: UIImage?
        static var unpinItemTargets: [AnyObject]?
        static var imageOfItemIndicatorNumber: UIImage?
        static var itemIndicatorNumberTargets: [AnyObject]?
        static var imageOfItemIndicatorLocked: UIImage?
        static var itemIndicatorLockedTargets: [AnyObject]?
        static var imageOfItemIndicatorLimited: UIImage?
        static var itemIndicatorLimitedTargets: [AnyObject]?
        static var imageOfGem_36: UIImage?
        static var gem_36Targets: [AnyObject]?
        static var imageOfWarriorLightBg: UIImage?
        static var warriorLightBgTargets: [AnyObject]?
        static var imageOfWarriorDarkBg: UIImage?
        static var warriorDarkBgTargets: [AnyObject]?
        static var imageOfRogueLightBg: UIImage?
        static var rogueLightBgTargets: [AnyObject]?
        static var imageOfRogueDarkBg: UIImage?
        static var rogueDarkBgTargets: [AnyObject]?
        static var imageOfHealerLightBg: UIImage?
        static var healerLightBgTargets: [AnyObject]?
        static var imageOfHealerDarkBg: UIImage?
        static var healerDarkBgTargets: [AnyObject]?
        static var imageOfMageDarkBg: UIImage?
        static var mageDarkBgTargets: [AnyObject]?
        static var imageOfMageLightBg: UIImage?
        static var mageLightBgTargets: [AnyObject]?
        static var imageOfHourglassShop: UIImage?
        static var hourglassShopTargets: [AnyObject]?
        static var imageOfAttributeSparklesLeft: UIImage?
        static var attributeSparklesLeftTargets: [AnyObject]?
        static var imageOfAttributeSparklesRight: UIImage?
        static var attributeSparklesRightTargets: [AnyObject]?
        static var imageOfAttributeAllocateButton: UIImage?
        static var attributeAllocateButtonTargets: [AnyObject]?
        static var imageOfDamage: UIImage?
        static var damageTargets: [AnyObject]?
        static var imageOfRageStrikeInactive: UIImage?
        static var rageStrikeInactiveTargets: [AnyObject]?
        static var imageOfRage: UIImage?
        static var rageTargets: [AnyObject]?
        static var imageOfLocked: UIImage?
        static var lockedTargets: [AnyObject]?
        static var imageOfTwoHandedIcon: UIImage?
        static var twoHandedIconTargets: [AnyObject]?
        static var imageOfBlankAvatarIcon: UIImage?
        static var blankAvatarIconTargets: [AnyObject]?
        static var imageOfDisclosureArrow: UIImage?
        static var disclosureArrowTargets: [AnyObject]?
        static var imageOfDeclineIcon: UIImage?
        static var declineIconTargets: [AnyObject]?
        static var imageOfAcceptIcon: UIImage?
        static var acceptIconTargets: [AnyObject]?
        static var imageOfBuffIcon: UIImage?
        static var buffIconTargets: [AnyObject]?
    }

    //// Drawing Methods

    @objc dynamic public class func drawHeart(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit, darkBackground: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let heartLightBackground = UIColor(red: 0.969, green: 0.306, blue: 0.322, alpha: 1.000)
        let fillColor2 = UIColor(red: 1.000, green: 0.380, blue: 0.396, alpha: 1.000)
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.500)
        let fillColor4 = UIColor(red: 0.710, green: 0.141, blue: 0.157, alpha: 0.350)
        let fillColor5 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.250)
        let fillColor6 = UIColor(red: 0.710, green: 0.141, blue: 0.157, alpha: 0.500)
        let heartDarkBackground = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.698)

        //// Variable Declarations
        let expression = darkBackground ? heartDarkBackground : heartLightBackground

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 2, y: 3.75))
        bezierPath.addLine(to: CGPoint(x: 4.92, y: 2))
        bezierPath.addLine(to: CGPoint(x: 9, y: 4.22))
        bezierPath.addLine(to: CGPoint(x: 13.08, y: 2))
        bezierPath.addLine(to: CGPoint(x: 16, y: 3.75))
        bezierPath.addLine(to: CGPoint(x: 16, y: 9))
        bezierPath.addLine(to: CGPoint(x: 13.08, y: 13.08))
        bezierPath.addLine(to: CGPoint(x: 9, y: 16))
        bezierPath.addLine(to: CGPoint(x: 4.92, y: 13.08))
        bezierPath.addLine(to: CGPoint(x: 2, y: 9))
        bezierPath.addLine(to: CGPoint(x: 2, y: 3.75))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        expression.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 5.73, y: 12.27))
        bezier2Path.addLine(to: CGPoint(x: 3.17, y: 8.65))
        bezier2Path.addLine(to: CGPoint(x: 3.17, y: 4.39))
        bezier2Path.addLine(to: CGPoint(x: 4.92, y: 3.34))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 5.56))
        bezier2Path.addLine(to: CGPoint(x: 13.08, y: 3.34))
        bezier2Path.addLine(to: CGPoint(x: 14.83, y: 4.39))
        bezier2Path.addLine(to: CGPoint(x: 14.83, y: 8.65))
        bezier2Path.addLine(to: CGPoint(x: 12.27, y: 12.27))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 14.54))
        bezier2Path.addLine(to: CGPoint(x: 5.73, y: 12.27))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        fillColor2.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 9, y: 10.46))
        bezier3Path.addLine(to: CGPoint(x: 12.27, y: 12.27))
        bezier3Path.addLine(to: CGPoint(x: 9, y: 14.54))
        bezier3Path.addLine(to: CGPoint(x: 9, y: 10.46))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 9, y: 10.46))
        bezier4Path.addLine(to: CGPoint(x: 5.73, y: 12.27))
        bezier4Path.addLine(to: CGPoint(x: 9, y: 14.54))
        bezier4Path.addLine(to: CGPoint(x: 9, y: 10.46))
        bezier4Path.close()
        bezier4Path.usesEvenOddFillRule = true
        fillColor4.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 5.73, y: 12.27))
        bezier5Path.addLine(to: CGPoint(x: 3.17, y: 8.65))
        bezier5Path.addLine(to: CGPoint(x: 9, y: 10.46))
        bezier5Path.addLine(to: CGPoint(x: 5.73, y: 12.27))
        bezier5Path.close()
        bezier5Path.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 12.27, y: 12.27))
        bezier6Path.addLine(to: CGPoint(x: 14.83, y: 8.65))
        bezier6Path.addLine(to: CGPoint(x: 9, y: 10.46))
        bezier6Path.addLine(to: CGPoint(x: 12.27, y: 12.27))
        bezier6Path.close()
        bezier6Path.usesEvenOddFillRule = true
        fillColor6.setFill()
        bezier6Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 9, y: 10.46))
        bezier7Path.addLine(to: CGPoint(x: 13.08, y: 3.34))
        bezier7Path.addLine(to: CGPoint(x: 14.83, y: 4.39))
        bezier7Path.addLine(to: CGPoint(x: 14.83, y: 8.65))
        bezier7Path.addLine(to: CGPoint(x: 9, y: 10.46))
        bezier7Path.close()
        bezier7Path.usesEvenOddFillRule = true
        fillColor4.setFill()
        bezier7Path.fill()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 9, y: 10.46))
        bezier8Path.addLine(to: CGPoint(x: 4.92, y: 3.34))
        bezier8Path.addLine(to: CGPoint(x: 3.17, y: 4.39))
        bezier8Path.addLine(to: CGPoint(x: 3.17, y: 8.65))
        bezier8Path.addLine(to: CGPoint(x: 9, y: 10.46))
        bezier8Path.close()
        bezier8Path.usesEvenOddFillRule = true
        fillColor6.setFill()
        bezier8Path.fill()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 9, y: 10.46))
        bezier9Path.addLine(to: CGPoint(x: 4.92, y: 3.34))
        bezier9Path.addLine(to: CGPoint(x: 9, y: 5.56))
        bezier9Path.addLine(to: CGPoint(x: 9, y: 10.46))
        bezier9Path.close()
        bezier9Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier9Path.fill()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 9, y: 10.46))
        bezier10Path.addLine(to: CGPoint(x: 13.08, y: 3.34))
        bezier10Path.addLine(to: CGPoint(x: 9, y: 5.56))
        bezier10Path.addLine(to: CGPoint(x: 9, y: 10.46))
        bezier10Path.close()
        bezier10Path.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezier10Path.fill()


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 7.02, y: 10.98))
        bezier11Path.addLine(to: CGPoint(x: 4.92, y: 8.07))
        bezier11Path.addLine(to: CGPoint(x: 4.92, y: 5.38))
        bezier11Path.addLine(to: CGPoint(x: 4.97, y: 5.38))
        bezier11Path.addLine(to: CGPoint(x: 9, y: 7.54))
        bezier11Path.addLine(to: CGPoint(x: 13.03, y: 5.38))
        bezier11Path.addLine(to: CGPoint(x: 13.08, y: 5.38))
        bezier11Path.addLine(to: CGPoint(x: 13.08, y: 8.07))
        bezier11Path.addLine(to: CGPoint(x: 10.98, y: 10.98))
        bezier11Path.addLine(to: CGPoint(x: 9, y: 12.44))
        bezier11Path.addLine(to: CGPoint(x: 7.02, y: 10.98))
        bezier11Path.close()
        bezier11Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier11Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawExperience(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.500)
        let fillColor5 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.250)
        let fillColor10 = UIColor(red: 1.000, green: 0.651, blue: 0.137, alpha: 1.000)
        let fillColor11 = UIColor(red: 0.749, green: 0.490, blue: 0.102, alpha: 0.250)
        let fillColor12 = UIColor(red: 0.749, green: 0.490, blue: 0.102, alpha: 0.500)

        //// Star Drawing
        let starPath = UIBezierPath()
        starPath.move(to: CGPoint(x: 9, y: 0))
        starPath.addLine(to: CGPoint(x: 12.01, y: 5.99))
        starPath.addLine(to: CGPoint(x: 18, y: 9))
        starPath.addLine(to: CGPoint(x: 12.01, y: 12.01))
        starPath.addLine(to: CGPoint(x: 9, y: 18))
        starPath.addLine(to: CGPoint(x: 5.99, y: 12.01))
        starPath.addLine(to: CGPoint(x: 0, y: 9))
        starPath.addLine(to: CGPoint(x: 5.99, y: 5.99))
        starPath.close()
        fillColor10.setFill()
        starPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 3.38, y: 9))
        bezierPath.addLine(to: CGPoint(x: 7.12, y: 7.12))
        bezierPath.addLine(to: CGPoint(x: 9, y: 9))
        bezierPath.addLine(to: CGPoint(x: 3.38, y: 9))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 9, y: 14.62))
        bezier2Path.addLine(to: CGPoint(x: 7.12, y: 10.88))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 9))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 14.62))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 14.62, y: 9))
        bezier3Path.addLine(to: CGPoint(x: 10.88, y: 10.88))
        bezier3Path.addLine(to: CGPoint(x: 9, y: 9))
        bezier3Path.addLine(to: CGPoint(x: 14.62, y: 9))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 9, y: 3.38))
        bezier4Path.addLine(to: CGPoint(x: 10.88, y: 7.12))
        bezier4Path.addLine(to: CGPoint(x: 9, y: 9))
        bezier4Path.addLine(to: CGPoint(x: 9, y: 3.38))
        bezier4Path.close()
        bezier4Path.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 14.62, y: 9))
        bezier5Path.addLine(to: CGPoint(x: 10.88, y: 7.12))
        bezier5Path.addLine(to: CGPoint(x: 9, y: 9))
        bezier5Path.addLine(to: CGPoint(x: 14.62, y: 9))
        bezier5Path.close()
        bezier5Path.usesEvenOddFillRule = true
        fillColor11.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 9, y: 14.62))
        bezier6Path.addLine(to: CGPoint(x: 10.88, y: 10.88))
        bezier6Path.addLine(to: CGPoint(x: 9, y: 9))
        bezier6Path.addLine(to: CGPoint(x: 9, y: 14.62))
        bezier6Path.close()
        bezier6Path.usesEvenOddFillRule = true
        fillColor12.setFill()
        bezier6Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 3.38, y: 9))
        bezier7Path.addLine(to: CGPoint(x: 7.12, y: 10.88))
        bezier7Path.addLine(to: CGPoint(x: 9, y: 9))
        bezier7Path.addLine(to: CGPoint(x: 3.38, y: 9))
        bezier7Path.close()
        bezier7Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier7Path.fill()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 9, y: 3.38))
        bezier8Path.addLine(to: CGPoint(x: 7.12, y: 7.12))
        bezier8Path.addLine(to: CGPoint(x: 9, y: 9))
        bezier8Path.addLine(to: CGPoint(x: 9, y: 3.38))
        bezier8Path.close()
        bezier8Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier8Path.fill()


        //// Star 2 Drawing
        let star2Path = UIBezierPath()
        star2Path.move(to: CGPoint(x: 9, y: 6.35))
        star2Path.addLine(to: CGPoint(x: 9.88, y: 8.12))
        star2Path.addLine(to: CGPoint(x: 11.65, y: 9))
        star2Path.addLine(to: CGPoint(x: 9.88, y: 9.88))
        star2Path.addLine(to: CGPoint(x: 9, y: 11.65))
        star2Path.addLine(to: CGPoint(x: 8.12, y: 9.88))
        star2Path.addLine(to: CGPoint(x: 6.35, y: 9))
        star2Path.addLine(to: CGPoint(x: 8.12, y: 8.12))
        star2Path.close()
        fillColor3.setFill()
        star2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMagic(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.500)
        let fillColor5 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.250)
        let fillColor7 = UIColor(red: 0.161, green: 0.584, blue: 0.804, alpha: 1.000)
        let fillColor8 = UIColor(red: 0.314, green: 0.710, blue: 0.914, alpha: 1.000)
        let fillColor9 = UIColor(red: 0.122, green: 0.439, blue: 0.604, alpha: 0.250)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16, y: 11.62))
        bezierPath.addLine(to: CGPoint(x: 9, y: 18))
        bezierPath.addLine(to: CGPoint(x: 2, y: 11.62))
        bezierPath.addLine(to: CGPoint(x: 9, y: 1))
        bezierPath.addLine(to: CGPoint(x: 16, y: 11.62))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor7.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 3.82, y: 11.41))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 9.29))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 16.09))
        bezier2Path.addLine(to: CGPoint(x: 3.82, y: 11.41))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        fillColor8.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 9, y: 9.29))
        bezier3Path.addLine(to: CGPoint(x: 14.18, y: 11.41))
        bezier3Path.addLine(to: CGPoint(x: 9, y: 16.09))
        bezier3Path.addLine(to: CGPoint(x: 9, y: 9.29))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        fillColor9.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 9, y: 9.29))
        bezier4Path.addLine(to: CGPoint(x: 9, y: 3.55))
        bezier4Path.addLine(to: CGPoint(x: 14.18, y: 11.41))
        bezier4Path.addLine(to: CGPoint(x: 9, y: 9.29))
        bezier4Path.close()
        bezier4Path.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 3.82, y: 11.41))
        bezier5Path.addLine(to: CGPoint(x: 9, y: 3.55))
        bezier5Path.addLine(to: CGPoint(x: 9, y: 9.29))
        bezier5Path.addLine(to: CGPoint(x: 3.82, y: 11.41))
        bezier5Path.close()
        bezier5Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 5.64, y: 11.13))
        bezier6Path.addLine(to: CGPoint(x: 9, y: 6.1))
        bezier6Path.addLine(to: CGPoint(x: 12.36, y: 11.13))
        bezier6Path.addLine(to: CGPoint(x: 9, y: 14.18))
        bezier6Path.addLine(to: CGPoint(x: 5.64, y: 11.13))
        bezier6Path.close()
        bezier6Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier6Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawGold(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.500)
        let fillColor5 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.250)
        let fillColor10 = UIColor(red: 1.000, green: 0.651, blue: 0.137, alpha: 1.000)
        let fillColor12 = UIColor(red: 0.749, green: 0.490, blue: 0.102, alpha: 0.500)
        let fillColor13 = UIColor(red: 0.749, green: 0.490, blue: 0.102, alpha: 0.750)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 9, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 9), controlPoint1: CGPoint(x: 13.97, y: 18), controlPoint2: CGPoint(x: 18, y: 13.97))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 18, y: 4.03), controlPoint2: CGPoint(x: 13.97, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 4.03, y: 0), controlPoint2: CGPoint(x: 0, y: 4.03))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 18), controlPoint1: CGPoint(x: 0, y: 13.97), controlPoint2: CGPoint(x: 4.03, y: 18))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor10.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 4.73, y: 13.27))
        bezier2Path.addCurve(to: CGPoint(x: 4.73, y: 4.8), controlPoint1: CGPoint(x: 2.4, y: 10.95), controlPoint2: CGPoint(x: 2.4, y: 7.13))
        bezier2Path.addCurve(to: CGPoint(x: 13.2, y: 4.8), controlPoint1: CGPoint(x: 7.05, y: 2.48), controlPoint2: CGPoint(x: 10.88, y: 2.48))
        bezier2Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 13.28, y: 4.72))
        bezier3Path.addCurve(to: CGPoint(x: 13.28, y: 13.2), controlPoint1: CGPoint(x: 15.6, y: 7.05), controlPoint2: CGPoint(x: 15.6, y: 10.87))
        bezier3Path.addCurve(to: CGPoint(x: 4.8, y: 13.2), controlPoint1: CGPoint(x: 10.95, y: 15.52), controlPoint2: CGPoint(x: 7.12, y: 15.52))
        bezier3Path.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 9, y: 1.5))
        bezier4Path.addCurve(to: CGPoint(x: 1.5, y: 9), controlPoint1: CGPoint(x: 4.88, y: 1.5), controlPoint2: CGPoint(x: 1.5, y: 4.88))
        bezier4Path.addCurve(to: CGPoint(x: 9, y: 16.5), controlPoint1: CGPoint(x: 1.5, y: 13.12), controlPoint2: CGPoint(x: 4.88, y: 16.5))
        bezier4Path.addCurve(to: CGPoint(x: 16.5, y: 9), controlPoint1: CGPoint(x: 13.12, y: 16.5), controlPoint2: CGPoint(x: 16.5, y: 13.12))
        bezier4Path.addCurve(to: CGPoint(x: 9, y: 1.5), controlPoint1: CGPoint(x: 16.5, y: 4.88), controlPoint2: CGPoint(x: 13.12, y: 1.5))
        bezier4Path.addLine(to: CGPoint(x: 9, y: 1.5))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 9, y: 15))
        bezier4Path.addCurve(to: CGPoint(x: 3, y: 9), controlPoint1: CGPoint(x: 5.7, y: 15), controlPoint2: CGPoint(x: 3, y: 12.3))
        bezier4Path.addCurve(to: CGPoint(x: 9, y: 3), controlPoint1: CGPoint(x: 3, y: 5.7), controlPoint2: CGPoint(x: 5.7, y: 3))
        bezier4Path.addCurve(to: CGPoint(x: 15, y: 9), controlPoint1: CGPoint(x: 12.3, y: 3), controlPoint2: CGPoint(x: 15, y: 5.7))
        bezier4Path.addCurve(to: CGPoint(x: 9, y: 15), controlPoint1: CGPoint(x: 15, y: 12.3), controlPoint2: CGPoint(x: 12.3, y: 15))
        bezier4Path.addLine(to: CGPoint(x: 9, y: 15))
        bezier4Path.close()
        bezier4Path.usesEvenOddFillRule = true
        fillColor12.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 9.75, y: 6.75))
        bezier5Path.addLine(to: CGPoint(x: 9.75, y: 8.25))
        bezier5Path.addLine(to: CGPoint(x: 8.25, y: 8.25))
        bezier5Path.addLine(to: CGPoint(x: 8.25, y: 6.75))
        bezier5Path.addLine(to: CGPoint(x: 6.75, y: 6.75))
        bezier5Path.addLine(to: CGPoint(x: 6.75, y: 11.25))
        bezier5Path.addLine(to: CGPoint(x: 8.25, y: 11.25))
        bezier5Path.addLine(to: CGPoint(x: 8.25, y: 9.75))
        bezier5Path.addLine(to: CGPoint(x: 9.75, y: 9.75))
        bezier5Path.addLine(to: CGPoint(x: 9.75, y: 11.25))
        bezier5Path.addLine(to: CGPoint(x: 11.25, y: 11.25))
        bezier5Path.addLine(to: CGPoint(x: 11.25, y: 6.75))
        bezier5Path.addLine(to: CGPoint(x: 9.75, y: 6.75))
        bezier5Path.close()
        bezier5Path.usesEvenOddFillRule = true
        fillColor13.setFill()
        bezier5Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawGem(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.500)
        let fillColor5 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.250)
        let fillColor14 = UIColor(red: 0.141, green: 0.800, blue: 0.561, alpha: 1.000)
        let fillColor15 = UIColor(red: 0.106, green: 0.600, blue: 0.420, alpha: 0.350)

        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: 6.75))
        bezierPath.addLine(to: CGPoint(x: 3.75, y: 1.5))
        bezierPath.addLine(to: CGPoint(x: 14.25, y: 1.5))
        bezierPath.addLine(to: CGPoint(x: 18, y: 6.75))
        bezierPath.addLine(to: CGPoint(x: 9, y: 16.5))
        bezierPath.addLine(to: CGPoint(x: 0, y: 6.75))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor14.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 5.25, y: 6.6))
        bezier2Path.addLine(to: CGPoint(x: 4.5, y: 3))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 3))
        bezier2Path.addLine(to: CGPoint(x: 5.25, y: 6.6))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 12.75, y: 6.6))
        bezier3Path.addLine(to: CGPoint(x: 13.5, y: 3))
        bezier3Path.addLine(to: CGPoint(x: 9, y: 3))
        bezier3Path.addLine(to: CGPoint(x: 12.75, y: 6.6))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 5.25, y: 6.6))
        bezier4Path.addLine(to: CGPoint(x: 9, y: 3))
        bezier4Path.addLine(to: CGPoint(x: 12.75, y: 6.6))
        bezier4Path.addLine(to: CGPoint(x: 5.25, y: 6.6))
        bezier4Path.close()
        bezier4Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 1.95, y: 6.6))
        bezier5Path.addLine(to: CGPoint(x: 4.5, y: 3))
        bezier5Path.addLine(to: CGPoint(x: 5.25, y: 6.6))
        bezier5Path.addLine(to: CGPoint(x: 1.95, y: 6.6))
        bezier5Path.close()
        bezier5Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 16.05, y: 6.6))
        bezier6Path.addLine(to: CGPoint(x: 13.5, y: 3))
        bezier6Path.addLine(to: CGPoint(x: 12.75, y: 6.6))
        bezier6Path.addLine(to: CGPoint(x: 16.05, y: 6.6))
        bezier6Path.close()
        bezier6Path.usesEvenOddFillRule = true
        fillColor15.setFill()
        bezier6Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 1.95, y: 6.6))
        bezier7Path.addLine(to: CGPoint(x: 5.25, y: 6.6))
        bezier7Path.addLine(to: CGPoint(x: 9, y: 14.32))
        bezier7Path.addLine(to: CGPoint(x: 1.95, y: 6.6))
        bezier7Path.close()
        bezier7Path.usesEvenOddFillRule = true
        fillColor15.setFill()
        bezier7Path.fill()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 16.05, y: 6.6))
        bezier8Path.addLine(to: CGPoint(x: 12.75, y: 6.6))
        bezier8Path.addLine(to: CGPoint(x: 9, y: 14.32))
        bezier8Path.addLine(to: CGPoint(x: 16.05, y: 6.6))
        bezier8Path.close()
        bezier8Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier8Path.fill()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 5.25, y: 6.6))
        bezier9Path.addLine(to: CGPoint(x: 12.75, y: 6.6))
        bezier9Path.addLine(to: CGPoint(x: 9, y: 14.32))
        bezier9Path.addLine(to: CGPoint(x: 5.25, y: 6.6))
        bezier9Path.close()
        bezier9Path.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezier9Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHourglass(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let fillColor16 = UIColor(red: 0.663, green: 0.863, blue: 0.965, alpha: 0.800)
        let fillColor17 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.900)
        let fillColor18 = UIColor(red: 0.604, green: 0.384, blue: 1.000, alpha: 1.000)
        let fillColor19 = UIColor(red: 0.310, green: 0.165, blue: 0.576, alpha: 1.000)

        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 3, y: 14.35))
        bezierPath.addLine(to: CGPoint(x: 3, y: 16.37))
        bezierPath.addCurve(to: CGPoint(x: 3.3, y: 16.97), controlPoint1: CGPoint(x: 3, y: 16.61), controlPoint2: CGPoint(x: 3.11, y: 16.83))
        bezierPath.addCurve(to: CGPoint(x: 13.27, y: 16.97), controlPoint1: CGPoint(x: 5.39, y: 18.51), controlPoint2: CGPoint(x: 11.18, y: 18.51))
        bezierPath.addCurve(to: CGPoint(x: 13.57, y: 16.37), controlPoint1: CGPoint(x: 13.46, y: 16.83), controlPoint2: CGPoint(x: 13.57, y: 16.61))
        bezierPath.addLine(to: CGPoint(x: 13.57, y: 14.35))
        bezierPath.addCurve(to: CGPoint(x: 11.19, y: 9.68), controlPoint1: CGPoint(x: 13.57, y: 12.5), controlPoint2: CGPoint(x: 12.62, y: 10.73))
        bezierPath.addCurve(to: CGPoint(x: 11.19, y: 8.45), controlPoint1: CGPoint(x: 10.77, y: 9.37), controlPoint2: CGPoint(x: 10.77, y: 8.75))
        bezierPath.addCurve(to: CGPoint(x: 13.57, y: 3.78), controlPoint1: CGPoint(x: 12.62, y: 7.39), controlPoint2: CGPoint(x: 13.57, y: 5.62))
        bezierPath.addLine(to: CGPoint(x: 13.57, y: 1.75))
        bezierPath.addCurve(to: CGPoint(x: 13.27, y: 1.15), controlPoint1: CGPoint(x: 13.57, y: 1.52), controlPoint2: CGPoint(x: 13.46, y: 1.29))
        bezierPath.addCurve(to: CGPoint(x: 3.3, y: 1.15), controlPoint1: CGPoint(x: 11.18, y: -0.38), controlPoint2: CGPoint(x: 5.39, y: -0.38))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 1.75), controlPoint1: CGPoint(x: 3.11, y: 1.29), controlPoint2: CGPoint(x: 3, y: 1.52))
        bezierPath.addLine(to: CGPoint(x: 3, y: 3.78))
        bezierPath.addCurve(to: CGPoint(x: 5.38, y: 8.45), controlPoint1: CGPoint(x: 3, y: 5.62), controlPoint2: CGPoint(x: 3.95, y: 7.39))
        bezierPath.addCurve(to: CGPoint(x: 5.38, y: 9.68), controlPoint1: CGPoint(x: 5.8, y: 8.75), controlPoint2: CGPoint(x: 5.8, y: 9.37))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 14.35), controlPoint1: CGPoint(x: 3.95, y: 10.73), controlPoint2: CGPoint(x: 3, y: 12.5))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor16.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 8.29, y: 1.51))
        bezier2Path.addCurve(to: CGPoint(x: 12.06, y: 2.18), controlPoint1: CGPoint(x: 10, y: 1.51), controlPoint2: CGPoint(x: 11.34, y: 1.82))
        bezier2Path.addLine(to: CGPoint(x: 12.06, y: 3.77))
        bezier2Path.addCurve(to: CGPoint(x: 10.3, y: 7.23), controlPoint1: CGPoint(x: 12.06, y: 5.1), controlPoint2: CGPoint(x: 11.38, y: 6.43))
        bezier2Path.addCurve(to: CGPoint(x: 9.37, y: 9.06), controlPoint1: CGPoint(x: 9.71, y: 7.66), controlPoint2: CGPoint(x: 9.37, y: 8.34))
        bezier2Path.addCurve(to: CGPoint(x: 10.29, y: 10.89), controlPoint1: CGPoint(x: 9.37, y: 9.78), controlPoint2: CGPoint(x: 9.71, y: 10.46))
        bezier2Path.addCurve(to: CGPoint(x: 12.06, y: 14.35), controlPoint1: CGPoint(x: 11.38, y: 11.69), controlPoint2: CGPoint(x: 12.06, y: 13.02))
        bezier2Path.addLine(to: CGPoint(x: 12.06, y: 15.94))
        bezier2Path.addCurve(to: CGPoint(x: 8.29, y: 16.61), controlPoint1: CGPoint(x: 11.34, y: 16.3), controlPoint2: CGPoint(x: 10, y: 16.61))
        bezier2Path.addCurve(to: CGPoint(x: 4.51, y: 15.94), controlPoint1: CGPoint(x: 6.57, y: 16.61), controlPoint2: CGPoint(x: 5.23, y: 16.3))
        bezier2Path.addLine(to: CGPoint(x: 4.51, y: 14.35))
        bezier2Path.addCurve(to: CGPoint(x: 6.28, y: 10.89), controlPoint1: CGPoint(x: 4.51, y: 13.02), controlPoint2: CGPoint(x: 5.19, y: 11.69))
        bezier2Path.addCurve(to: CGPoint(x: 7.21, y: 9.06), controlPoint1: CGPoint(x: 6.86, y: 10.46), controlPoint2: CGPoint(x: 7.21, y: 9.78))
        bezier2Path.addCurve(to: CGPoint(x: 6.28, y: 7.23), controlPoint1: CGPoint(x: 7.21, y: 8.34), controlPoint2: CGPoint(x: 6.86, y: 7.66))
        bezier2Path.addCurve(to: CGPoint(x: 4.51, y: 3.77), controlPoint1: CGPoint(x: 5.19, y: 6.43), controlPoint2: CGPoint(x: 4.51, y: 5.1))
        bezier2Path.addLine(to: CGPoint(x: 4.51, y: 2.18))
        bezier2Path.addCurve(to: CGPoint(x: 8.29, y: 1.51), controlPoint1: CGPoint(x: 5.23, y: 1.82), controlPoint2: CGPoint(x: 6.57, y: 1.51))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        fillColor17.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 8.46, y: 2.64))
        bezier3Path.addCurve(to: CGPoint(x: 5.79, y: 3.08), controlPoint1: CGPoint(x: 7.17, y: 2.64), controlPoint2: CGPoint(x: 5.81, y: 2.76))
        bezier3Path.addCurve(to: CGPoint(x: 6.83, y: 4.37), controlPoint1: CGPoint(x: 5.78, y: 3.34), controlPoint2: CGPoint(x: 5.79, y: 3.84))
        bezier3Path.addCurve(to: CGPoint(x: 8.59, y: 5.83), controlPoint1: CGPoint(x: 7.85, y: 4.88), controlPoint2: CGPoint(x: 8.04, y: 5.83))
        bezier3Path.addCurve(to: CGPoint(x: 10.05, y: 4.75), controlPoint1: CGPoint(x: 9.23, y: 5.83), controlPoint2: CGPoint(x: 9.27, y: 5.28))
        bezier3Path.addCurve(to: CGPoint(x: 10.98, y: 3.14), controlPoint1: CGPoint(x: 10.86, y: 4.19), controlPoint2: CGPoint(x: 10.99, y: 3.44))
        bezier3Path.addCurve(to: CGPoint(x: 8.46, y: 2.64), controlPoint1: CGPoint(x: 10.97, y: 2.73), controlPoint2: CGPoint(x: 9.75, y: 2.64))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        fillColor18.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 10.05, y: 4.75))
        bezier4Path.addCurve(to: CGPoint(x: 10.98, y: 3.14), controlPoint1: CGPoint(x: 10.86, y: 4.19), controlPoint2: CGPoint(x: 10.99, y: 3.44))
        bezier4Path.addCurve(to: CGPoint(x: 9.24, y: 2.66), controlPoint1: CGPoint(x: 10.97, y: 2.82), controlPoint2: CGPoint(x: 10.2, y: 2.7))
        bezier4Path.addCurve(to: CGPoint(x: 9.78, y: 3.66), controlPoint1: CGPoint(x: 9.51, y: 2.8), controlPoint2: CGPoint(x: 9.86, y: 3.09))
        bezier4Path.addCurve(to: CGPoint(x: 8.9, y: 5.44), controlPoint1: CGPoint(x: 9.69, y: 4.26), controlPoint2: CGPoint(x: 8.75, y: 4.92))
        bezier4Path.addCurve(to: CGPoint(x: 9.04, y: 5.7), controlPoint1: CGPoint(x: 8.93, y: 5.55), controlPoint2: CGPoint(x: 8.98, y: 5.63))
        bezier4Path.addCurve(to: CGPoint(x: 10.05, y: 4.75), controlPoint1: CGPoint(x: 9.32, y: 5.5), controlPoint2: CGPoint(x: 9.51, y: 5.12))
        bezier4Path.close()
        bezier4Path.usesEvenOddFillRule = true
        fillColor19.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 8.29, y: 10.44))
        bezier5Path.addCurve(to: CGPoint(x: 7.22, y: 11.59), controlPoint1: CGPoint(x: 7.89, y: 10.44), controlPoint2: CGPoint(x: 7.79, y: 11.15))
        bezier5Path.addCurve(to: CGPoint(x: 5.68, y: 13.77), controlPoint1: CGPoint(x: 6.53, y: 12.14), controlPoint2: CGPoint(x: 5.86, y: 12.81))
        bezier5Path.addCurve(to: CGPoint(x: 5.85, y: 14.72), controlPoint1: CGPoint(x: 5.53, y: 14.57), controlPoint2: CGPoint(x: 5.67, y: 14.67))
        bezier5Path.addCurve(to: CGPoint(x: 8.79, y: 14.72), controlPoint1: CGPoint(x: 6.03, y: 14.78), controlPoint2: CGPoint(x: 7.43, y: 15.01))
        bezier5Path.addCurve(to: CGPoint(x: 10.79, y: 13.33), controlPoint1: CGPoint(x: 10.16, y: 14.43), controlPoint2: CGPoint(x: 10.92, y: 13.88))
        bezier5Path.addCurve(to: CGPoint(x: 9.58, y: 11.82), controlPoint1: CGPoint(x: 10.66, y: 12.79), controlPoint2: CGPoint(x: 10.28, y: 12.34))
        bezier5Path.addCurve(to: CGPoint(x: 8.29, y: 10.44), controlPoint1: CGPoint(x: 8.9, y: 11.32), controlPoint2: CGPoint(x: 8.68, y: 10.44))
        bezier5Path.close()
        bezier5Path.usesEvenOddFillRule = true
        fillColor18.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 5.85, y: 14.72))
        bezier6Path.addCurve(to: CGPoint(x: 8.79, y: 14.72), controlPoint1: CGPoint(x: 6.03, y: 14.78), controlPoint2: CGPoint(x: 7.43, y: 15.01))
        bezier6Path.addCurve(to: CGPoint(x: 10.76, y: 13.66), controlPoint1: CGPoint(x: 9.88, y: 14.49), controlPoint2: CGPoint(x: 10.59, y: 14.1))
        bezier6Path.addCurve(to: CGPoint(x: 10.76, y: 13.64), controlPoint1: CGPoint(x: 10.76, y: 13.66), controlPoint2: CGPoint(x: 10.76, y: 13.65))
        bezier6Path.addCurve(to: CGPoint(x: 8.11, y: 13.4), controlPoint1: CGPoint(x: 10.68, y: 13.35), controlPoint2: CGPoint(x: 9.53, y: 13.17))
        bezier6Path.addCurve(to: CGPoint(x: 5.66, y: 14.57), controlPoint1: CGPoint(x: 6.75, y: 13.62), controlPoint2: CGPoint(x: 5.65, y: 14.07))
        bezier6Path.addCurve(to: CGPoint(x: 5.85, y: 14.72), controlPoint1: CGPoint(x: 5.7, y: 14.67), controlPoint2: CGPoint(x: 5.77, y: 14.7))
        bezier6Path.close()
        bezier6Path.usesEvenOddFillRule = true
        fillColor19.setFill()
        bezier6Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawExperienceReward(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 40, height: 40)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawExperience(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawGoldReward(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 40, height: 40)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawGold(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHeartDarkBg(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawHeart(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, darkBackground: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHeartLightBg(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawHeart(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, darkBackground: false)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawWarrior(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit, darkBackground: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Color Declarations
        let fillColor = UIColor(red: 0.941, green: 0.380, blue: 0.400, alpha: 1.000)
        let fillColor21 = UIColor(red: 1.000, green: 0.714, blue: 0.722, alpha: 1.000)
        let fillColor22 = UIColor(red: 0.949, green: 0.482, blue: 0.525, alpha: 1.000)
        let fillColor23 = UIColor(red: 0.898, green: 0.255, blue: 0.302, alpha: 1.000)
        let fillColor20 = UIColor(red: 1.000, green: 0.711, blue: 0.719, alpha: 1.000)
        let fillColor41 = UIColor(red: 1.000, green: 0.584, blue: 0.596, alpha: 1.000)
        let fillColor42 = UIColor(red: 1.000, green: 0.584, blue: 0.596, alpha: 1.000)
        let fillColor43 = UIColor(red: 0.784, green: 0.169, blue: 0.169, alpha: 1.000)

        //// Variable Declarations
        let lightBackground = !darkBackground

        if (darkBackground) {
            //// Group 2
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 12.58, y: 19.5))
            bezierPath.addLine(to: CGPoint(x: 15.88, y: 21.02))
            bezierPath.addCurve(to: CGPoint(x: 16.4, y: 21.7), controlPoint1: CGPoint(x: 16.15, y: 21.15), controlPoint2: CGPoint(x: 16.33, y: 21.4))
            bezierPath.addCurve(to: CGPoint(x: 16.89, y: 23.95), controlPoint1: CGPoint(x: 16.51, y: 22.19), controlPoint2: CGPoint(x: 16.86, y: 23.34))
            bezierPath.addCurve(to: CGPoint(x: 16.24, y: 24.39), controlPoint1: CGPoint(x: 16.9, y: 24.29), controlPoint2: CGPoint(x: 16.55, y: 24.53))
            bezierPath.addLine(to: CGPoint(x: 10.73, y: 21.75))
            bezierPath.addCurve(to: CGPoint(x: 10.33, y: 21.35), controlPoint1: CGPoint(x: 10.56, y: 21.66), controlPoint2: CGPoint(x: 10.42, y: 21.52))
            bezierPath.addLine(to: CGPoint(x: 7.69, y: 15.84))
            bezierPath.addCurve(to: CGPoint(x: 8.13, y: 15.19), controlPoint1: CGPoint(x: 7.55, y: 15.53), controlPoint2: CGPoint(x: 7.79, y: 15.18))
            bezierPath.addCurve(to: CGPoint(x: 10.38, y: 15.68), controlPoint1: CGPoint(x: 8.74, y: 15.22), controlPoint2: CGPoint(x: 9.86, y: 15.55))
            bezierPath.addCurve(to: CGPoint(x: 11.06, y: 16.2), controlPoint1: CGPoint(x: 10.67, y: 15.76), controlPoint2: CGPoint(x: 10.93, y: 15.93))
            bezierPath.addLine(to: CGPoint(x: 12.58, y: 19.5))
            bezierPath.close()
            bezierPath.usesEvenOddFillRule = true
            fillColor.setFill()
            bezierPath.fill()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 4.6, y: 27.48))
            bezier2Path.addLine(to: CGPoint(x: 6.02, y: 28.91))
            bezier2Path.addLine(to: CGPoint(x: 9.71, y: 28.61))
            bezier2Path.addLine(to: CGPoint(x: 9.9, y: 26.19))
            bezier2Path.addLine(to: CGPoint(x: 12.02, y: 24.07))
            bezier2Path.addLine(to: CGPoint(x: 15.88, y: 25.91))
            bezier2Path.addLine(to: CGPoint(x: 18.76, y: 25.13))
            bezier2Path.addLine(to: CGPoint(x: 17.55, y: 19.93))
            bezier2Path.addLine(to: CGPoint(x: 25.63, y: 12.39))
            bezier2Path.addLine(to: CGPoint(x: 27.18, y: 4.91))
            bezier2Path.addLine(to: CGPoint(x: 27.17, y: 4.91))
            bezier2Path.addLine(to: CGPoint(x: 27.18, y: 4.91))
            bezier2Path.addLine(to: CGPoint(x: 27.18, y: 4.9))
            bezier2Path.addLine(to: CGPoint(x: 19.7, y: 6.45))
            bezier2Path.addLine(to: CGPoint(x: 12.16, y: 14.53))
            bezier2Path.addLine(to: CGPoint(x: 6.95, y: 13.32))
            bezier2Path.addLine(to: CGPoint(x: 6.18, y: 16.2))
            bezier2Path.addLine(to: CGPoint(x: 8.01, y: 20.06))
            bezier2Path.addLine(to: CGPoint(x: 5.89, y: 22.18))
            bezier2Path.addLine(to: CGPoint(x: 3.47, y: 22.37))
            bezier2Path.addLine(to: CGPoint(x: 3.18, y: 26.06))
            bezier2Path.addLine(to: CGPoint(x: 4.6, y: 27.48))
            bezier2Path.addLine(to: CGPoint(x: 4.6, y: 27.48))
            bezier2Path.close()
            bezier2Path.usesEvenOddFillRule = true
            fillColor20.setFill()
            bezier2Path.fill()


            //// Rectangle Drawing
            context.saveGState()
            context.translateBy(x: 9, y: 23.05)
            context.rotate(by: 45 * CGFloat.pi/180)

            let rectanglePath = UIBezierPath(rect: CGRect(x: -1.3, y: -3.23, width: 2.6, height: 6.45))
            fillColor.setFill()
            rectanglePath.fill()

            context.restoreGState()


            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 4.76, y: 25.47))
            bezier3Path.addLine(to: CGPoint(x: 4.89, y: 23.79))
            bezier3Path.addLine(to: CGPoint(x: 6.58, y: 23.66))
            bezier3Path.addLine(to: CGPoint(x: 8.42, y: 25.5))
            bezier3Path.addLine(to: CGPoint(x: 8.29, y: 27.19))
            bezier3Path.addLine(to: CGPoint(x: 6.61, y: 27.32))
            bezier3Path.addLine(to: CGPoint(x: 4.76, y: 25.47))
            bezier3Path.close()
            bezier3Path.usesEvenOddFillRule = true
            fillColor.setFill()
            bezier3Path.fill()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 20.67, y: 7.92))
            bezier4Path.addLine(to: CGPoint(x: 20.83, y: 11.25))
            bezier4Path.addLine(to: CGPoint(x: 25.05, y: 7.03))
            bezier4Path.addCurve(to: CGPoint(x: 20.67, y: 7.92), controlPoint1: CGPoint(x: 24.98, y: 6.95), controlPoint2: CGPoint(x: 21.79, y: 7.32))
            bezier4Path.close()
            bezier4Path.usesEvenOddFillRule = true
            fillColor41.setFill()
            bezier4Path.fill()


            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 20.6, y: 7.96))
            bezier5Path.addLine(to: CGPoint(x: 11.68, y: 17.32))
            bezier5Path.addLine(to: CGPoint(x: 13.96, y: 18.12))
            bezier5Path.addLine(to: CGPoint(x: 20.83, y: 11.25))
            bezier5Path.addLine(to: CGPoint(x: 20.67, y: 7.92))
            bezier5Path.addCurve(to: CGPoint(x: 20.6, y: 7.96), controlPoint1: CGPoint(x: 20.65, y: 7.93), controlPoint2: CGPoint(x: 20.6, y: 7.96))
            bezier5Path.close()
            bezier5Path.usesEvenOddFillRule = true
            fillColor22.setFill()
            bezier5Path.fill()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 11.68, y: 17.32))
            bezier6Path.addCurve(to: CGPoint(x: 11.6, y: 17.4), controlPoint1: CGPoint(x: 11.65, y: 17.34), controlPoint2: CGPoint(x: 11.62, y: 17.37))
            bezier6Path.addLine(to: CGPoint(x: 12.57, y: 19.51))
            bezier6Path.addLine(to: CGPoint(x: 13.96, y: 18.12))
            bezier6Path.addLine(to: CGPoint(x: 11.68, y: 17.32))
            bezier6Path.close()
            bezier6Path.usesEvenOddFillRule = true
            fillColor22.setFill()
            bezier6Path.fill()


            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 24.16, y: 11.41))
            bezier7Path.addLine(to: CGPoint(x: 20.83, y: 11.25))
            bezier7Path.addLine(to: CGPoint(x: 25.05, y: 7.03))
            bezier7Path.addCurve(to: CGPoint(x: 24.16, y: 11.41), controlPoint1: CGPoint(x: 25.13, y: 7.11), controlPoint2: CGPoint(x: 24.76, y: 10.29))
            bezier7Path.close()
            bezier7Path.usesEvenOddFillRule = true
            fillColor22.setFill()
            bezier7Path.fill()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 24.12, y: 11.48))
            bezier8Path.addLine(to: CGPoint(x: 14.76, y: 20.4))
            bezier8Path.addLine(to: CGPoint(x: 13.96, y: 18.12))
            bezier8Path.addLine(to: CGPoint(x: 20.83, y: 11.25))
            bezier8Path.addLine(to: CGPoint(x: 24.16, y: 11.41))
            bezier8Path.addCurve(to: CGPoint(x: 24.12, y: 11.48), controlPoint1: CGPoint(x: 24.14, y: 11.43), controlPoint2: CGPoint(x: 24.12, y: 11.48))
            bezier8Path.close()
            bezier8Path.usesEvenOddFillRule = true
            fillColor23.setFill()
            bezier8Path.fill()


            //// Bezier 9 Drawing
            let bezier9Path = UIBezierPath()
            bezier9Path.move(to: CGPoint(x: 14.76, y: 20.4))
            bezier9Path.addCurve(to: CGPoint(x: 14.68, y: 20.48), controlPoint1: CGPoint(x: 14.73, y: 20.43), controlPoint2: CGPoint(x: 14.7, y: 20.46))
            bezier9Path.addLine(to: CGPoint(x: 12.57, y: 19.51))
            bezier9Path.addLine(to: CGPoint(x: 13.96, y: 18.12))
            bezier9Path.addLine(to: CGPoint(x: 14.76, y: 20.4))
            bezier9Path.close()
            bezier9Path.usesEvenOddFillRule = true
            fillColor23.setFill()
            bezier9Path.fill()


            //// Bezier 10 Drawing
            let bezier10Path = UIBezierPath()
            bezier10Path.move(to: CGPoint(x: 6.58, y: 23.66))
            bezier10Path.addLine(to: CGPoint(x: 6.19, y: 25.09))
            bezier10Path.addLine(to: CGPoint(x: 4.89, y: 23.79))
            bezier10Path.addLine(to: CGPoint(x: 6.58, y: 23.66))
            bezier10Path.close()
            bezier10Path.usesEvenOddFillRule = true
            fillColor42.setFill()
            bezier10Path.fill()


            //// Bezier 11 Drawing
            let bezier11Path = UIBezierPath()
            bezier11Path.move(to: CGPoint(x: 8.42, y: 25.5))
            bezier11Path.addLine(to: CGPoint(x: 6.99, y: 25.89))
            bezier11Path.addLine(to: CGPoint(x: 8.29, y: 27.19))
            bezier11Path.addLine(to: CGPoint(x: 8.42, y: 25.5))
            bezier11Path.close()
            bezier11Path.usesEvenOddFillRule = true
            fillColor42.setFill()
            bezier11Path.fill()


            //// Bezier 12 Drawing
            let bezier12Path = UIBezierPath()
            bezier12Path.move(to: CGPoint(x: 6.58, y: 23.66))
            bezier12Path.addLine(to: CGPoint(x: 8.42, y: 25.5))
            bezier12Path.addLine(to: CGPoint(x: 6.99, y: 25.89))
            bezier12Path.addLine(to: CGPoint(x: 6.19, y: 25.09))
            bezier12Path.addLine(to: CGPoint(x: 6.58, y: 23.66))
            bezier12Path.close()
            bezier12Path.usesEvenOddFillRule = true
            fillColor42.setFill()
            bezier12Path.fill()


            //// Bezier 13 Drawing
            let bezier13Path = UIBezierPath()
            bezier13Path.move(to: CGPoint(x: 4.76, y: 25.48))
            bezier13Path.addLine(to: CGPoint(x: 6.19, y: 25.09))
            bezier13Path.addLine(to: CGPoint(x: 4.89, y: 23.79))
            bezier13Path.addLine(to: CGPoint(x: 4.76, y: 25.48))
            bezier13Path.close()
            bezier13Path.usesEvenOddFillRule = true
            fillColor22.setFill()
            bezier13Path.fill()


            //// Bezier 14 Drawing
            let bezier14Path = UIBezierPath()
            bezier14Path.move(to: CGPoint(x: 6.6, y: 27.32))
            bezier14Path.addLine(to: CGPoint(x: 6.99, y: 25.89))
            bezier14Path.addLine(to: CGPoint(x: 8.29, y: 27.19))
            bezier14Path.addLine(to: CGPoint(x: 6.6, y: 27.32))
            bezier14Path.close()
            bezier14Path.usesEvenOddFillRule = true
            fillColor22.setFill()
            bezier14Path.fill()


            //// Bezier 15 Drawing
            let bezier15Path = UIBezierPath()
            bezier15Path.move(to: CGPoint(x: 4.76, y: 25.48))
            bezier15Path.addLine(to: CGPoint(x: 6.61, y: 27.32))
            bezier15Path.addLine(to: CGPoint(x: 6.99, y: 25.89))
            bezier15Path.addLine(to: CGPoint(x: 6.19, y: 25.09))
            bezier15Path.addLine(to: CGPoint(x: 4.76, y: 25.48))
            bezier15Path.close()
            bezier15Path.usesEvenOddFillRule = true
            fillColor22.setFill()
            bezier15Path.fill()


            //// Rectangle 2 Drawing
            context.saveGState()
            context.translateBy(x: 10.3, y: 21.8)
            context.rotate(by: 45 * CGFloat.pi/180)

            let rectangle2Path = UIBezierPath(rect: CGRect(x: -1.3, y: -0.8, width: 2.6, height: 1.6))
            fillColor23.setFill()
            rectangle2Path.fill()

            context.restoreGState()


            //// Rectangle 3 Drawing
            context.saveGState()
            context.translateBy(x: 9.15, y: 22.9)
            context.rotate(by: 45 * CGFloat.pi/180)

            let rectangle3Path = UIBezierPath(rect: CGRect(x: -1.3, y: -0.8, width: 2.6, height: 1.6))
            fillColor.setFill()
            rectangle3Path.fill()

            context.restoreGState()


            //// Rectangle 4 Drawing
            context.saveGState()
            context.translateBy(x: 8.05, y: 24)
            context.rotate(by: 45 * CGFloat.pi/180)

            let rectangle4Path = UIBezierPath(rect: CGRect(x: -1.3, y: -0.8, width: 2.6, height: 1.6))
            fillColor23.setFill()
            rectangle4Path.fill()

            context.restoreGState()


            //// Bezier 16 Drawing
            let bezier16Path = UIBezierPath()
            bezier16Path.move(to: CGPoint(x: 12.58, y: 19.5))
            bezier16Path.addLine(to: CGPoint(x: 11.06, y: 16.2))
            bezier16Path.addCurve(to: CGPoint(x: 10.82, y: 15.9), controlPoint1: CGPoint(x: 11, y: 16.08), controlPoint2: CGPoint(x: 10.92, y: 15.98))
            bezier16Path.addCurve(to: CGPoint(x: 10.38, y: 15.68), controlPoint1: CGPoint(x: 10.7, y: 15.8), controlPoint2: CGPoint(x: 10.55, y: 15.72))
            bezier16Path.addCurve(to: CGPoint(x: 8.13, y: 15.2), controlPoint1: CGPoint(x: 9.87, y: 15.55), controlPoint2: CGPoint(x: 8.74, y: 15.22))
            bezier16Path.addCurve(to: CGPoint(x: 7.75, y: 15.37), controlPoint1: CGPoint(x: 7.97, y: 15.19), controlPoint2: CGPoint(x: 7.84, y: 15.26))
            bezier16Path.addLine(to: CGPoint(x: 9.97, y: 17.26))
            bezier16Path.addLine(to: CGPoint(x: 11.6, y: 20.49))
            bezier16Path.addLine(to: CGPoint(x: 12.58, y: 19.5))
            bezier16Path.addLine(to: CGPoint(x: 12.58, y: 19.5))
            bezier16Path.close()
            bezier16Path.usesEvenOddFillRule = true
            fillColor42.setFill()
            bezier16Path.fill()


            //// Bezier 17 Drawing
            let bezier17Path = UIBezierPath()
            bezier17Path.move(to: CGPoint(x: 9.97, y: 17.26))
            bezier17Path.addLine(to: CGPoint(x: 7.75, y: 15.37))
            bezier17Path.addCurve(to: CGPoint(x: 7.69, y: 15.84), controlPoint1: CGPoint(x: 7.65, y: 15.5), controlPoint2: CGPoint(x: 7.61, y: 15.67))
            bezier17Path.addLine(to: CGPoint(x: 10.33, y: 21.36))
            bezier17Path.addCurve(to: CGPoint(x: 10.5, y: 21.59), controlPoint1: CGPoint(x: 10.37, y: 21.44), controlPoint2: CGPoint(x: 10.43, y: 21.52))
            bezier17Path.addLine(to: CGPoint(x: 11.6, y: 20.49))
            bezier17Path.addLine(to: CGPoint(x: 9.97, y: 17.26))
            bezier17Path.close()
            bezier17Path.usesEvenOddFillRule = true
            fillColor.setFill()
            bezier17Path.fill()


            //// Bezier 18 Drawing
            let bezier18Path = UIBezierPath()
            bezier18Path.move(to: CGPoint(x: 16.89, y: 23.95))
            bezier18Path.addCurve(to: CGPoint(x: 16.4, y: 21.7), controlPoint1: CGPoint(x: 16.86, y: 23.34), controlPoint2: CGPoint(x: 16.54, y: 22.22))
            bezier18Path.addCurve(to: CGPoint(x: 16.18, y: 21.26), controlPoint1: CGPoint(x: 16.36, y: 21.54), controlPoint2: CGPoint(x: 16.29, y: 21.39))
            bezier18Path.addCurve(to: CGPoint(x: 15.88, y: 21.02), controlPoint1: CGPoint(x: 16.1, y: 21.16), controlPoint2: CGPoint(x: 16.01, y: 21.08))
            bezier18Path.addLine(to: CGPoint(x: 12.59, y: 19.5))
            bezier18Path.addLine(to: CGPoint(x: 12.58, y: 19.5))
            bezier18Path.addLine(to: CGPoint(x: 11.6, y: 20.49))
            bezier18Path.addLine(to: CGPoint(x: 14.82, y: 22.12))
            bezier18Path.addLine(to: CGPoint(x: 16.72, y: 24.33))
            bezier18Path.addCurve(to: CGPoint(x: 16.89, y: 23.95), controlPoint1: CGPoint(x: 16.83, y: 24.25), controlPoint2: CGPoint(x: 16.9, y: 24.11))
            bezier18Path.close()
            bezier18Path.usesEvenOddFillRule = true
            fillColor22.setFill()
            bezier18Path.fill()


            //// Bezier 19 Drawing
            let bezier19Path = UIBezierPath()
            bezier19Path.move(to: CGPoint(x: 14.82, y: 22.12))
            bezier19Path.addLine(to: CGPoint(x: 16.72, y: 24.33))
            bezier19Path.addCurve(to: CGPoint(x: 16.25, y: 24.39), controlPoint1: CGPoint(x: 16.59, y: 24.43), controlPoint2: CGPoint(x: 16.41, y: 24.47))
            bezier19Path.addLine(to: CGPoint(x: 10.73, y: 21.75))
            bezier19Path.addCurve(to: CGPoint(x: 10.5, y: 21.58), controlPoint1: CGPoint(x: 10.65, y: 21.71), controlPoint2: CGPoint(x: 10.57, y: 21.65))
            bezier19Path.addLine(to: CGPoint(x: 11.6, y: 20.49))
            bezier19Path.addLine(to: CGPoint(x: 14.82, y: 22.12))
            bezier19Path.close()
            bezier19Path.usesEvenOddFillRule = true
            fillColor23.setFill()
            bezier19Path.fill()


            //// Group 3
            context.saveGState()
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            //// Clip Clip
            let clipPath = UIBezierPath()
            clipPath.move(to: CGPoint(x: 19.35, y: 9.27))
            clipPath.addLine(to: CGPoint(x: 15.81, y: 12.98))
            clipPath.addLine(to: CGPoint(x: 15.81, y: 16.27))
            clipPath.addLine(to: CGPoint(x: 19.35, y: 12.73))
            clipPath.addLine(to: CGPoint(x: 19.35, y: 9.27))
            clipPath.addLine(to: CGPoint(x: 19.35, y: 9.27))
            clipPath.close()
            clipPath.usesEvenOddFillRule = true
            clipPath.addClip()


            //// Bezier 20 Drawing
            let bezier20Path = UIBezierPath()
            bezier20Path.move(to: CGPoint(x: 18.86, y: 16.61))
            bezier20Path.addLine(to: CGPoint(x: 18.35, y: 16.65))
            bezier20Path.addCurve(to: CGPoint(x: 18.35, y: 9), controlPoint1: CGPoint(x: 18.35, y: 16.65), controlPoint2: CGPoint(x: 18.35, y: 11.56))
            bezier20Path.addLine(to: CGPoint(x: 18.86, y: 9))
            bezier20Path.addCurve(to: CGPoint(x: 18.86, y: 16.65), controlPoint1: CGPoint(x: 18.86, y: 11.56), controlPoint2: CGPoint(x: 18.86, y: 16.65))
            bezier20Path.addLine(to: CGPoint(x: 18.86, y: 16.61))
            bezier20Path.close()
            fillColor42.setFill()
            bezier20Path.fill()


            //// Rectangle 5 Drawing
            let rectangle5Path = UIBezierPath(rect: CGRect(x: 15.8, y: 9.87, width: 1.5, height: 7.15))
            fillColor42.setFill()
            rectangle5Path.fill()


            context.endTransparencyLayer()
            context.restoreGState()


        }


        if (lightBackground) {
            //// Group 4
            //// Bezier 21 Drawing
            let bezier21Path = UIBezierPath()
            bezier21Path.move(to: CGPoint(x: 12.58, y: 19.5))
            bezier21Path.addLine(to: CGPoint(x: 15.88, y: 21.02))
            bezier21Path.addCurve(to: CGPoint(x: 16.4, y: 21.7), controlPoint1: CGPoint(x: 16.15, y: 21.15), controlPoint2: CGPoint(x: 16.33, y: 21.4))
            bezier21Path.addCurve(to: CGPoint(x: 16.89, y: 23.95), controlPoint1: CGPoint(x: 16.51, y: 22.19), controlPoint2: CGPoint(x: 16.86, y: 23.34))
            bezier21Path.addCurve(to: CGPoint(x: 16.24, y: 24.39), controlPoint1: CGPoint(x: 16.9, y: 24.29), controlPoint2: CGPoint(x: 16.55, y: 24.53))
            bezier21Path.addLine(to: CGPoint(x: 10.73, y: 21.75))
            bezier21Path.addCurve(to: CGPoint(x: 10.33, y: 21.35), controlPoint1: CGPoint(x: 10.56, y: 21.66), controlPoint2: CGPoint(x: 10.42, y: 21.52))
            bezier21Path.addLine(to: CGPoint(x: 7.69, y: 15.84))
            bezier21Path.addCurve(to: CGPoint(x: 8.13, y: 15.19), controlPoint1: CGPoint(x: 7.55, y: 15.53), controlPoint2: CGPoint(x: 7.79, y: 15.18))
            bezier21Path.addCurve(to: CGPoint(x: 10.38, y: 15.68), controlPoint1: CGPoint(x: 8.74, y: 15.22), controlPoint2: CGPoint(x: 9.86, y: 15.55))
            bezier21Path.addCurve(to: CGPoint(x: 11.06, y: 16.2), controlPoint1: CGPoint(x: 10.67, y: 15.76), controlPoint2: CGPoint(x: 10.93, y: 15.93))
            bezier21Path.addLine(to: CGPoint(x: 12.58, y: 19.5))
            bezier21Path.close()
            bezier21Path.usesEvenOddFillRule = true
            fillColor.setFill()
            bezier21Path.fill()


            //// Bezier 22 Drawing
            let bezier22Path = UIBezierPath()
            bezier22Path.move(to: CGPoint(x: 4.6, y: 27.48))
            bezier22Path.addLine(to: CGPoint(x: 6.02, y: 28.91))
            bezier22Path.addLine(to: CGPoint(x: 9.71, y: 28.61))
            bezier22Path.addLine(to: CGPoint(x: 9.9, y: 26.19))
            bezier22Path.addLine(to: CGPoint(x: 12.02, y: 24.07))
            bezier22Path.addLine(to: CGPoint(x: 15.88, y: 25.91))
            bezier22Path.addLine(to: CGPoint(x: 18.76, y: 25.13))
            bezier22Path.addLine(to: CGPoint(x: 17.55, y: 19.93))
            bezier22Path.addLine(to: CGPoint(x: 25.63, y: 12.39))
            bezier22Path.addLine(to: CGPoint(x: 27.18, y: 4.91))
            bezier22Path.addLine(to: CGPoint(x: 27.17, y: 4.91))
            bezier22Path.addLine(to: CGPoint(x: 27.18, y: 4.91))
            bezier22Path.addLine(to: CGPoint(x: 27.18, y: 4.9))
            bezier22Path.addLine(to: CGPoint(x: 19.7, y: 6.45))
            bezier22Path.addLine(to: CGPoint(x: 12.16, y: 14.53))
            bezier22Path.addLine(to: CGPoint(x: 6.95, y: 13.32))
            bezier22Path.addLine(to: CGPoint(x: 6.18, y: 16.2))
            bezier22Path.addLine(to: CGPoint(x: 8.01, y: 20.06))
            bezier22Path.addLine(to: CGPoint(x: 5.89, y: 22.18))
            bezier22Path.addLine(to: CGPoint(x: 3.47, y: 22.37))
            bezier22Path.addLine(to: CGPoint(x: 3.18, y: 26.06))
            bezier22Path.addLine(to: CGPoint(x: 4.6, y: 27.48))
            bezier22Path.addLine(to: CGPoint(x: 4.6, y: 27.48))
            bezier22Path.close()
            bezier22Path.usesEvenOddFillRule = true
            fillColor43.setFill()
            bezier22Path.fill()


            //// Rectangle 6 Drawing
            context.saveGState()
            context.translateBy(x: 9, y: 23.05)
            context.rotate(by: 45 * CGFloat.pi/180)

            let rectangle6Path = UIBezierPath(rect: CGRect(x: -1.3, y: -3.23, width: 2.6, height: 6.45))
            fillColor.setFill()
            rectangle6Path.fill()

            context.restoreGState()


            //// Bezier 23 Drawing
            let bezier23Path = UIBezierPath()
            bezier23Path.move(to: CGPoint(x: 4.76, y: 25.47))
            bezier23Path.addLine(to: CGPoint(x: 4.89, y: 23.79))
            bezier23Path.addLine(to: CGPoint(x: 6.58, y: 23.66))
            bezier23Path.addLine(to: CGPoint(x: 8.42, y: 25.5))
            bezier23Path.addLine(to: CGPoint(x: 8.29, y: 27.19))
            bezier23Path.addLine(to: CGPoint(x: 6.61, y: 27.32))
            bezier23Path.addLine(to: CGPoint(x: 4.76, y: 25.47))
            bezier23Path.close()
            bezier23Path.usesEvenOddFillRule = true
            fillColor.setFill()
            bezier23Path.fill()


            //// Bezier 24 Drawing
            let bezier24Path = UIBezierPath()
            bezier24Path.move(to: CGPoint(x: 20.67, y: 7.92))
            bezier24Path.addLine(to: CGPoint(x: 20.83, y: 11.25))
            bezier24Path.addLine(to: CGPoint(x: 25.05, y: 7.03))
            bezier24Path.addCurve(to: CGPoint(x: 20.67, y: 7.92), controlPoint1: CGPoint(x: 24.98, y: 6.95), controlPoint2: CGPoint(x: 21.79, y: 7.32))
            bezier24Path.close()
            bezier24Path.usesEvenOddFillRule = true
            fillColor21.setFill()
            bezier24Path.fill()


            //// Bezier 25 Drawing
            let bezier25Path = UIBezierPath()
            bezier25Path.move(to: CGPoint(x: 20.6, y: 7.96))
            bezier25Path.addLine(to: CGPoint(x: 11.68, y: 17.32))
            bezier25Path.addLine(to: CGPoint(x: 13.96, y: 18.12))
            bezier25Path.addLine(to: CGPoint(x: 20.83, y: 11.25))
            bezier25Path.addLine(to: CGPoint(x: 20.67, y: 7.92))
            bezier25Path.addCurve(to: CGPoint(x: 20.6, y: 7.96), controlPoint1: CGPoint(x: 20.65, y: 7.93), controlPoint2: CGPoint(x: 20.6, y: 7.96))
            bezier25Path.close()
            bezier25Path.usesEvenOddFillRule = true
            fillColor22.setFill()
            bezier25Path.fill()


            //// Bezier 26 Drawing
            let bezier26Path = UIBezierPath()
            bezier26Path.move(to: CGPoint(x: 11.68, y: 17.32))
            bezier26Path.addCurve(to: CGPoint(x: 11.6, y: 17.4), controlPoint1: CGPoint(x: 11.65, y: 17.34), controlPoint2: CGPoint(x: 11.62, y: 17.37))
            bezier26Path.addLine(to: CGPoint(x: 12.57, y: 19.51))
            bezier26Path.addLine(to: CGPoint(x: 13.96, y: 18.12))
            bezier26Path.addLine(to: CGPoint(x: 11.68, y: 17.32))
            bezier26Path.close()
            bezier26Path.usesEvenOddFillRule = true
            fillColor22.setFill()
            bezier26Path.fill()


            //// Bezier 27 Drawing
            let bezier27Path = UIBezierPath()
            bezier27Path.move(to: CGPoint(x: 24.16, y: 11.41))
            bezier27Path.addLine(to: CGPoint(x: 20.83, y: 11.25))
            bezier27Path.addLine(to: CGPoint(x: 25.05, y: 7.03))
            bezier27Path.addCurve(to: CGPoint(x: 24.16, y: 11.41), controlPoint1: CGPoint(x: 25.13, y: 7.11), controlPoint2: CGPoint(x: 24.76, y: 10.29))
            bezier27Path.close()
            bezier27Path.usesEvenOddFillRule = true
            fillColor22.setFill()
            bezier27Path.fill()


            //// Bezier 28 Drawing
            let bezier28Path = UIBezierPath()
            bezier28Path.move(to: CGPoint(x: 24.12, y: 11.48))
            bezier28Path.addLine(to: CGPoint(x: 14.76, y: 20.4))
            bezier28Path.addLine(to: CGPoint(x: 13.96, y: 18.12))
            bezier28Path.addLine(to: CGPoint(x: 20.83, y: 11.25))
            bezier28Path.addLine(to: CGPoint(x: 24.16, y: 11.41))
            bezier28Path.addCurve(to: CGPoint(x: 24.12, y: 11.48), controlPoint1: CGPoint(x: 24.14, y: 11.43), controlPoint2: CGPoint(x: 24.12, y: 11.48))
            bezier28Path.close()
            bezier28Path.usesEvenOddFillRule = true
            fillColor23.setFill()
            bezier28Path.fill()


            //// Bezier 29 Drawing
            let bezier29Path = UIBezierPath()
            bezier29Path.move(to: CGPoint(x: 14.76, y: 20.4))
            bezier29Path.addCurve(to: CGPoint(x: 14.68, y: 20.48), controlPoint1: CGPoint(x: 14.73, y: 20.43), controlPoint2: CGPoint(x: 14.7, y: 20.46))
            bezier29Path.addLine(to: CGPoint(x: 12.57, y: 19.51))
            bezier29Path.addLine(to: CGPoint(x: 13.96, y: 18.12))
            bezier29Path.addLine(to: CGPoint(x: 14.76, y: 20.4))
            bezier29Path.close()
            bezier29Path.usesEvenOddFillRule = true
            fillColor23.setFill()
            bezier29Path.fill()


            //// Bezier 30 Drawing
            let bezier30Path = UIBezierPath()
            bezier30Path.move(to: CGPoint(x: 6.58, y: 23.66))
            bezier30Path.addLine(to: CGPoint(x: 6.19, y: 25.09))
            bezier30Path.addLine(to: CGPoint(x: 4.89, y: 23.79))
            bezier30Path.addLine(to: CGPoint(x: 6.58, y: 23.66))
            bezier30Path.close()
            bezier30Path.usesEvenOddFillRule = true
            fillColor21.setFill()
            bezier30Path.fill()


            //// Bezier 31 Drawing
            let bezier31Path = UIBezierPath()
            bezier31Path.move(to: CGPoint(x: 8.42, y: 25.5))
            bezier31Path.addLine(to: CGPoint(x: 6.99, y: 25.89))
            bezier31Path.addLine(to: CGPoint(x: 8.29, y: 27.19))
            bezier31Path.addLine(to: CGPoint(x: 8.42, y: 25.5))
            bezier31Path.close()
            bezier31Path.usesEvenOddFillRule = true
            fillColor21.setFill()
            bezier31Path.fill()


            //// Bezier 32 Drawing
            let bezier32Path = UIBezierPath()
            bezier32Path.move(to: CGPoint(x: 6.58, y: 23.66))
            bezier32Path.addLine(to: CGPoint(x: 8.42, y: 25.5))
            bezier32Path.addLine(to: CGPoint(x: 6.99, y: 25.89))
            bezier32Path.addLine(to: CGPoint(x: 6.19, y: 25.09))
            bezier32Path.addLine(to: CGPoint(x: 6.58, y: 23.66))
            bezier32Path.close()
            bezier32Path.usesEvenOddFillRule = true
            fillColor21.setFill()
            bezier32Path.fill()


            //// Bezier 33 Drawing
            let bezier33Path = UIBezierPath()
            bezier33Path.move(to: CGPoint(x: 4.76, y: 25.48))
            bezier33Path.addLine(to: CGPoint(x: 6.19, y: 25.09))
            bezier33Path.addLine(to: CGPoint(x: 4.89, y: 23.79))
            bezier33Path.addLine(to: CGPoint(x: 4.76, y: 25.48))
            bezier33Path.close()
            bezier33Path.usesEvenOddFillRule = true
            fillColor22.setFill()
            bezier33Path.fill()


            //// Bezier 34 Drawing
            let bezier34Path = UIBezierPath()
            bezier34Path.move(to: CGPoint(x: 6.6, y: 27.32))
            bezier34Path.addLine(to: CGPoint(x: 6.99, y: 25.89))
            bezier34Path.addLine(to: CGPoint(x: 8.29, y: 27.19))
            bezier34Path.addLine(to: CGPoint(x: 6.6, y: 27.32))
            bezier34Path.close()
            bezier34Path.usesEvenOddFillRule = true
            fillColor22.setFill()
            bezier34Path.fill()


            //// Bezier 35 Drawing
            let bezier35Path = UIBezierPath()
            bezier35Path.move(to: CGPoint(x: 4.76, y: 25.48))
            bezier35Path.addLine(to: CGPoint(x: 6.61, y: 27.32))
            bezier35Path.addLine(to: CGPoint(x: 6.99, y: 25.89))
            bezier35Path.addLine(to: CGPoint(x: 6.19, y: 25.09))
            bezier35Path.addLine(to: CGPoint(x: 4.76, y: 25.48))
            bezier35Path.close()
            bezier35Path.usesEvenOddFillRule = true
            fillColor22.setFill()
            bezier35Path.fill()


            //// Rectangle 7 Drawing
            context.saveGState()
            context.translateBy(x: 10.3, y: 21.8)
            context.rotate(by: 45 * CGFloat.pi/180)

            let rectangle7Path = UIBezierPath(rect: CGRect(x: -1.3, y: -0.8, width: 2.6, height: 1.6))
            fillColor23.setFill()
            rectangle7Path.fill()

            context.restoreGState()


            //// Rectangle 8 Drawing
            context.saveGState()
            context.translateBy(x: 9.15, y: 22.9)
            context.rotate(by: 45 * CGFloat.pi/180)

            let rectangle8Path = UIBezierPath(rect: CGRect(x: -1.3, y: -0.8, width: 2.6, height: 1.6))
            fillColor.setFill()
            rectangle8Path.fill()

            context.restoreGState()


            //// Rectangle 9 Drawing
            context.saveGState()
            context.translateBy(x: 8.05, y: 24)
            context.rotate(by: 45 * CGFloat.pi/180)

            let rectangle9Path = UIBezierPath(rect: CGRect(x: -1.3, y: -0.8, width: 2.6, height: 1.6))
            fillColor23.setFill()
            rectangle9Path.fill()

            context.restoreGState()


            //// Bezier 36 Drawing
            let bezier36Path = UIBezierPath()
            bezier36Path.move(to: CGPoint(x: 12.58, y: 19.5))
            bezier36Path.addLine(to: CGPoint(x: 11.06, y: 16.2))
            bezier36Path.addCurve(to: CGPoint(x: 10.82, y: 15.9), controlPoint1: CGPoint(x: 11, y: 16.08), controlPoint2: CGPoint(x: 10.92, y: 15.98))
            bezier36Path.addCurve(to: CGPoint(x: 10.38, y: 15.68), controlPoint1: CGPoint(x: 10.7, y: 15.8), controlPoint2: CGPoint(x: 10.55, y: 15.72))
            bezier36Path.addCurve(to: CGPoint(x: 8.13, y: 15.2), controlPoint1: CGPoint(x: 9.87, y: 15.55), controlPoint2: CGPoint(x: 8.74, y: 15.22))
            bezier36Path.addCurve(to: CGPoint(x: 7.75, y: 15.37), controlPoint1: CGPoint(x: 7.97, y: 15.19), controlPoint2: CGPoint(x: 7.84, y: 15.26))
            bezier36Path.addLine(to: CGPoint(x: 9.97, y: 17.26))
            bezier36Path.addLine(to: CGPoint(x: 11.6, y: 20.49))
            bezier36Path.addLine(to: CGPoint(x: 12.58, y: 19.5))
            bezier36Path.addLine(to: CGPoint(x: 12.58, y: 19.5))
            bezier36Path.close()
            bezier36Path.usesEvenOddFillRule = true
            fillColor21.setFill()
            bezier36Path.fill()


            //// Bezier 37 Drawing
            let bezier37Path = UIBezierPath()
            bezier37Path.move(to: CGPoint(x: 9.97, y: 17.26))
            bezier37Path.addLine(to: CGPoint(x: 7.75, y: 15.37))
            bezier37Path.addCurve(to: CGPoint(x: 7.69, y: 15.84), controlPoint1: CGPoint(x: 7.65, y: 15.5), controlPoint2: CGPoint(x: 7.61, y: 15.67))
            bezier37Path.addLine(to: CGPoint(x: 10.33, y: 21.36))
            bezier37Path.addCurve(to: CGPoint(x: 10.5, y: 21.59), controlPoint1: CGPoint(x: 10.37, y: 21.44), controlPoint2: CGPoint(x: 10.43, y: 21.52))
            bezier37Path.addLine(to: CGPoint(x: 11.6, y: 20.49))
            bezier37Path.addLine(to: CGPoint(x: 9.97, y: 17.26))
            bezier37Path.close()
            bezier37Path.usesEvenOddFillRule = true
            fillColor.setFill()
            bezier37Path.fill()


            //// Bezier 38 Drawing
            let bezier38Path = UIBezierPath()
            bezier38Path.move(to: CGPoint(x: 16.89, y: 23.95))
            bezier38Path.addCurve(to: CGPoint(x: 16.4, y: 21.7), controlPoint1: CGPoint(x: 16.86, y: 23.34), controlPoint2: CGPoint(x: 16.54, y: 22.22))
            bezier38Path.addCurve(to: CGPoint(x: 16.18, y: 21.26), controlPoint1: CGPoint(x: 16.36, y: 21.54), controlPoint2: CGPoint(x: 16.29, y: 21.39))
            bezier38Path.addCurve(to: CGPoint(x: 15.88, y: 21.02), controlPoint1: CGPoint(x: 16.1, y: 21.16), controlPoint2: CGPoint(x: 16.01, y: 21.08))
            bezier38Path.addLine(to: CGPoint(x: 12.59, y: 19.5))
            bezier38Path.addLine(to: CGPoint(x: 12.58, y: 19.5))
            bezier38Path.addLine(to: CGPoint(x: 11.6, y: 20.49))
            bezier38Path.addLine(to: CGPoint(x: 14.82, y: 22.12))
            bezier38Path.addLine(to: CGPoint(x: 16.72, y: 24.33))
            bezier38Path.addCurve(to: CGPoint(x: 16.89, y: 23.95), controlPoint1: CGPoint(x: 16.83, y: 24.25), controlPoint2: CGPoint(x: 16.9, y: 24.11))
            bezier38Path.close()
            bezier38Path.usesEvenOddFillRule = true
            fillColor22.setFill()
            bezier38Path.fill()


            //// Bezier 39 Drawing
            let bezier39Path = UIBezierPath()
            bezier39Path.move(to: CGPoint(x: 14.82, y: 22.12))
            bezier39Path.addLine(to: CGPoint(x: 16.72, y: 24.33))
            bezier39Path.addCurve(to: CGPoint(x: 16.25, y: 24.39), controlPoint1: CGPoint(x: 16.59, y: 24.43), controlPoint2: CGPoint(x: 16.41, y: 24.47))
            bezier39Path.addLine(to: CGPoint(x: 10.73, y: 21.75))
            bezier39Path.addCurve(to: CGPoint(x: 10.5, y: 21.58), controlPoint1: CGPoint(x: 10.65, y: 21.71), controlPoint2: CGPoint(x: 10.57, y: 21.65))
            bezier39Path.addLine(to: CGPoint(x: 11.6, y: 20.49))
            bezier39Path.addLine(to: CGPoint(x: 14.82, y: 22.12))
            bezier39Path.close()
            bezier39Path.usesEvenOddFillRule = true
            fillColor23.setFill()
            bezier39Path.fill()


            //// Group 5
            context.saveGState()
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            //// Clip Clip 2
            let clip2Path = UIBezierPath()
            clip2Path.move(to: CGPoint(x: 19.35, y: 9.27))
            clip2Path.addLine(to: CGPoint(x: 15.81, y: 12.98))
            clip2Path.addLine(to: CGPoint(x: 15.81, y: 16.27))
            clip2Path.addLine(to: CGPoint(x: 19.35, y: 12.73))
            clip2Path.addLine(to: CGPoint(x: 19.35, y: 9.27))
            clip2Path.addLine(to: CGPoint(x: 19.35, y: 9.27))
            clip2Path.close()
            clip2Path.usesEvenOddFillRule = true
            clip2Path.addClip()


            //// Bezier 40 Drawing
            let bezier40Path = UIBezierPath()
            bezier40Path.move(to: CGPoint(x: 18.86, y: 16.61))
            bezier40Path.addLine(to: CGPoint(x: 18.35, y: 16.65))
            bezier40Path.addCurve(to: CGPoint(x: 18.35, y: 9), controlPoint1: CGPoint(x: 18.35, y: 16.65), controlPoint2: CGPoint(x: 18.35, y: 11.56))
            bezier40Path.addLine(to: CGPoint(x: 18.86, y: 9))
            bezier40Path.addCurve(to: CGPoint(x: 18.86, y: 16.65), controlPoint1: CGPoint(x: 18.86, y: 11.56), controlPoint2: CGPoint(x: 18.86, y: 16.65))
            bezier40Path.addLine(to: CGPoint(x: 18.86, y: 16.61))
            bezier40Path.close()
            fillColor21.setFill()
            bezier40Path.fill()


            //// Rectangle 10 Drawing
            let rectangle10Path = UIBezierPath(rect: CGRect(x: 15.8, y: 9.87, width: 1.5, height: 7.15))
            fillColor21.setFill()
            rectangle10Path.fill()


            context.endTransparencyLayer()
            context.restoreGState()


        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHeartLarge(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 36, height: 36)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawHeart(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, darkBackground: false)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDifficultyStars(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 12), resizing: ResizingBehavior = .aspectFit, difficulty: CGFloat = 2) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 12), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 12)



        //// Variable Declarations
        let _1StarDifficulty: CGFloat = difficulty >= 1 ? 1 : (difficulty >= 0.5 ? 0.5 : 0)
        let _2StarDifficulty: CGFloat = difficulty >= 2 ? 1 : (difficulty >= 1.5 ? 0.5 : 0)
        let _3StarDifficulty: CGFloat = difficulty >= 3 ? 1 : (difficulty >= 2.5 ? 0.5 : 0)
        let _4StarDifficulty: CGFloat = difficulty >= 4 ? 1 : (difficulty >= 3.5 ? 0.5 : 0)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 12, height: 12)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawDifficultyStar(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, singleDifficulty: _1StarDifficulty)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 12, y: 0, width: 12, height: 12)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        HabiticaIcons.drawDifficultyStar(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, singleDifficulty: _2StarDifficulty)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 24, y: 0, width: 12, height: 12)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        HabiticaIcons.drawDifficultyStar(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, singleDifficulty: _3StarDifficulty)
        context.restoreGState()


        //// Symbol 4 Drawing
        let symbol4Rect = CGRect(x: 36, y: 0, width: 12, height: 12)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        HabiticaIcons.drawDifficultyStar(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch, singleDifficulty: _4StarDifficulty)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDifficultyStar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 12, height: 12), resizing: ResizingBehavior = .aspectFit, singleDifficulty: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 12, height: 12), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 12, y: resizedFrame.height / 12)


        //// Color Declarations
        let fillColor24 = UIColor(red: 1.000, green: 0.651, blue: 0.141, alpha: 1.000)
        let fillColor25 = UIColor(red: 0.882, green: 0.878, blue: 0.890, alpha: 1.000)

        //// Variable Declarations
        let isFull = singleDifficulty == 1
        let isHalf = singleDifficulty == 0.5

        //// Star 3 Drawing
        let star3Path = UIBezierPath()
        star3Path.move(to: CGPoint(x: 6, y: 0))
        star3Path.addLine(to: CGPoint(x: 8.02, y: 3.98))
        star3Path.addLine(to: CGPoint(x: 12, y: 6))
        star3Path.addLine(to: CGPoint(x: 8.02, y: 8.02))
        star3Path.addLine(to: CGPoint(x: 6, y: 12))
        star3Path.addLine(to: CGPoint(x: 3.98, y: 8.02))
        star3Path.addLine(to: CGPoint(x: 0, y: 6))
        star3Path.addLine(to: CGPoint(x: 3.98, y: 3.98))
        star3Path.close()
        fillColor25.setFill()
        star3Path.fill()


        if (isFull) {
            //// Star Drawing
            let starPath = UIBezierPath()
            starPath.move(to: CGPoint(x: 6, y: 0))
            starPath.addLine(to: CGPoint(x: 8.02, y: 3.98))
            starPath.addLine(to: CGPoint(x: 12, y: 6))
            starPath.addLine(to: CGPoint(x: 8.02, y: 8.02))
            starPath.addLine(to: CGPoint(x: 6, y: 12))
            starPath.addLine(to: CGPoint(x: 3.98, y: 8.02))
            starPath.addLine(to: CGPoint(x: 0, y: 6))
            starPath.addLine(to: CGPoint(x: 3.98, y: 3.98))
            starPath.close()
            fillColor24.setFill()
            starPath.fill()
        }


        if (isHalf) {
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 6, y: 0))
            bezierPath.addLine(to: CGPoint(x: 4, y: 4))
            bezierPath.addLine(to: CGPoint(x: 0, y: 6))
            bezierPath.addLine(to: CGPoint(x: 4, y: 8))
            bezierPath.addLine(to: CGPoint(x: 6, y: 12))
            bezierPath.addLine(to: CGPoint(x: 6, y: 0))
            bezierPath.close()
            bezierPath.usesEvenOddFillRule = true
            fillColor24.setFill()
            bezierPath.fill()
        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawStarSmall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 9, height: 9), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 9, height: 9), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 9, y: resizedFrame.height / 9)


        //// Color Declarations
        let fillColor26 = UIColor(red: 0.898, green: 0.863, blue: 1.000, alpha: 0.400)
        let fillColor27 = UIColor(red: 0.898, green: 0.863, blue: 1.000, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 3, y: 0, width: 3, height: 3))
        fillColor26.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 6, y: 3, width: 3, height: 3))
        fillColor26.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 0, y: 3, width: 3, height: 3))
        fillColor26.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 3, y: 6, width: 3, height: 3))
        fillColor26.setFill()
        rectangle4Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: 3, y: 3, width: 3, height: 3))
        fillColor27.setFill()
        rectangle5Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawStarLarge(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 27, height: 27), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 27, height: 27), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 27, y: resizedFrame.height / 27)


        //// Color Declarations
        let fillColor27 = UIColor(red: 0.898, green: 0.863, blue: 1.000, alpha: 1.000)
        let fillColor28 = UIColor(red: 0.898, green: 0.863, blue: 1.000, alpha: 0.250)
        let fillColor29 = UIColor(red: 0.898, green: 0.863, blue: 1.000, alpha: 0.500)
        let fillColor30 = UIColor(red: 0.898, green: 0.863, blue: 1.000, alpha: 0.650)
        let fillColor31 = UIColor(red: 0.898, green: 0.863, blue: 1.000, alpha: 0.750)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 9, y: 12))
        bezierPath.addLine(to: CGPoint(x: 12, y: 12))
        bezierPath.addLine(to: CGPoint(x: 12, y: 9))
        bezierPath.addLine(to: CGPoint(x: 15, y: 9))
        bezierPath.addLine(to: CGPoint(x: 15, y: 12))
        bezierPath.addLine(to: CGPoint(x: 18, y: 12))
        bezierPath.addLine(to: CGPoint(x: 18, y: 15))
        bezierPath.addLine(to: CGPoint(x: 15, y: 15))
        bezierPath.addLine(to: CGPoint(x: 15, y: 18))
        bezierPath.addLine(to: CGPoint(x: 12, y: 18))
        bezierPath.addLine(to: CGPoint(x: 12, y: 15))
        bezierPath.addLine(to: CGPoint(x: 9, y: 15))
        bezierPath.addLine(to: CGPoint(x: 9, y: 12))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor27.setFill()
        bezierPath.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 9, y: 6, width: 3, height: 3))
        fillColor28.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 12, y: 0, width: 3, height: 3))
        fillColor28.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 12, y: 3, width: 3, height: 3))
        fillColor29.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 21, y: 12, width: 3, height: 3))
        fillColor29.setFill()
        rectangle4Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: 3, y: 12, width: 3, height: 3))
        fillColor29.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRect(x: 12, y: 21, width: 3, height: 3))
        fillColor29.setFill()
        rectangle6Path.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRect(x: 9, y: 15, width: 3, height: 3))
        fillColor30.setFill()
        rectangle7Path.fill()


        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRect(x: 15, y: 15, width: 3, height: 3))
        fillColor30.setFill()
        rectangle8Path.fill()


        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(rect: CGRect(x: 15, y: 9, width: 3, height: 3))
        fillColor30.setFill()
        rectangle9Path.fill()


        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRect(x: 9, y: 9, width: 3, height: 3))
        fillColor30.setFill()
        rectangle10Path.fill()


        //// Rectangle 11 Drawing
        let rectangle11Path = UIBezierPath(rect: CGRect(x: 12, y: 18, width: 3, height: 3))
        fillColor31.setFill()
        rectangle11Path.fill()


        //// Rectangle 12 Drawing
        let rectangle12Path = UIBezierPath(rect: CGRect(x: 6, y: 12, width: 3, height: 3))
        fillColor31.setFill()
        rectangle12Path.fill()


        //// Rectangle 13 Drawing
        let rectangle13Path = UIBezierPath(rect: CGRect(x: 12, y: 6, width: 3, height: 3))
        fillColor31.setFill()
        rectangle13Path.fill()


        //// Rectangle 14 Drawing
        let rectangle14Path = UIBezierPath(rect: CGRect(x: 18, y: 12, width: 3, height: 3))
        fillColor31.setFill()
        rectangle14Path.fill()


        //// Rectangle 15 Drawing
        let rectangle15Path = UIBezierPath(rect: CGRect(x: 9, y: 18, width: 3, height: 3))
        fillColor28.setFill()
        rectangle15Path.fill()


        //// Rectangle 16 Drawing
        let rectangle16Path = UIBezierPath(rect: CGRect(x: 15, y: 18, width: 3, height: 3))
        fillColor28.setFill()
        rectangle16Path.fill()


        //// Rectangle 17 Drawing
        let rectangle17Path = UIBezierPath(rect: CGRect(x: 12, y: 24, width: 3, height: 3))
        fillColor28.setFill()
        rectangle17Path.fill()


        //// Rectangle 18 Drawing
        let rectangle18Path = UIBezierPath(rect: CGRect(x: 15, y: 6, width: 3, height: 3))
        fillColor28.setFill()
        rectangle18Path.fill()


        //// Rectangle 19 Drawing
        let rectangle19Path = UIBezierPath(rect: CGRect(x: 6, y: 9, width: 3, height: 3))
        fillColor28.setFill()
        rectangle19Path.fill()


        //// Rectangle 20 Drawing
        let rectangle20Path = UIBezierPath(rect: CGRect(x: 6, y: 15, width: 3, height: 3))
        fillColor28.setFill()
        rectangle20Path.fill()


        //// Rectangle 21 Drawing
        let rectangle21Path = UIBezierPath(rect: CGRect(x: 0, y: 12, width: 3, height: 3))
        fillColor28.setFill()
        rectangle21Path.fill()


        //// Rectangle 22 Drawing
        let rectangle22Path = UIBezierPath(rect: CGRect(x: 18, y: 15, width: 3, height: 3))
        fillColor28.setFill()
        rectangle22Path.fill()


        //// Rectangle 23 Drawing
        let rectangle23Path = UIBezierPath(rect: CGRect(x: 24, y: 12, width: 3, height: 3))
        fillColor28.setFill()
        rectangle23Path.fill()


        //// Rectangle 24 Drawing
        let rectangle24Path = UIBezierPath(rect: CGRect(x: 18, y: 9, width: 3, height: 3))
        fillColor28.setFill()
        rectangle24Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawStarMedium(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 21)


        //// Color Declarations
        let fillColor27 = UIColor(red: 0.898, green: 0.863, blue: 1.000, alpha: 1.000)
        let fillColor32 = UIColor(red: 0.898, green: 0.863, blue: 1.000, alpha: 0.600)
        let fillColor33 = UIColor(red: 0.898, green: 0.863, blue: 1.000, alpha: 0.300)
        let fillColor34 = UIColor(red: 0.898, green: 0.863, blue: 1.000, alpha: 0.150)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 9, y: 6, width: 3, height: 3))
        fillColor32.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 12, y: 9, width: 3, height: 3))
        fillColor32.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 6, y: 9, width: 3, height: 3))
        fillColor32.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 9, y: 12, width: 3, height: 3))
        fillColor32.setFill()
        rectangle4Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: 9, y: 15, width: 3, height: 3))
        fillColor33.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRect(x: 6, y: 12, width: 3, height: 3))
        fillColor33.setFill()
        rectangle6Path.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRect(x: 6, y: 6, width: 3, height: 3))
        fillColor33.setFill()
        rectangle7Path.fill()


        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRect(x: 12, y: 6, width: 3, height: 3))
        fillColor33.setFill()
        rectangle8Path.fill()


        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(rect: CGRect(x: 12, y: 12, width: 3, height: 3))
        fillColor33.setFill()
        rectangle9Path.fill()


        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRect(x: 9, y: 3, width: 3, height: 3))
        fillColor33.setFill()
        rectangle10Path.fill()


        //// Rectangle 11 Drawing
        let rectangle11Path = UIBezierPath(rect: CGRect(x: 15, y: 9, width: 3, height: 3))
        fillColor33.setFill()
        rectangle11Path.fill()


        //// Rectangle 12 Drawing
        let rectangle12Path = UIBezierPath(rect: CGRect(x: 3, y: 9, width: 3, height: 3))
        fillColor33.setFill()
        rectangle12Path.fill()


        //// Rectangle 13 Drawing
        let rectangle13Path = UIBezierPath(rect: CGRect(x: 0, y: 9, width: 3, height: 3))
        fillColor34.setFill()
        rectangle13Path.fill()


        //// Rectangle 14 Drawing
        let rectangle14Path = UIBezierPath(rect: CGRect(x: 9, y: 0, width: 3, height: 3))
        fillColor34.setFill()
        rectangle14Path.fill()


        //// Rectangle 15 Drawing
        let rectangle15Path = UIBezierPath(rect: CGRect(x: 18, y: 9, width: 3, height: 3))
        fillColor34.setFill()
        rectangle15Path.fill()


        //// Rectangle 16 Drawing
        let rectangle16Path = UIBezierPath(rect: CGRect(x: 9, y: 18, width: 3, height: 3))
        fillColor34.setFill()
        rectangle16Path.fill()


        //// Rectangle 17 Drawing
        let rectangle17Path = UIBezierPath(rect: CGRect(x: 9, y: 9, width: 3, height: 3))
        fillColor27.setFill()
        rectangle17Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPinnedItem(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)


        //// Color Declarations
        let fillColor35 = UIColor(red: 0.765, green: 0.753, blue: 0.780, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6.12, y: 7.26))
        bezierPath.addLine(to: CGPoint(x: 10.19, y: 4.19))
        bezierPath.addLine(to: CGPoint(x: 11.81, y: 5.8))
        bezierPath.addLine(to: CGPoint(x: 8.74, y: 9.88))
        bezierPath.addLine(to: CGPoint(x: 6.12, y: 7.26))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14.69, y: 5.73))
        bezierPath.addLine(to: CGPoint(x: 10.27, y: 1.31))
        bezierPath.addCurve(to: CGPoint(x: 8.79, y: 1.31), controlPoint1: CGPoint(x: 9.86, y: 0.9), controlPoint2: CGPoint(x: 9.2, y: 0.9))
        bezierPath.addCurve(to: CGPoint(x: 8.72, y: 2.68), controlPoint1: CGPoint(x: 8.42, y: 1.68), controlPoint2: CGPoint(x: 8.4, y: 2.27))
        bezierPath.addLine(to: CGPoint(x: 4.62, y: 5.77))
        bezierPath.addLine(to: CGPoint(x: 4.52, y: 5.66))
        bezierPath.addCurve(to: CGPoint(x: 3.04, y: 5.66), controlPoint1: CGPoint(x: 4.11, y: 5.26), controlPoint2: CGPoint(x: 3.45, y: 5.26))
        bezierPath.addCurve(to: CGPoint(x: 3.04, y: 7.14), controlPoint1: CGPoint(x: 2.63, y: 6.07), controlPoint2: CGPoint(x: 2.63, y: 6.74))
        bezierPath.addLine(to: CGPoint(x: 5.23, y: 9.33))
        bezierPath.addLine(to: CGPoint(x: 2.31, y: 12.21))
        bezierPath.addCurve(to: CGPoint(x: 2.3, y: 13.69), controlPoint1: CGPoint(x: 1.9, y: 12.62), controlPoint2: CGPoint(x: 1.9, y: 13.28))
        bezierPath.addCurve(to: CGPoint(x: 3.05, y: 14), controlPoint1: CGPoint(x: 2.51, y: 13.9), controlPoint2: CGPoint(x: 2.78, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 3.78, y: 13.7), controlPoint1: CGPoint(x: 3.31, y: 14), controlPoint2: CGPoint(x: 3.58, y: 13.9))
        bezierPath.addLine(to: CGPoint(x: 6.71, y: 10.81))
        bezierPath.addLine(to: CGPoint(x: 8.9, y: 13))
        bezierPath.addCurve(to: CGPoint(x: 9.64, y: 13.31), controlPoint1: CGPoint(x: 9.1, y: 13.2), controlPoint2: CGPoint(x: 9.37, y: 13.31))
        bezierPath.addCurve(to: CGPoint(x: 10.38, y: 13), controlPoint1: CGPoint(x: 9.9, y: 13.31), controlPoint2: CGPoint(x: 10.17, y: 13.2))
        bezierPath.addCurve(to: CGPoint(x: 10.38, y: 11.52), controlPoint1: CGPoint(x: 10.78, y: 12.59), controlPoint2: CGPoint(x: 10.78, y: 11.93))
        bezierPath.addLine(to: CGPoint(x: 10.23, y: 11.37))
        bezierPath.addLine(to: CGPoint(x: 13.32, y: 7.28))
        bezierPath.addCurve(to: CGPoint(x: 13.95, y: 7.51), controlPoint1: CGPoint(x: 13.51, y: 7.42), controlPoint2: CGPoint(x: 13.73, y: 7.51))
        bezierPath.addCurve(to: CGPoint(x: 14.69, y: 7.21), controlPoint1: CGPoint(x: 14.22, y: 7.51), controlPoint2: CGPoint(x: 14.49, y: 7.41))
        bezierPath.addCurve(to: CGPoint(x: 14.69, y: 5.73), controlPoint1: CGPoint(x: 15.1, y: 6.8), controlPoint2: CGPoint(x: 15.1, y: 6.14))
        bezierPath.addLine(to: CGPoint(x: 14.69, y: 5.73))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor35.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawAddRemovePin(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit, addPin: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Color Declarations
        let fillColor2 = UIColor(red: 1.000, green: 0.380, blue: 0.396, alpha: 1.000)
        let fillColor36 = UIColor(red: 0.380, green: 0.200, blue: 0.706, alpha: 1.000)

        //// Variable Declarations
        let pinColor = addPin ? fillColor36 : fillColor2

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16, y: 11))
        bezierPath.addLine(to: CGPoint(x: 10, y: 11))
        pinColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.lineCapStyle = .round
        bezierPath.stroke()


        if (addPin) {
            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 13, y: 8))
            bezier2Path.addLine(to: CGPoint(x: 13, y: 14))
            pinColor.setStroke()
            bezier2Path.lineWidth = 2
            bezier2Path.lineCapStyle = .round
            bezier2Path.stroke()
        }


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 22.42, y: 25.1))
        bezier3Path.addLine(to: CGPoint(x: 17.9, y: 20.58))
        bezier3Path.addLine(to: CGPoint(x: 25.57, y: 14.61))
        bezier3Path.addLine(to: CGPoint(x: 28.39, y: 17.43))
        bezier3Path.addLine(to: CGPoint(x: 22.42, y: 25.1))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 31.68, y: 17.6))
        bezier3Path.addLine(to: CGPoint(x: 30.63, y: 16.56))
        bezier3Path.addCurve(to: CGPoint(x: 30.63, y: 16.56), controlPoint1: CGPoint(x: 30.63, y: 16.56), controlPoint2: CGPoint(x: 30.63, y: 16.56))
        bezier3Path.addLine(to: CGPoint(x: 26.44, y: 12.37))
        bezier3Path.addLine(to: CGPoint(x: 25.4, y: 11.32))
        bezier3Path.addCurve(to: CGPoint(x: 23.84, y: 11.32), controlPoint1: CGPoint(x: 24.97, y: 10.89), controlPoint2: CGPoint(x: 24.27, y: 10.89))
        bezier3Path.addCurve(to: CGPoint(x: 23.84, y: 12.88), controlPoint1: CGPoint(x: 23.41, y: 11.75), controlPoint2: CGPoint(x: 23.41, y: 12.45))
        bezier3Path.addLine(to: CGPoint(x: 24, y: 13.05))
        bezier3Path.addLine(to: CGPoint(x: 16.33, y: 19.01))
        bezier3Path.addLine(to: CGPoint(x: 15.97, y: 18.65))
        bezier3Path.addCurve(to: CGPoint(x: 14.42, y: 18.65), controlPoint1: CGPoint(x: 15.54, y: 18.22), controlPoint2: CGPoint(x: 14.85, y: 18.22))
        bezier3Path.addCurve(to: CGPoint(x: 14.42, y: 20.21), controlPoint1: CGPoint(x: 13.99, y: 19.08), controlPoint2: CGPoint(x: 13.99, y: 19.78))
        bezier3Path.addLine(to: CGPoint(x: 15.46, y: 21.25))
        bezier3Path.addLine(to: CGPoint(x: 15.46, y: 21.26))
        bezier3Path.addLine(to: CGPoint(x: 17.83, y: 23.62))
        bezier3Path.addLine(to: CGPoint(x: 12.32, y: 29.12))
        bezier3Path.addCurve(to: CGPoint(x: 12.32, y: 30.68), controlPoint1: CGPoint(x: 11.89, y: 29.55), controlPoint2: CGPoint(x: 11.89, y: 30.25))
        bezier3Path.addCurve(to: CGPoint(x: 13.1, y: 31), controlPoint1: CGPoint(x: 12.54, y: 30.89), controlPoint2: CGPoint(x: 12.82, y: 31))
        bezier3Path.addCurve(to: CGPoint(x: 13.88, y: 30.68), controlPoint1: CGPoint(x: 13.38, y: 31), controlPoint2: CGPoint(x: 13.66, y: 30.89))
        bezier3Path.addLine(to: CGPoint(x: 19.38, y: 25.18))
        bezier3Path.addLine(to: CGPoint(x: 21.74, y: 27.54))
        bezier3Path.addCurve(to: CGPoint(x: 21.75, y: 27.54), controlPoint1: CGPoint(x: 21.75, y: 27.54), controlPoint2: CGPoint(x: 21.75, y: 27.54))
        bezier3Path.addLine(to: CGPoint(x: 22.79, y: 28.58))
        bezier3Path.addCurve(to: CGPoint(x: 23.57, y: 28.91), controlPoint1: CGPoint(x: 23.01, y: 28.8), controlPoint2: CGPoint(x: 23.29, y: 28.91))
        bezier3Path.addCurve(to: CGPoint(x: 24.35, y: 28.58), controlPoint1: CGPoint(x: 23.85, y: 28.91), controlPoint2: CGPoint(x: 24.13, y: 28.8))
        bezier3Path.addCurve(to: CGPoint(x: 24.35, y: 27.03), controlPoint1: CGPoint(x: 24.78, y: 28.15), controlPoint2: CGPoint(x: 24.78, y: 27.46))
        bezier3Path.addLine(to: CGPoint(x: 23.99, y: 26.67))
        bezier3Path.addLine(to: CGPoint(x: 29.96, y: 19))
        bezier3Path.addLine(to: CGPoint(x: 30.12, y: 19.16))
        bezier3Path.addCurve(to: CGPoint(x: 30.9, y: 19.48), controlPoint1: CGPoint(x: 30.34, y: 19.38), controlPoint2: CGPoint(x: 30.62, y: 19.48))
        bezier3Path.addCurve(to: CGPoint(x: 31.68, y: 19.16), controlPoint1: CGPoint(x: 31.18, y: 19.48), controlPoint2: CGPoint(x: 31.46, y: 19.38))
        bezier3Path.addCurve(to: CGPoint(x: 31.68, y: 17.6), controlPoint1: CGPoint(x: 32.11, y: 18.73), controlPoint2: CGPoint(x: 32.11, y: 18.03))
        bezier3Path.addLine(to: CGPoint(x: 31.68, y: 17.6))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        pinColor.setFill()
        bezier3Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPinItem(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 40, height: 40)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawAddRemovePin(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, addPin: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawUnpinItem(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 40, height: 40)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawAddRemovePin(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, addPin: false)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawItemIndicator(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit, isLocked: Bool = false, isLimited: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 28, resizedFrame.height / 28)


        //// Color Declarations
        let strokeColor = UIColor(red: 0.380, green: 0.200, blue: 0.706, alpha: 1.000)
        let shadowTint = UIColor(red: 0.102, green: 0.094, blue: 0.114, alpha: 1.000)
        let fillColor38 = UIColor(red: 0.647, green: 0.631, blue: 0.675, alpha: 1.000)
        let fillColor39 = UIColor(red: 0.741, green: 0.659, blue: 1.000, alpha: 1.000)
        let strokeColor2 = UIColor(red: 0.741, green: 0.659, blue: 1.000, alpha: 1.000)
        let indicatorLocked = UIColor(red: 0.929, green: 0.925, blue: 0.933, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = shadowTint.withAlphaComponent(0.12 * shadowTint.cgColor.alpha)
        shadow.shadowOffset = CGSize(width: 0, height: 1)
        shadow.shadowBlurRadius = 1

        //// Variable Declarations
        let itemIndicatorColor = isLocked ? indicatorLocked : (isLimited ? strokeColor : fillColor38)

        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 24, height: 24))
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        itemIndicatorColor.setFill()
        oval2Path.fill()
        context.restoreGState()



        if (isLimited) {
            //// Group 2
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 14, y: 6))
            bezierPath.addCurve(to: CGPoint(x: 6, y: 14), controlPoint1: CGPoint(x: 9.58, y: 6), controlPoint2: CGPoint(x: 6, y: 9.58))
            bezierPath.addCurve(to: CGPoint(x: 14, y: 22), controlPoint1: CGPoint(x: 6, y: 18.42), controlPoint2: CGPoint(x: 9.58, y: 22))
            bezierPath.addCurve(to: CGPoint(x: 22, y: 14), controlPoint1: CGPoint(x: 18.42, y: 22), controlPoint2: CGPoint(x: 22, y: 18.42))
            bezierPath.addCurve(to: CGPoint(x: 14, y: 6), controlPoint1: CGPoint(x: 22, y: 9.58), controlPoint2: CGPoint(x: 18.42, y: 6))
            bezierPath.close()
            bezierPath.move(to: CGPoint(x: 14, y: 8))
            bezierPath.addCurve(to: CGPoint(x: 20, y: 14), controlPoint1: CGPoint(x: 17.31, y: 8), controlPoint2: CGPoint(x: 20, y: 10.69))
            bezierPath.addCurve(to: CGPoint(x: 14, y: 20), controlPoint1: CGPoint(x: 20, y: 17.31), controlPoint2: CGPoint(x: 17.31, y: 20))
            bezierPath.addCurve(to: CGPoint(x: 8, y: 14), controlPoint1: CGPoint(x: 10.69, y: 20), controlPoint2: CGPoint(x: 8, y: 17.31))
            bezierPath.addCurve(to: CGPoint(x: 14, y: 8), controlPoint1: CGPoint(x: 8, y: 10.69), controlPoint2: CGPoint(x: 10.69, y: 8))
            bezierPath.close()
            bezierPath.usesEvenOddFillRule = true
            fillColor39.setFill()
            bezierPath.fill()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 14, y: 11))
            bezier2Path.addLine(to: CGPoint(x: 14, y: 14.03))
            bezier2Path.addLine(to: CGPoint(x: 16, y: 16))
            strokeColor2.setStroke()
            bezier2Path.lineWidth = 2
            bezier2Path.lineCapStyle = .round
            bezier2Path.stroke()


        }


        if (isLocked) {
            //// Symbol Drawing
            let symbolRect = CGRect(x: 9, y: 7, width: 10, height: 12)
            context.saveGState()
            context.clip(to: symbolRect)
            context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

            HabiticaIcons.drawLocked(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
            context.restoreGState()
        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawItemIndicatorNumber(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 28, height: 28)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawItemIndicator(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, isLocked: false, isLimited: false)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawItemIndicatorLocked(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 28, height: 28)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawItemIndicator(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, isLocked: true, isLimited: false)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawItemIndicatorLimited(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 28)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 28, height: 28)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawItemIndicator(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, isLocked: false, isLimited: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawGem_36(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)


        //// Gem36 Drawing
        let gem36Rect = CGRect(x: 0, y: 0, width: 36, height: 36)
        context.saveGState()
        context.clip(to: gem36Rect)
        context.translateBy(x: gem36Rect.minX, y: gem36Rect.minY)

        HabiticaIcons.drawGem(frame: CGRect(origin: .zero, size: gem36Rect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawWarriorLightBg(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 32, height: 32)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawWarrior(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, darkBackground: false)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawWarriorDarkBg(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 32, height: 32)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawWarrior(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, darkBackground: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawRogue(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit, darkBackground: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Color Declarations
        let fillColor19 = UIColor(red: 0.310, green: 0.165, blue: 0.576, alpha: 1.000)
        let fillColor36 = UIColor(red: 0.380, green: 0.200, blue: 0.706, alpha: 1.000)
        let fillColor44 = UIColor(red: 0.800, green: 0.745, blue: 0.929, alpha: 1.000)
        let fillColor45 = UIColor(red: 0.608, green: 0.506, blue: 0.886, alpha: 1.000)
        let fillColor46 = UIColor(red: 0.478, green: 0.329, blue: 0.753, alpha: 1.000)
        let fillColor47 = UIColor(red: 0.776, green: 0.714, blue: 0.894, alpha: 1.000)
        let fillColor48 = UIColor(red: 0.537, green: 0.400, blue: 0.780, alpha: 1.000)

        //// Variable Declarations
        let lightBackground = !darkBackground

        if (darkBackground) {
            //// Group 2
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 24.35, y: 22.01))
            bezierPath.addLine(to: CGPoint(x: 20.83, y: 18.48))
            bezierPath.addCurve(to: CGPoint(x: 20.69, y: 17.94), controlPoint1: CGPoint(x: 20.78, y: 18.3), controlPoint2: CGPoint(x: 20.74, y: 18.12))
            bezierPath.addLine(to: CGPoint(x: 25.48, y: 9.27))
            bezierPath.addLine(to: CGPoint(x: 26.2, y: 6.1))
            bezierPath.addLine(to: CGPoint(x: 22.99, y: 6.85))
            bezierPath.addLine(to: CGPoint(x: 15.9, y: 10.76))
            bezierPath.addLine(to: CGPoint(x: 8.56, y: 6.72))
            bezierPath.addLine(to: CGPoint(x: 5.4, y: 6))
            bezierPath.addLine(to: CGPoint(x: 6.15, y: 9.21))
            bezierPath.addLine(to: CGPoint(x: 10.94, y: 17.9))
            bezierPath.addCurve(to: CGPoint(x: 10.77, y: 18.59), controlPoint1: CGPoint(x: 10.89, y: 18.13), controlPoint2: CGPoint(x: 10.83, y: 18.36))
            bezierPath.addLine(to: CGPoint(x: 7.25, y: 22.11))
            bezierPath.addLine(to: CGPoint(x: 5, y: 21.7))
            bezierPath.addLine(to: CGPoint(x: 5.88, y: 26.43))
            bezierPath.addLine(to: CGPoint(x: 10.61, y: 27.3))
            bezierPath.addLine(to: CGPoint(x: 10.19, y: 25.06))
            bezierPath.addLine(to: CGPoint(x: 13.72, y: 21.53))
            bezierPath.addCurve(to: CGPoint(x: 16.01, y: 20.97), controlPoint1: CGPoint(x: 14.5, y: 21.34), controlPoint2: CGPoint(x: 15.3, y: 21.14))
            bezierPath.addCurve(to: CGPoint(x: 17.89, y: 21.43), controlPoint1: CGPoint(x: 16.61, y: 21.11), controlPoint2: CGPoint(x: 17.25, y: 21.27))
            bezierPath.addLine(to: CGPoint(x: 21.41, y: 24.95))
            bezierPath.addLine(to: CGPoint(x: 20.99, y: 27.2))
            bezierPath.addLine(to: CGPoint(x: 25.72, y: 26.32))
            bezierPath.addLine(to: CGPoint(x: 26.6, y: 21.59))
            bezierPath.addLine(to: CGPoint(x: 24.35, y: 22.01))
            bezierPath.close()
            bezierPath.usesEvenOddFillRule = true
            fillColor44.setFill()
            bezierPath.fill()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 12.83, y: 18.3))
            bezier2Path.addCurve(to: CGPoint(x: 13.14, y: 18.7), controlPoint1: CGPoint(x: 12.93, y: 18.49), controlPoint2: CGPoint(x: 13.04, y: 18.62))
            bezier2Path.addLine(to: CGPoint(x: 16.8, y: 17.4))
            bezier2Path.addLine(to: CGPoint(x: 7.24, y: 7.84))
            bezier2Path.addCurve(to: CGPoint(x: 7.43, y: 8.5), controlPoint1: CGPoint(x: 7.16, y: 7.93), controlPoint2: CGPoint(x: 7.27, y: 8.19))
            bezier2Path.usesEvenOddFillRule = true
            fillColor45.setFill()
            bezier2Path.fill()


            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 13.14, y: 18.71))
            bezier3Path.addCurve(to: CGPoint(x: 13.71, y: 18.92), controlPoint1: CGPoint(x: 13.33, y: 18.86), controlPoint2: CGPoint(x: 13.51, y: 18.89))
            bezier3Path.addCurve(to: CGPoint(x: 18.63, y: 20.1), controlPoint1: CGPoint(x: 14, y: 18.96), controlPoint2: CGPoint(x: 18.63, y: 20.1))
            bezier3Path.addLine(to: CGPoint(x: 19.07, y: 19.67))
            bezier3Path.addLine(to: CGPoint(x: 16.8, y: 17.4))
            bezier3Path.addLine(to: CGPoint(x: 13.14, y: 18.71))
            bezier3Path.close()
            bezier3Path.usesEvenOddFillRule = true
            fillColor46.setFill()
            bezier3Path.fill()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 17.7, y: 13.43))
            bezier4Path.addCurve(to: CGPoint(x: 18.11, y: 13.74), controlPoint1: CGPoint(x: 17.89, y: 13.53), controlPoint2: CGPoint(x: 18.02, y: 13.63))
            bezier4Path.addLine(to: CGPoint(x: 16.8, y: 17.4))
            bezier4Path.addLine(to: CGPoint(x: 7.24, y: 7.84))
            bezier4Path.addCurve(to: CGPoint(x: 7.89, y: 8.01), controlPoint1: CGPoint(x: 7.33, y: 7.76), controlPoint2: CGPoint(x: 7.58, y: 7.86))
            bezier4Path.usesEvenOddFillRule = true
            fillColor36.setFill()
            bezier4Path.fill()


            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 18.11, y: 13.74))
            bezier5Path.addCurve(to: CGPoint(x: 18.32, y: 14.31), controlPoint1: CGPoint(x: 18.27, y: 13.93), controlPoint2: CGPoint(x: 18.29, y: 14.11))
            bezier5Path.addCurve(to: CGPoint(x: 19.5, y: 19.23), controlPoint1: CGPoint(x: 18.36, y: 14.6), controlPoint2: CGPoint(x: 19.5, y: 19.23))
            bezier5Path.addLine(to: CGPoint(x: 19.07, y: 19.67))
            bezier5Path.addLine(to: CGPoint(x: 16.8, y: 17.4))
            bezier5Path.addLine(to: CGPoint(x: 18.11, y: 13.74))
            bezier5Path.close()
            bezier5Path.usesEvenOddFillRule = true
            fillColor19.setFill()
            bezier5Path.fill()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 21.1, y: 22.57))
            bezier6Path.addLine(to: CGPoint(x: 20.38, y: 21.86))
            bezier6Path.addLine(to: CGPoint(x: 20.61, y: 20.33))
            bezier6Path.addLine(to: CGPoint(x: 21.32, y: 21.05))
            bezier6Path.addLine(to: CGPoint(x: 21.1, y: 22.57))
            bezier6Path.close()
            bezier6Path.usesEvenOddFillRule = true
            fillColor46.setFill()
            bezier6Path.fill()


            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 22.53, y: 24))
            bezier7Path.addLine(to: CGPoint(x: 21.82, y: 23.29))
            bezier7Path.addLine(to: CGPoint(x: 22.04, y: 21.77))
            bezier7Path.addLine(to: CGPoint(x: 22.76, y: 22.48))
            bezier7Path.addLine(to: CGPoint(x: 22.53, y: 24))
            bezier7Path.close()
            bezier7Path.usesEvenOddFillRule = true
            fillColor46.setFill()
            bezier7Path.fill()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 19.5, y: 19.23))
            bezier8Path.addLine(to: CGPoint(x: 19.89, y: 19.62))
            bezier8Path.addLine(to: CGPoint(x: 19.67, y: 21.14))
            bezier8Path.addLine(to: CGPoint(x: 18.63, y: 20.1))
            bezier8Path.usesEvenOddFillRule = true
            fillColor46.setFill()
            bezier8Path.fill()


            //// Bezier 9 Drawing
            let bezier9Path = UIBezierPath()
            bezier9Path.move(to: CGPoint(x: 20.38, y: 21.86))
            bezier9Path.addLine(to: CGPoint(x: 19.67, y: 21.14))
            bezier9Path.addLine(to: CGPoint(x: 19.89, y: 19.62))
            bezier9Path.addLine(to: CGPoint(x: 20.61, y: 20.33))
            bezier9Path.addLine(to: CGPoint(x: 20.38, y: 21.86))
            bezier9Path.close()
            bezier9Path.usesEvenOddFillRule = true
            fillColor19.setFill()
            bezier9Path.fill()


            //// Bezier 10 Drawing
            let bezier10Path = UIBezierPath()
            bezier10Path.move(to: CGPoint(x: 21.82, y: 23.29))
            bezier10Path.addLine(to: CGPoint(x: 21.1, y: 22.57))
            bezier10Path.addLine(to: CGPoint(x: 21.32, y: 21.05))
            bezier10Path.addLine(to: CGPoint(x: 22.04, y: 21.77))
            bezier10Path.addLine(to: CGPoint(x: 21.82, y: 23.29))
            bezier10Path.close()
            bezier10Path.usesEvenOddFillRule = true
            fillColor19.setFill()
            bezier10Path.fill()


            //// Bezier 11 Drawing
            let bezier11Path = UIBezierPath()
            bezier11Path.move(to: CGPoint(x: 23.25, y: 24.72))
            bezier11Path.addLine(to: CGPoint(x: 22.53, y: 24))
            bezier11Path.addLine(to: CGPoint(x: 22.76, y: 22.48))
            bezier11Path.addLine(to: CGPoint(x: 24.12, y: 23.85))
            bezier11Path.addLine(to: CGPoint(x: 23.25, y: 24.72))
            bezier11Path.close()
            bezier11Path.usesEvenOddFillRule = true
            fillColor19.setFill()
            bezier11Path.fill()


            //// Star Drawing
            context.saveGState()
            context.translateBy(x: 19.05, y: 19.65)
            context.rotate(by: -135 * CGFloat.pi/180)

            let starPath = UIBezierPath()
            starPath.move(to: CGPoint(x: 0, y: -0.6))
            starPath.addLine(to: CGPoint(x: 0.5, y: -0))
            starPath.addLine(to: CGPoint(x: 0, y: 0.6))
            starPath.addLine(to: CGPoint(x: -0.5, y: -0))
            starPath.close()
            fillColor45.setFill()
            starPath.fill()

            context.restoreGState()


            //// Star 2 Drawing
            context.saveGState()
            context.translateBy(x: 23.8, y: 24.4)
            context.rotate(by: -135 * CGFloat.pi/180)

            let star2Path = UIBezierPath()
            star2Path.move(to: CGPoint(x: 0, y: -1.4))
            star2Path.addLine(to: CGPoint(x: 0.95, y: 0))
            star2Path.addLine(to: CGPoint(x: 0, y: 1.4))
            star2Path.addLine(to: CGPoint(x: -0.95, y: 0))
            star2Path.close()
            fillColor45.setFill()
            star2Path.fill()

            context.restoreGState()


        }


        if (lightBackground) {
            //// Group 3
            //// Bezier 12 Drawing
            let bezier12Path = UIBezierPath()
            bezier12Path.move(to: CGPoint(x: 7.11, y: 22.37))
            bezier12Path.addLine(to: CGPoint(x: 10.64, y: 18.84))
            bezier12Path.addCurve(to: CGPoint(x: 11.7, y: 14.42), controlPoint1: CGPoint(x: 11.14, y: 16.79), controlPoint2: CGPoint(x: 11.66, y: 14.65))
            bezier12Path.addCurve(to: CGPoint(x: 12.24, y: 13.15), controlPoint1: CGPoint(x: 11.73, y: 14.18), controlPoint2: CGPoint(x: 11.81, y: 13.65))
            bezier12Path.addCurve(to: CGPoint(x: 13.06, y: 12.5), controlPoint1: CGPoint(x: 12.46, y: 12.89), controlPoint2: CGPoint(x: 12.73, y: 12.68))
            bezier12Path.addLine(to: CGPoint(x: 22.86, y: 7.1))
            bezier12Path.addLine(to: CGPoint(x: 26.06, y: 6.36))
            bezier12Path.addLine(to: CGPoint(x: 25.35, y: 9.52))
            bezier12Path.addLine(to: CGPoint(x: 19.92, y: 19.36))
            bezier12Path.addCurve(to: CGPoint(x: 19.32, y: 20.14), controlPoint1: CGPoint(x: 19.74, y: 19.68), controlPoint2: CGPoint(x: 19.55, y: 19.93))
            bezier12Path.addLine(to: CGPoint(x: 19.28, y: 20.17))
            bezier12Path.addCurve(to: CGPoint(x: 17.98, y: 20.72), controlPoint1: CGPoint(x: 18.77, y: 20.6), controlPoint2: CGPoint(x: 18.26, y: 20.68))
            bezier12Path.addCurve(to: CGPoint(x: 13.58, y: 21.78), controlPoint1: CGPoint(x: 17.77, y: 20.76), controlPoint2: CGPoint(x: 15.58, y: 21.29))
            bezier12Path.addLine(to: CGPoint(x: 10.05, y: 25.31))
            bezier12Path.addLine(to: CGPoint(x: 10.47, y: 27.55))
            bezier12Path.addLine(to: CGPoint(x: 5.74, y: 26.68))
            bezier12Path.addLine(to: CGPoint(x: 4.86, y: 21.95))
            bezier12Path.addLine(to: CGPoint(x: 7.11, y: 22.37))
            bezier12Path.close()
            bezier12Path.usesEvenOddFillRule = true
            fillColor19.setFill()
            bezier12Path.fill()


            //// Bezier 13 Drawing
            let bezier13Path = UIBezierPath()
            bezier13Path.move(to: CGPoint(x: 21.27, y: 25.2))
            bezier13Path.addLine(to: CGPoint(x: 17.75, y: 21.68))
            bezier13Path.addCurve(to: CGPoint(x: 13.33, y: 20.61), controlPoint1: CGPoint(x: 15.7, y: 21.18), controlPoint2: CGPoint(x: 13.55, y: 20.66))
            bezier13Path.addCurve(to: CGPoint(x: 12.06, y: 20.07), controlPoint1: CGPoint(x: 13.09, y: 20.58), controlPoint2: CGPoint(x: 12.56, y: 20.5))
            bezier13Path.addCurve(to: CGPoint(x: 11.41, y: 19.25), controlPoint1: CGPoint(x: 11.8, y: 19.86), controlPoint2: CGPoint(x: 11.59, y: 19.59))
            bezier13Path.addLine(to: CGPoint(x: 6.01, y: 9.46))
            bezier13Path.addLine(to: CGPoint(x: 5.27, y: 6.25))
            bezier13Path.addLine(to: CGPoint(x: 8.43, y: 6.97))
            bezier13Path.addLine(to: CGPoint(x: 18.27, y: 12.4))
            bezier13Path.addCurve(to: CGPoint(x: 19.04, y: 13), controlPoint1: CGPoint(x: 18.58, y: 12.57), controlPoint2: CGPoint(x: 18.84, y: 12.77))
            bezier13Path.addLine(to: CGPoint(x: 19.08, y: 13.04))
            bezier13Path.addCurve(to: CGPoint(x: 19.63, y: 14.33), controlPoint1: CGPoint(x: 19.51, y: 13.55), controlPoint2: CGPoint(x: 19.59, y: 14.06))
            bezier13Path.addCurve(to: CGPoint(x: 20.69, y: 18.74), controlPoint1: CGPoint(x: 19.67, y: 14.55), controlPoint2: CGPoint(x: 20.2, y: 16.74))
            bezier13Path.addLine(to: CGPoint(x: 24.22, y: 22.26))
            bezier13Path.addLine(to: CGPoint(x: 26.46, y: 21.85))
            bezier13Path.addLine(to: CGPoint(x: 25.59, y: 26.58))
            bezier13Path.addLine(to: CGPoint(x: 20.86, y: 27.45))
            bezier13Path.addLine(to: CGPoint(x: 21.27, y: 25.2))
            bezier13Path.close()
            bezier13Path.usesEvenOddFillRule = true
            fillColor19.setFill()
            bezier13Path.fill()


            //// Bezier 14 Drawing
            let bezier14Path = UIBezierPath()
            bezier14Path.move(to: CGPoint(x: 12.69, y: 18.55))
            bezier14Path.addCurve(to: CGPoint(x: 13, y: 18.96), controlPoint1: CGPoint(x: 12.8, y: 18.74), controlPoint2: CGPoint(x: 12.9, y: 18.87))
            bezier14Path.addLine(to: CGPoint(x: 16.66, y: 17.65))
            bezier14Path.addLine(to: CGPoint(x: 7.11, y: 8.09))
            bezier14Path.addCurve(to: CGPoint(x: 7.29, y: 8.75), controlPoint1: CGPoint(x: 7.03, y: 8.18), controlPoint2: CGPoint(x: 7.13, y: 8.44))
            bezier14Path.usesEvenOddFillRule = true
            fillColor47.setFill()
            bezier14Path.fill()


            //// Bezier 15 Drawing
            let bezier15Path = UIBezierPath()
            bezier15Path.move(to: CGPoint(x: 13, y: 18.96))
            bezier15Path.addCurve(to: CGPoint(x: 13.57, y: 19.17), controlPoint1: CGPoint(x: 13.19, y: 19.12), controlPoint2: CGPoint(x: 13.38, y: 19.14))
            bezier15Path.addCurve(to: CGPoint(x: 18.49, y: 20.36), controlPoint1: CGPoint(x: 13.87, y: 19.22), controlPoint2: CGPoint(x: 18.49, y: 20.36))
            bezier15Path.addLine(to: CGPoint(x: 18.93, y: 19.92))
            bezier15Path.addLine(to: CGPoint(x: 16.66, y: 17.65))
            bezier15Path.addLine(to: CGPoint(x: 13, y: 18.96))
            bezier15Path.close()
            bezier15Path.usesEvenOddFillRule = true
            fillColor48.setFill()
            bezier15Path.fill()


            //// Bezier 16 Drawing
            let bezier16Path = UIBezierPath()
            bezier16Path.move(to: CGPoint(x: 17.56, y: 13.68))
            bezier16Path.addCurve(to: CGPoint(x: 17.97, y: 13.99), controlPoint1: CGPoint(x: 17.75, y: 13.79), controlPoint2: CGPoint(x: 17.88, y: 13.89))
            bezier16Path.addLine(to: CGPoint(x: 16.67, y: 17.65))
            bezier16Path.addLine(to: CGPoint(x: 7.11, y: 8.09))
            bezier16Path.addCurve(to: CGPoint(x: 7.75, y: 8.27), controlPoint1: CGPoint(x: 7.19, y: 8.02), controlPoint2: CGPoint(x: 7.45, y: 8.11))
            bezier16Path.usesEvenOddFillRule = true
            fillColor46.setFill()
            bezier16Path.fill()


            //// Bezier 17 Drawing
            let bezier17Path = UIBezierPath()
            bezier17Path.move(to: CGPoint(x: 17.97, y: 13.99))
            bezier17Path.addCurve(to: CGPoint(x: 18.18, y: 14.56), controlPoint1: CGPoint(x: 18.13, y: 14.18), controlPoint2: CGPoint(x: 18.16, y: 14.37))
            bezier17Path.addCurve(to: CGPoint(x: 19.37, y: 19.48), controlPoint1: CGPoint(x: 18.23, y: 14.86), controlPoint2: CGPoint(x: 19.37, y: 19.48))
            bezier17Path.addLine(to: CGPoint(x: 18.93, y: 19.92))
            bezier17Path.addLine(to: CGPoint(x: 16.67, y: 17.65))
            bezier17Path.addLine(to: CGPoint(x: 17.97, y: 13.99))
            bezier17Path.close()
            bezier17Path.usesEvenOddFillRule = true
            fillColor36.setFill()
            bezier17Path.fill()


            //// Bezier 18 Drawing
            let bezier18Path = UIBezierPath()
            bezier18Path.move(to: CGPoint(x: 20.96, y: 22.82))
            bezier18Path.addLine(to: CGPoint(x: 20.25, y: 22.11))
            bezier18Path.addLine(to: CGPoint(x: 20.47, y: 20.59))
            bezier18Path.addLine(to: CGPoint(x: 21.19, y: 21.3))
            bezier18Path.addLine(to: CGPoint(x: 20.96, y: 22.82))
            bezier18Path.close()
            bezier18Path.usesEvenOddFillRule = true
            fillColor48.setFill()
            bezier18Path.fill()


            //// Bezier 19 Drawing
            let bezier19Path = UIBezierPath()
            bezier19Path.move(to: CGPoint(x: 22.4, y: 24.26))
            bezier19Path.addLine(to: CGPoint(x: 21.68, y: 23.54))
            bezier19Path.addLine(to: CGPoint(x: 21.9, y: 22.02))
            bezier19Path.addLine(to: CGPoint(x: 22.62, y: 22.73))
            bezier19Path.addLine(to: CGPoint(x: 22.4, y: 24.26))
            bezier19Path.close()
            bezier19Path.usesEvenOddFillRule = true
            fillColor48.setFill()
            bezier19Path.fill()


            //// Bezier 20 Drawing
            let bezier20Path = UIBezierPath()
            bezier20Path.move(to: CGPoint(x: 19.37, y: 19.48))
            bezier20Path.addLine(to: CGPoint(x: 19.76, y: 19.87))
            bezier20Path.addLine(to: CGPoint(x: 19.53, y: 21.39))
            bezier20Path.addLine(to: CGPoint(x: 18.49, y: 20.36))
            bezier20Path.usesEvenOddFillRule = true
            fillColor48.setFill()
            bezier20Path.fill()


            //// Bezier 21 Drawing
            let bezier21Path = UIBezierPath()
            bezier21Path.move(to: CGPoint(x: 20.25, y: 22.11))
            bezier21Path.addLine(to: CGPoint(x: 19.53, y: 21.39))
            bezier21Path.addLine(to: CGPoint(x: 19.76, y: 19.87))
            bezier21Path.addLine(to: CGPoint(x: 20.47, y: 20.59))
            bezier21Path.addLine(to: CGPoint(x: 20.25, y: 22.11))
            bezier21Path.close()
            bezier21Path.usesEvenOddFillRule = true
            fillColor36.setFill()
            bezier21Path.fill()


            //// Bezier 22 Drawing
            let bezier22Path = UIBezierPath()
            bezier22Path.move(to: CGPoint(x: 21.68, y: 23.54))
            bezier22Path.addLine(to: CGPoint(x: 20.96, y: 22.82))
            bezier22Path.addLine(to: CGPoint(x: 21.19, y: 21.3))
            bezier22Path.addLine(to: CGPoint(x: 21.9, y: 22.02))
            bezier22Path.addLine(to: CGPoint(x: 21.68, y: 23.54))
            bezier22Path.close()
            bezier22Path.usesEvenOddFillRule = true
            fillColor36.setFill()
            bezier22Path.fill()


            //// Bezier 23 Drawing
            let bezier23Path = UIBezierPath()
            bezier23Path.move(to: CGPoint(x: 23.11, y: 24.97))
            bezier23Path.addLine(to: CGPoint(x: 22.4, y: 24.26))
            bezier23Path.addLine(to: CGPoint(x: 22.62, y: 22.73))
            bezier23Path.addLine(to: CGPoint(x: 23.98, y: 24.1))
            bezier23Path.addLine(to: CGPoint(x: 23.11, y: 24.97))
            bezier23Path.close()
            bezier23Path.usesEvenOddFillRule = true
            fillColor36.setFill()
            bezier23Path.fill()


            //// Star 3 Drawing
            context.saveGState()
            context.translateBy(x: 18.95, y: 19.9)
            context.rotate(by: -135 * CGFloat.pi/180)

            let star3Path = UIBezierPath()
            star3Path.move(to: CGPoint(x: 0, y: -0.6))
            star3Path.addLine(to: CGPoint(x: 0.5, y: 0))
            star3Path.addLine(to: CGPoint(x: 0, y: 0.6))
            star3Path.addLine(to: CGPoint(x: -0.5, y: 0))
            star3Path.close()
            fillColor47.setFill()
            star3Path.fill()

            context.restoreGState()


            //// Bezier 24 Drawing
            let bezier24Path = UIBezierPath()
            bezier24Path.move(to: CGPoint(x: 22.99, y: 23.98))
            bezier24Path.addLine(to: CGPoint(x: 22.69, y: 25.62))
            bezier24Path.addLine(to: CGPoint(x: 22.69, y: 25.62))
            bezier24Path.addLine(to: CGPoint(x: 23.66, y: 24.65))
            bezier24Path.addLine(to: CGPoint(x: 22.99, y: 23.98))
            bezier24Path.close()
            bezier24Path.usesEvenOddFillRule = true
            fillColor47.setFill()
            bezier24Path.fill()


            //// Bezier 25 Drawing
            let bezier25Path = UIBezierPath()
            bezier25Path.move(to: CGPoint(x: 24.64, y: 23.67))
            bezier25Path.addLine(to: CGPoint(x: 22.99, y: 23.98))
            bezier25Path.addLine(to: CGPoint(x: 23.66, y: 24.65))
            bezier25Path.addLine(to: CGPoint(x: 24.64, y: 23.67))
            bezier25Path.close()
            bezier25Path.usesEvenOddFillRule = true
            fillColor47.setFill()
            bezier25Path.fill()


            //// Bezier 26 Drawing
            let bezier26Path = UIBezierPath()
            bezier26Path.move(to: CGPoint(x: 23.66, y: 24.65))
            bezier26Path.addLine(to: CGPoint(x: 22.69, y: 25.62))
            bezier26Path.addLine(to: CGPoint(x: 24.33, y: 25.32))
            bezier26Path.addLine(to: CGPoint(x: 23.66, y: 24.65))
            bezier26Path.close()
            bezier26Path.usesEvenOddFillRule = true
            fillColor47.setFill()
            bezier26Path.fill()


            //// Bezier 27 Drawing
            let bezier27Path = UIBezierPath()
            bezier27Path.move(to: CGPoint(x: 24.33, y: 25.32))
            bezier27Path.addLine(to: CGPoint(x: 24.64, y: 23.67))
            bezier27Path.addLine(to: CGPoint(x: 24.64, y: 23.67))
            bezier27Path.addLine(to: CGPoint(x: 23.66, y: 24.65))
            bezier27Path.addLine(to: CGPoint(x: 24.33, y: 25.32))
            bezier27Path.close()
            bezier27Path.usesEvenOddFillRule = true
            fillColor47.setFill()
            bezier27Path.fill()


        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawRogueLightBg(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 32, height: 32)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawRogue(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, darkBackground: false)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawRogueDarkBg(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 32, height: 32)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawRogue(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, darkBackground: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHealer(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit, darkBackground: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Color Declarations
        let fillColor10 = UIColor(red: 1.000, green: 0.651, blue: 0.137, alpha: 1.000)
        let fillColor49 = UIColor(red: 1.000, green: 0.844, blue: 0.659, alpha: 1.000)
        let fillColor50 = UIColor(red: 0.886, green: 0.620, blue: 0.271, alpha: 1.000)
        let fillColor51 = UIColor(red: 0.898, green: 0.565, blue: 0.145, alpha: 1.000)
        let fillColor52 = UIColor(red: 0.992, green: 0.776, blue: 0.494, alpha: 1.000)
        let fillColor53 = UIColor(red: 0.808, green: 0.506, blue: 0.161, alpha: 1.000)
        let fillColor54 = UIColor(red: 0.812, green: 0.510, blue: 0.161, alpha: 1.000)
        let fillColor55 = UIColor(red: 0.992, green: 0.776, blue: 0.494, alpha: 1.000)
        let fillColor56 = UIColor(red: 1.000, green: 0.651, blue: 0.137, alpha: 1.000)
        let fillColor57 = UIColor(red: 1.000, green: 0.867, blue: 0.710, alpha: 1.000)
        let fillColor58 = UIColor(red: 0.898, green: 0.565, blue: 0.145, alpha: 1.000)
        let fillColor59 = UIColor(red: 1.000, green: 0.894, blue: 0.788, alpha: 1.000)

        //// Variable Declarations
        let lightBackground = !darkBackground

        if (darkBackground) {
            //// Group 2
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 13.91, y: 28.2))
            bezierPath.addLine(to: CGPoint(x: 13.81, y: 28.15))
            bezierPath.addCurve(to: CGPoint(x: 6.58, y: 21.85), controlPoint1: CGPoint(x: 11.14, y: 26.81), controlPoint2: CGPoint(x: 8.32, y: 25.14))
            bezierPath.addCurve(to: CGPoint(x: 5.04, y: 11.51), controlPoint1: CGPoint(x: 4.62, y: 18.12), controlPoint2: CGPoint(x: 5, y: 12.18))
            bezierPath.addCurve(to: CGPoint(x: 5.24, y: 9.71), controlPoint1: CGPoint(x: 5.08, y: 10.99), controlPoint2: CGPoint(x: 5.24, y: 9.71))
            bezierPath.addCurve(to: CGPoint(x: 6.75, y: 9.03), controlPoint1: CGPoint(x: 5.24, y: 9.71), controlPoint2: CGPoint(x: 6.25, y: 9.26))
            bezierPath.addLine(to: CGPoint(x: 13.97, y: 5.37))
            bezierPath.addCurve(to: CGPoint(x: 15.26, y: 4.79), controlPoint1: CGPoint(x: 14.37, y: 5.18), controlPoint2: CGPoint(x: 15.26, y: 4.79))
            bezierPath.addCurve(to: CGPoint(x: 16.54, y: 5.37), controlPoint1: CGPoint(x: 15.26, y: 4.79), controlPoint2: CGPoint(x: 16.14, y: 5.18))
            bezierPath.addLine(to: CGPoint(x: 23.76, y: 9.02))
            bezierPath.addCurve(to: CGPoint(x: 25.35, y: 9.71), controlPoint1: CGPoint(x: 24.26, y: 9.26), controlPoint2: CGPoint(x: 25.35, y: 9.71))
            bezierPath.addCurve(to: CGPoint(x: 25.47, y: 11.51), controlPoint1: CGPoint(x: 25.35, y: 9.71), controlPoint2: CGPoint(x: 25.43, y: 10.99))
            bezierPath.addCurve(to: CGPoint(x: 23.93, y: 21.85), controlPoint1: CGPoint(x: 25.52, y: 12.18), controlPoint2: CGPoint(x: 25.89, y: 18.12))
            bezierPath.addCurve(to: CGPoint(x: 16.7, y: 28.15), controlPoint1: CGPoint(x: 22.19, y: 25.14), controlPoint2: CGPoint(x: 19.37, y: 26.81))
            bezierPath.addLine(to: CGPoint(x: 16.6, y: 28.2))
            bezierPath.addCurve(to: CGPoint(x: 15.26, y: 28.79), controlPoint1: CGPoint(x: 16.19, y: 28.41), controlPoint2: CGPoint(x: 15.26, y: 28.79))
            bezierPath.addCurve(to: CGPoint(x: 13.91, y: 28.2), controlPoint1: CGPoint(x: 15.26, y: 28.79), controlPoint2: CGPoint(x: 14.32, y: 28.41))
            bezierPath.close()
            bezierPath.usesEvenOddFillRule = true
            fillColor49.setFill()
            bezierPath.fill()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 9.05, y: 12.41))
            bezier2Path.addLine(to: CGPoint(x: 14.81, y: 9.44))
            bezier2Path.addCurve(to: CGPoint(x: 15.26, y: 9.34), controlPoint1: CGPoint(x: 14.95, y: 9.38), controlPoint2: CGPoint(x: 15.1, y: 9.34))
            bezier2Path.addLine(to: CGPoint(x: 15.26, y: 7.04))
            bezier2Path.addCurve(to: CGPoint(x: 14.81, y: 7.14), controlPoint1: CGPoint(x: 15.1, y: 7.04), controlPoint2: CGPoint(x: 14.95, y: 7.07))
            bezier2Path.addLine(to: CGPoint(x: 7.59, y: 10.79))
            bezier2Path.addCurve(to: CGPoint(x: 7.21, y: 11.1), controlPoint1: CGPoint(x: 7.43, y: 10.86), controlPoint2: CGPoint(x: 7.31, y: 10.97))
            bezier2Path.addLine(to: CGPoint(x: 9.05, y: 12.42))
            bezier2Path.addLine(to: CGPoint(x: 9.05, y: 12.41))
            bezier2Path.close()
            bezier2Path.usesEvenOddFillRule = true
            fillColor50.setFill()
            bezier2Path.fill()


            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 14.81, y: 7.13))
            bezier3Path.addLine(to: CGPoint(x: 7.59, y: 10.78))
            bezier3Path.addCurve(to: CGPoint(x: 6.99, y: 11.65), controlPoint1: CGPoint(x: 7.25, y: 10.94), controlPoint2: CGPoint(x: 7.02, y: 11.27))
            bezier3Path.addCurve(to: CGPoint(x: 8.31, y: 20.93), controlPoint1: CGPoint(x: 6.97, y: 11.89), controlPoint2: CGPoint(x: 6.57, y: 17.63))
            bezier3Path.addCurve(to: CGPoint(x: 14.69, y: 26.4), controlPoint1: CGPoint(x: 9.76, y: 23.67), controlPoint2: CGPoint(x: 12.14, y: 25.12))
            bezier3Path.addLine(to: CGPoint(x: 14.79, y: 26.45))
            bezier3Path.addCurve(to: CGPoint(x: 15.26, y: 26.56), controlPoint1: CGPoint(x: 14.93, y: 26.52), controlPoint2: CGPoint(x: 15.09, y: 26.56))
            bezier3Path.addLine(to: CGPoint(x: 15.26, y: 26.56))
            bezier3Path.addLine(to: CGPoint(x: 15.26, y: 7.03))
            bezier3Path.addCurve(to: CGPoint(x: 14.81, y: 7.13), controlPoint1: CGPoint(x: 15.1, y: 7.03), controlPoint2: CGPoint(x: 14.95, y: 7.06))
            bezier3Path.close()
            bezier3Path.usesEvenOddFillRule = true
            fillColor10.setFill()
            bezier3Path.fill()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 15.82, y: 26.4))
            bezier4Path.addCurve(to: CGPoint(x: 22.2, y: 20.93), controlPoint1: CGPoint(x: 18.37, y: 25.12), controlPoint2: CGPoint(x: 20.75, y: 23.67))
            bezier4Path.addCurve(to: CGPoint(x: 23.52, y: 11.65), controlPoint1: CGPoint(x: 23.94, y: 17.63), controlPoint2: CGPoint(x: 23.54, y: 11.89))
            bezier4Path.addCurve(to: CGPoint(x: 22.92, y: 10.78), controlPoint1: CGPoint(x: 23.49, y: 11.27), controlPoint2: CGPoint(x: 23.26, y: 10.94))
            bezier4Path.addLine(to: CGPoint(x: 15.7, y: 7.13))
            bezier4Path.addCurve(to: CGPoint(x: 15.26, y: 7.03), controlPoint1: CGPoint(x: 15.56, y: 7.06), controlPoint2: CGPoint(x: 15.41, y: 7.03))
            bezier4Path.addLine(to: CGPoint(x: 15.26, y: 26.56))
            bezier4Path.addCurve(to: CGPoint(x: 15.73, y: 26.45), controlPoint1: CGPoint(x: 15.42, y: 26.56), controlPoint2: CGPoint(x: 15.58, y: 26.52))
            bezier4Path.addLine(to: CGPoint(x: 15.82, y: 26.4))
            bezier4Path.close()
            bezier4Path.usesEvenOddFillRule = true
            fillColor51.setFill()
            bezier4Path.fill()


            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 9.05, y: 12.4))
            bezier5Path.addLine(to: CGPoint(x: 14.81, y: 9.44))
            bezier5Path.addCurve(to: CGPoint(x: 15.26, y: 9.34), controlPoint1: CGPoint(x: 14.95, y: 9.37), controlPoint2: CGPoint(x: 15.1, y: 9.34))
            bezier5Path.addLine(to: CGPoint(x: 15.26, y: 7.03))
            bezier5Path.addCurve(to: CGPoint(x: 14.81, y: 7.13), controlPoint1: CGPoint(x: 15.1, y: 7.03), controlPoint2: CGPoint(x: 14.95, y: 7.06))
            bezier5Path.addLine(to: CGPoint(x: 7.59, y: 10.78))
            bezier5Path.addCurve(to: CGPoint(x: 7.21, y: 11.1), controlPoint1: CGPoint(x: 7.43, y: 10.85), controlPoint2: CGPoint(x: 7.31, y: 10.96))
            bezier5Path.addLine(to: CGPoint(x: 9.05, y: 12.41))
            bezier5Path.addLine(to: CGPoint(x: 9.05, y: 12.4))
            bezier5Path.close()
            bezier5Path.usesEvenOddFillRule = true
            fillColor52.setFill()
            bezier5Path.fill()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 22.92, y: 10.78))
            bezier6Path.addLine(to: CGPoint(x: 15.7, y: 7.13))
            bezier6Path.addCurve(to: CGPoint(x: 15.26, y: 7.03), controlPoint1: CGPoint(x: 15.56, y: 7.06), controlPoint2: CGPoint(x: 15.41, y: 7.03))
            bezier6Path.addLine(to: CGPoint(x: 15.26, y: 9.34))
            bezier6Path.addCurve(to: CGPoint(x: 15.7, y: 9.44), controlPoint1: CGPoint(x: 15.41, y: 9.34), controlPoint2: CGPoint(x: 15.56, y: 9.37))
            bezier6Path.addLine(to: CGPoint(x: 21.47, y: 12.41))
            bezier6Path.addLine(to: CGPoint(x: 21.47, y: 12.41))
            bezier6Path.addLine(to: CGPoint(x: 23.3, y: 11.1))
            bezier6Path.addCurve(to: CGPoint(x: 22.92, y: 10.78), controlPoint1: CGPoint(x: 23.2, y: 10.96), controlPoint2: CGPoint(x: 23.08, y: 10.85))
            bezier6Path.close()
            bezier6Path.usesEvenOddFillRule = true
            fillColor10.setFill()
            bezier6Path.fill()


            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 15.05, y: 24.24))
            bezier7Path.addCurve(to: CGPoint(x: 10.16, y: 19.95), controlPoint1: CGPoint(x: 12.86, y: 23.13), controlPoint2: CGPoint(x: 11.2, y: 21.93))
            bezier7Path.addCurve(to: CGPoint(x: 9.05, y: 12.41), controlPoint1: CGPoint(x: 8.99, y: 17.74), controlPoint2: CGPoint(x: 9, y: 13.89))
            bezier7Path.addLine(to: CGPoint(x: 7.21, y: 11.1))
            bezier7Path.addCurve(to: CGPoint(x: 6.99, y: 11.65), controlPoint1: CGPoint(x: 7.09, y: 11.25), controlPoint2: CGPoint(x: 7.01, y: 11.44))
            bezier7Path.addCurve(to: CGPoint(x: 6.96, y: 14.53), controlPoint1: CGPoint(x: 6.98, y: 11.76), controlPoint2: CGPoint(x: 6.9, y: 12.95))
            bezier7Path.addCurve(to: CGPoint(x: 8.31, y: 20.93), controlPoint1: CGPoint(x: 7.04, y: 16.51), controlPoint2: CGPoint(x: 7.34, y: 19.09))
            bezier7Path.addCurve(to: CGPoint(x: 14.69, y: 26.4), controlPoint1: CGPoint(x: 9.76, y: 23.67), controlPoint2: CGPoint(x: 12.14, y: 25.12))
            bezier7Path.addLine(to: CGPoint(x: 14.79, y: 26.45))
            bezier7Path.addCurve(to: CGPoint(x: 15.26, y: 26.56), controlPoint1: CGPoint(x: 14.93, y: 26.52), controlPoint2: CGPoint(x: 15.09, y: 26.56))
            bezier7Path.addLine(to: CGPoint(x: 15.26, y: 26.56))
            bezier7Path.addLine(to: CGPoint(x: 15.26, y: 24.3))
            bezier7Path.addCurve(to: CGPoint(x: 15.05, y: 24.24), controlPoint1: CGPoint(x: 15.2, y: 24.3), controlPoint2: CGPoint(x: 15.15, y: 24.28))
            bezier7Path.close()
            bezier7Path.usesEvenOddFillRule = true
            fillColor51.setFill()
            bezier7Path.fill()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 20.35, y: 19.95))
            bezier8Path.addCurve(to: CGPoint(x: 15.45, y: 24.24), controlPoint1: CGPoint(x: 19.31, y: 21.93), controlPoint2: CGPoint(x: 17.64, y: 23.13))
            bezier8Path.addCurve(to: CGPoint(x: 15.26, y: 24.3), controlPoint1: CGPoint(x: 15.35, y: 24.28), controlPoint2: CGPoint(x: 15.31, y: 24.3))
            bezier8Path.addLine(to: CGPoint(x: 15.26, y: 26.56))
            bezier8Path.addCurve(to: CGPoint(x: 15.72, y: 26.45), controlPoint1: CGPoint(x: 15.42, y: 26.56), controlPoint2: CGPoint(x: 15.58, y: 26.52))
            bezier8Path.addLine(to: CGPoint(x: 15.82, y: 26.4))
            bezier8Path.addCurve(to: CGPoint(x: 22.2, y: 20.93), controlPoint1: CGPoint(x: 18.37, y: 25.12), controlPoint2: CGPoint(x: 20.75, y: 23.67))
            bezier8Path.addCurve(to: CGPoint(x: 23.55, y: 14.53), controlPoint1: CGPoint(x: 23.17, y: 19.09), controlPoint2: CGPoint(x: 23.47, y: 16.51))
            bezier8Path.addCurve(to: CGPoint(x: 23.52, y: 11.65), controlPoint1: CGPoint(x: 23.61, y: 12.95), controlPoint2: CGPoint(x: 23.53, y: 11.76))
            bezier8Path.addCurve(to: CGPoint(x: 23.3, y: 11.09), controlPoint1: CGPoint(x: 23.5, y: 11.44), controlPoint2: CGPoint(x: 23.42, y: 11.25))
            bezier8Path.addLine(to: CGPoint(x: 21.47, y: 12.41))
            bezier8Path.addCurve(to: CGPoint(x: 20.35, y: 19.95), controlPoint1: CGPoint(x: 21.53, y: 14.25), controlPoint2: CGPoint(x: 21.43, y: 17.91))
            bezier8Path.close()
            bezier8Path.usesEvenOddFillRule = true
            fillColor53.setFill()
            bezier8Path.fill()


            //// Bezier 9 Drawing
            let bezier9Path = UIBezierPath()
            bezier9Path.move(to: CGPoint(x: 10.81, y: 16.79))
            bezier9Path.addLine(to: CGPoint(x: 13.77, y: 15.31))
            bezier9Path.addLine(to: CGPoint(x: 15.26, y: 16.79))
            bezier9Path.addLine(to: CGPoint(x: 10.81, y: 16.79))
            bezier9Path.close()
            bezier9Path.usesEvenOddFillRule = true
            fillColor52.setFill()
            bezier9Path.fill()


            //// Bezier 10 Drawing
            let bezier10Path = UIBezierPath()
            bezier10Path.move(to: CGPoint(x: 15.26, y: 21.24))
            bezier10Path.addLine(to: CGPoint(x: 13.77, y: 18.28))
            bezier10Path.addLine(to: CGPoint(x: 15.26, y: 16.79))
            bezier10Path.addLine(to: CGPoint(x: 15.26, y: 21.24))
            bezier10Path.close()
            bezier10Path.usesEvenOddFillRule = true
            fillColor52.setFill()
            bezier10Path.fill()


            //// Bezier 11 Drawing
            let bezier11Path = UIBezierPath()
            bezier11Path.move(to: CGPoint(x: 19.7, y: 16.79))
            bezier11Path.addLine(to: CGPoint(x: 16.74, y: 18.28))
            bezier11Path.addLine(to: CGPoint(x: 15.26, y: 16.79))
            bezier11Path.addLine(to: CGPoint(x: 19.7, y: 16.79))
            bezier11Path.close()
            bezier11Path.usesEvenOddFillRule = true
            fillColor53.setFill()
            bezier11Path.fill()


            //// Bezier 12 Drawing
            let bezier12Path = UIBezierPath()
            bezier12Path.move(to: CGPoint(x: 15.26, y: 12.35))
            bezier12Path.addLine(to: CGPoint(x: 16.74, y: 15.31))
            bezier12Path.addLine(to: CGPoint(x: 15.26, y: 16.79))
            bezier12Path.addLine(to: CGPoint(x: 15.26, y: 12.35))
            bezier12Path.close()
            bezier12Path.usesEvenOddFillRule = true
            fillColor53.setFill()
            bezier12Path.fill()


            //// Bezier 13 Drawing
            let bezier13Path = UIBezierPath()
            bezier13Path.move(to: CGPoint(x: 19.7, y: 16.79))
            bezier13Path.addLine(to: CGPoint(x: 16.74, y: 15.31))
            bezier13Path.addLine(to: CGPoint(x: 15.26, y: 16.79))
            bezier13Path.addLine(to: CGPoint(x: 19.7, y: 16.79))
            bezier13Path.close()
            bezier13Path.usesEvenOddFillRule = true
            fillColor53.setFill()
            bezier13Path.fill()


            //// Bezier 14 Drawing
            let bezier14Path = UIBezierPath()
            bezier14Path.move(to: CGPoint(x: 15.26, y: 21.24))
            bezier14Path.addLine(to: CGPoint(x: 16.74, y: 18.28))
            bezier14Path.addLine(to: CGPoint(x: 15.26, y: 16.79))
            bezier14Path.addLine(to: CGPoint(x: 15.26, y: 21.24))
            bezier14Path.close()
            bezier14Path.usesEvenOddFillRule = true
            fillColor53.setFill()
            bezier14Path.fill()


            //// Bezier 15 Drawing
            let bezier15Path = UIBezierPath()
            bezier15Path.move(to: CGPoint(x: 10.81, y: 16.79))
            bezier15Path.addLine(to: CGPoint(x: 13.77, y: 18.28))
            bezier15Path.addLine(to: CGPoint(x: 15.26, y: 16.79))
            bezier15Path.addLine(to: CGPoint(x: 10.81, y: 16.79))
            bezier15Path.close()
            bezier15Path.usesEvenOddFillRule = true
            fillColor52.setFill()
            bezier15Path.fill()


            //// Bezier 16 Drawing
            let bezier16Path = UIBezierPath()
            bezier16Path.move(to: CGPoint(x: 15.26, y: 12.35))
            bezier16Path.addLine(to: CGPoint(x: 13.77, y: 15.31))
            bezier16Path.addLine(to: CGPoint(x: 15.26, y: 16.79))
            bezier16Path.addLine(to: CGPoint(x: 15.26, y: 12.35))
            bezier16Path.close()
            bezier16Path.usesEvenOddFillRule = true
            fillColor52.setFill()
            bezier16Path.fill()


        }


        if (lightBackground) {
            //// Group 3
            //// Bezier 17 Drawing
            let bezier17Path = UIBezierPath()
            bezier17Path.move(to: CGPoint(x: 15.26, y: 28.79))
            bezier17Path.addCurve(to: CGPoint(x: 13.91, y: 28.2), controlPoint1: CGPoint(x: 15.26, y: 28.79), controlPoint2: CGPoint(x: 14.32, y: 28.41))
            bezier17Path.addLine(to: CGPoint(x: 13.81, y: 28.15))
            bezier17Path.addCurve(to: CGPoint(x: 6.58, y: 21.85), controlPoint1: CGPoint(x: 11.14, y: 26.81), controlPoint2: CGPoint(x: 8.32, y: 25.14))
            bezier17Path.addCurve(to: CGPoint(x: 5.04, y: 11.51), controlPoint1: CGPoint(x: 4.62, y: 18.12), controlPoint2: CGPoint(x: 5, y: 12.18))
            bezier17Path.addCurve(to: CGPoint(x: 5.24, y: 9.71), controlPoint1: CGPoint(x: 5.08, y: 10.99), controlPoint2: CGPoint(x: 5.24, y: 9.71))
            bezier17Path.addCurve(to: CGPoint(x: 6.75, y: 9.03), controlPoint1: CGPoint(x: 5.24, y: 9.71), controlPoint2: CGPoint(x: 6.25, y: 9.26))
            bezier17Path.addLine(to: CGPoint(x: 13.97, y: 5.37))
            bezier17Path.addCurve(to: CGPoint(x: 15.26, y: 4.79), controlPoint1: CGPoint(x: 14.37, y: 5.18), controlPoint2: CGPoint(x: 15.26, y: 4.79))
            bezier17Path.addCurve(to: CGPoint(x: 16.54, y: 5.37), controlPoint1: CGPoint(x: 15.26, y: 4.79), controlPoint2: CGPoint(x: 16.14, y: 5.18))
            bezier17Path.addLine(to: CGPoint(x: 23.76, y: 9.02))
            bezier17Path.addCurve(to: CGPoint(x: 25.35, y: 9.71), controlPoint1: CGPoint(x: 24.26, y: 9.26), controlPoint2: CGPoint(x: 25.35, y: 9.71))
            bezier17Path.addCurve(to: CGPoint(x: 25.47, y: 11.51), controlPoint1: CGPoint(x: 25.35, y: 9.71), controlPoint2: CGPoint(x: 25.43, y: 10.99))
            bezier17Path.addCurve(to: CGPoint(x: 23.93, y: 21.85), controlPoint1: CGPoint(x: 25.52, y: 12.18), controlPoint2: CGPoint(x: 25.89, y: 18.12))
            bezier17Path.addCurve(to: CGPoint(x: 16.7, y: 28.15), controlPoint1: CGPoint(x: 22.19, y: 25.14), controlPoint2: CGPoint(x: 19.37, y: 26.81))
            bezier17Path.addLine(to: CGPoint(x: 16.6, y: 28.2))
            bezier17Path.addCurve(to: CGPoint(x: 15.26, y: 28.79), controlPoint1: CGPoint(x: 16.19, y: 28.41), controlPoint2: CGPoint(x: 15.26, y: 28.79))
            bezier17Path.close()
            bezier17Path.usesEvenOddFillRule = true
            fillColor54.setFill()
            bezier17Path.fill()


            //// Bezier 18 Drawing
            let bezier18Path = UIBezierPath()
            bezier18Path.move(to: CGPoint(x: 9.05, y: 12.41))
            bezier18Path.addLine(to: CGPoint(x: 14.81, y: 9.44))
            bezier18Path.addCurve(to: CGPoint(x: 15.26, y: 9.34), controlPoint1: CGPoint(x: 14.95, y: 9.38), controlPoint2: CGPoint(x: 15.1, y: 9.34))
            bezier18Path.addLine(to: CGPoint(x: 15.26, y: 7.04))
            bezier18Path.addCurve(to: CGPoint(x: 14.81, y: 7.14), controlPoint1: CGPoint(x: 15.1, y: 7.04), controlPoint2: CGPoint(x: 14.95, y: 7.07))
            bezier18Path.addLine(to: CGPoint(x: 7.59, y: 10.79))
            bezier18Path.addCurve(to: CGPoint(x: 7.21, y: 11.1), controlPoint1: CGPoint(x: 7.43, y: 10.86), controlPoint2: CGPoint(x: 7.31, y: 10.97))
            bezier18Path.addLine(to: CGPoint(x: 9.05, y: 12.42))
            bezier18Path.addLine(to: CGPoint(x: 9.05, y: 12.41))
            bezier18Path.close()
            bezier18Path.usesEvenOddFillRule = true
            fillColor50.setFill()
            bezier18Path.fill()


            //// Bezier 19 Drawing
            let bezier19Path = UIBezierPath()
            bezier19Path.move(to: CGPoint(x: 14.81, y: 7.13))
            bezier19Path.addLine(to: CGPoint(x: 7.59, y: 10.78))
            bezier19Path.addCurve(to: CGPoint(x: 6.99, y: 11.65), controlPoint1: CGPoint(x: 7.25, y: 10.94), controlPoint2: CGPoint(x: 7.02, y: 11.27))
            bezier19Path.addCurve(to: CGPoint(x: 8.31, y: 20.93), controlPoint1: CGPoint(x: 6.97, y: 11.89), controlPoint2: CGPoint(x: 6.57, y: 17.63))
            bezier19Path.addCurve(to: CGPoint(x: 14.69, y: 26.4), controlPoint1: CGPoint(x: 9.76, y: 23.67), controlPoint2: CGPoint(x: 12.14, y: 25.12))
            bezier19Path.addLine(to: CGPoint(x: 14.79, y: 26.45))
            bezier19Path.addCurve(to: CGPoint(x: 15.26, y: 26.56), controlPoint1: CGPoint(x: 14.93, y: 26.52), controlPoint2: CGPoint(x: 15.09, y: 26.56))
            bezier19Path.addLine(to: CGPoint(x: 15.26, y: 26.56))
            bezier19Path.addLine(to: CGPoint(x: 15.26, y: 7.03))
            bezier19Path.addCurve(to: CGPoint(x: 14.81, y: 7.13), controlPoint1: CGPoint(x: 15.1, y: 7.03), controlPoint2: CGPoint(x: 14.95, y: 7.06))
            bezier19Path.close()
            bezier19Path.usesEvenOddFillRule = true
            fillColor55.setFill()
            bezier19Path.fill()


            //// Bezier 20 Drawing
            let bezier20Path = UIBezierPath()
            bezier20Path.move(to: CGPoint(x: 15.73, y: 26.45))
            bezier20Path.addLine(to: CGPoint(x: 15.82, y: 26.4))
            bezier20Path.addCurve(to: CGPoint(x: 22.2, y: 20.93), controlPoint1: CGPoint(x: 18.37, y: 25.12), controlPoint2: CGPoint(x: 20.75, y: 23.67))
            bezier20Path.addCurve(to: CGPoint(x: 23.52, y: 11.65), controlPoint1: CGPoint(x: 23.94, y: 17.63), controlPoint2: CGPoint(x: 23.54, y: 11.89))
            bezier20Path.addCurve(to: CGPoint(x: 22.92, y: 10.78), controlPoint1: CGPoint(x: 23.49, y: 11.27), controlPoint2: CGPoint(x: 23.26, y: 10.94))
            bezier20Path.addLine(to: CGPoint(x: 15.7, y: 7.13))
            bezier20Path.addCurve(to: CGPoint(x: 15.26, y: 7.03), controlPoint1: CGPoint(x: 15.56, y: 7.06), controlPoint2: CGPoint(x: 15.41, y: 7.03))
            bezier20Path.addLine(to: CGPoint(x: 15.26, y: 26.56))
            bezier20Path.addCurve(to: CGPoint(x: 15.73, y: 26.45), controlPoint1: CGPoint(x: 15.42, y: 26.56), controlPoint2: CGPoint(x: 15.58, y: 26.52))
            bezier20Path.close()
            bezier20Path.usesEvenOddFillRule = true
            fillColor56.setFill()
            bezier20Path.fill()


            //// Bezier 21 Drawing
            let bezier21Path = UIBezierPath()
            bezier21Path.move(to: CGPoint(x: 9.05, y: 12.4))
            bezier21Path.addLine(to: CGPoint(x: 14.81, y: 9.44))
            bezier21Path.addCurve(to: CGPoint(x: 15.26, y: 9.34), controlPoint1: CGPoint(x: 14.95, y: 9.37), controlPoint2: CGPoint(x: 15.1, y: 9.34))
            bezier21Path.addLine(to: CGPoint(x: 15.26, y: 7.03))
            bezier21Path.addCurve(to: CGPoint(x: 14.81, y: 7.13), controlPoint1: CGPoint(x: 15.1, y: 7.03), controlPoint2: CGPoint(x: 14.95, y: 7.06))
            bezier21Path.addLine(to: CGPoint(x: 7.59, y: 10.78))
            bezier21Path.addCurve(to: CGPoint(x: 7.21, y: 11.1), controlPoint1: CGPoint(x: 7.43, y: 10.85), controlPoint2: CGPoint(x: 7.31, y: 10.96))
            bezier21Path.addLine(to: CGPoint(x: 9.05, y: 12.41))
            bezier21Path.addLine(to: CGPoint(x: 9.05, y: 12.4))
            bezier21Path.close()
            bezier21Path.usesEvenOddFillRule = true
            fillColor57.setFill()
            bezier21Path.fill()


            //// Bezier 22 Drawing
            let bezier22Path = UIBezierPath()
            bezier22Path.move(to: CGPoint(x: 22.92, y: 10.78))
            bezier22Path.addLine(to: CGPoint(x: 15.7, y: 7.13))
            bezier22Path.addCurve(to: CGPoint(x: 15.26, y: 7.03), controlPoint1: CGPoint(x: 15.56, y: 7.06), controlPoint2: CGPoint(x: 15.41, y: 7.03))
            bezier22Path.addLine(to: CGPoint(x: 15.26, y: 9.34))
            bezier22Path.addCurve(to: CGPoint(x: 15.7, y: 9.44), controlPoint1: CGPoint(x: 15.41, y: 9.34), controlPoint2: CGPoint(x: 15.56, y: 9.37))
            bezier22Path.addLine(to: CGPoint(x: 21.47, y: 12.41))
            bezier22Path.addLine(to: CGPoint(x: 21.47, y: 12.41))
            bezier22Path.addLine(to: CGPoint(x: 23.3, y: 11.1))
            bezier22Path.addCurve(to: CGPoint(x: 22.92, y: 10.78), controlPoint1: CGPoint(x: 23.2, y: 10.96), controlPoint2: CGPoint(x: 23.08, y: 10.85))
            bezier22Path.close()
            bezier22Path.usesEvenOddFillRule = true
            fillColor55.setFill()
            bezier22Path.fill()


            //// Bezier 23 Drawing
            let bezier23Path = UIBezierPath()
            bezier23Path.move(to: CGPoint(x: 15.05, y: 24.24))
            bezier23Path.addCurve(to: CGPoint(x: 10.16, y: 19.95), controlPoint1: CGPoint(x: 12.86, y: 23.13), controlPoint2: CGPoint(x: 11.2, y: 21.93))
            bezier23Path.addCurve(to: CGPoint(x: 9.05, y: 12.41), controlPoint1: CGPoint(x: 8.99, y: 17.74), controlPoint2: CGPoint(x: 9, y: 13.89))
            bezier23Path.addLine(to: CGPoint(x: 7.21, y: 11.1))
            bezier23Path.addCurve(to: CGPoint(x: 6.99, y: 11.65), controlPoint1: CGPoint(x: 7.09, y: 11.25), controlPoint2: CGPoint(x: 7.01, y: 11.44))
            bezier23Path.addCurve(to: CGPoint(x: 6.96, y: 14.53), controlPoint1: CGPoint(x: 6.98, y: 11.76), controlPoint2: CGPoint(x: 6.9, y: 12.95))
            bezier23Path.addCurve(to: CGPoint(x: 8.31, y: 20.93), controlPoint1: CGPoint(x: 7.04, y: 16.51), controlPoint2: CGPoint(x: 7.34, y: 19.09))
            bezier23Path.addCurve(to: CGPoint(x: 14.69, y: 26.4), controlPoint1: CGPoint(x: 9.76, y: 23.67), controlPoint2: CGPoint(x: 12.14, y: 25.12))
            bezier23Path.addLine(to: CGPoint(x: 14.79, y: 26.45))
            bezier23Path.addCurve(to: CGPoint(x: 15.26, y: 26.56), controlPoint1: CGPoint(x: 14.93, y: 26.52), controlPoint2: CGPoint(x: 15.09, y: 26.56))
            bezier23Path.addLine(to: CGPoint(x: 15.26, y: 26.56))
            bezier23Path.addLine(to: CGPoint(x: 15.26, y: 24.3))
            bezier23Path.addCurve(to: CGPoint(x: 15.05, y: 24.24), controlPoint1: CGPoint(x: 15.2, y: 24.3), controlPoint2: CGPoint(x: 15.15, y: 24.28))
            bezier23Path.close()
            bezier23Path.usesEvenOddFillRule = true
            fillColor56.setFill()
            bezier23Path.fill()


            //// Bezier 24 Drawing
            let bezier24Path = UIBezierPath()
            bezier24Path.move(to: CGPoint(x: 20.35, y: 19.95))
            bezier24Path.addCurve(to: CGPoint(x: 15.45, y: 24.24), controlPoint1: CGPoint(x: 19.31, y: 21.93), controlPoint2: CGPoint(x: 17.64, y: 23.13))
            bezier24Path.addCurve(to: CGPoint(x: 15.26, y: 24.3), controlPoint1: CGPoint(x: 15.35, y: 24.28), controlPoint2: CGPoint(x: 15.31, y: 24.3))
            bezier24Path.addLine(to: CGPoint(x: 15.26, y: 26.56))
            bezier24Path.addCurve(to: CGPoint(x: 15.72, y: 26.45), controlPoint1: CGPoint(x: 15.42, y: 26.56), controlPoint2: CGPoint(x: 15.58, y: 26.52))
            bezier24Path.addLine(to: CGPoint(x: 15.82, y: 26.4))
            bezier24Path.addCurve(to: CGPoint(x: 22.2, y: 20.93), controlPoint1: CGPoint(x: 18.37, y: 25.12), controlPoint2: CGPoint(x: 20.75, y: 23.67))
            bezier24Path.addCurve(to: CGPoint(x: 23.55, y: 14.53), controlPoint1: CGPoint(x: 23.17, y: 19.09), controlPoint2: CGPoint(x: 23.47, y: 16.51))
            bezier24Path.addCurve(to: CGPoint(x: 23.52, y: 11.65), controlPoint1: CGPoint(x: 23.61, y: 12.95), controlPoint2: CGPoint(x: 23.53, y: 11.76))
            bezier24Path.addCurve(to: CGPoint(x: 23.3, y: 11.09), controlPoint1: CGPoint(x: 23.5, y: 11.44), controlPoint2: CGPoint(x: 23.42, y: 11.25))
            bezier24Path.addLine(to: CGPoint(x: 21.47, y: 12.41))
            bezier24Path.addCurve(to: CGPoint(x: 20.35, y: 19.95), controlPoint1: CGPoint(x: 21.53, y: 14.25), controlPoint2: CGPoint(x: 21.43, y: 17.91))
            bezier24Path.close()
            bezier24Path.usesEvenOddFillRule = true
            fillColor58.setFill()
            bezier24Path.fill()


            //// Bezier 25 Drawing
            let bezier25Path = UIBezierPath()
            bezier25Path.move(to: CGPoint(x: 10.81, y: 16.79))
            bezier25Path.addLine(to: CGPoint(x: 13.77, y: 15.31))
            bezier25Path.addLine(to: CGPoint(x: 15.26, y: 16.79))
            bezier25Path.addLine(to: CGPoint(x: 10.81, y: 16.79))
            bezier25Path.close()
            bezier25Path.usesEvenOddFillRule = true
            fillColor59.setFill()
            bezier25Path.fill()


            //// Bezier 26 Drawing
            let bezier26Path = UIBezierPath()
            bezier26Path.move(to: CGPoint(x: 15.26, y: 21.24))
            bezier26Path.addLine(to: CGPoint(x: 13.77, y: 18.28))
            bezier26Path.addLine(to: CGPoint(x: 15.26, y: 16.79))
            bezier26Path.addLine(to: CGPoint(x: 15.26, y: 21.24))
            bezier26Path.close()
            bezier26Path.usesEvenOddFillRule = true
            fillColor59.setFill()
            bezier26Path.fill()


            //// Bezier 27 Drawing
            let bezier27Path = UIBezierPath()
            bezier27Path.move(to: CGPoint(x: 19.7, y: 16.79))
            bezier27Path.addLine(to: CGPoint(x: 16.74, y: 18.28))
            bezier27Path.addLine(to: CGPoint(x: 15.26, y: 16.79))
            bezier27Path.addLine(to: CGPoint(x: 19.7, y: 16.79))
            bezier27Path.close()
            bezier27Path.usesEvenOddFillRule = true
            fillColor58.setFill()
            bezier27Path.fill()


            //// Bezier 28 Drawing
            let bezier28Path = UIBezierPath()
            bezier28Path.move(to: CGPoint(x: 15.26, y: 12.35))
            bezier28Path.addLine(to: CGPoint(x: 16.74, y: 15.31))
            bezier28Path.addLine(to: CGPoint(x: 15.26, y: 16.79))
            bezier28Path.addLine(to: CGPoint(x: 15.26, y: 12.35))
            bezier28Path.close()
            bezier28Path.usesEvenOddFillRule = true
            fillColor58.setFill()
            bezier28Path.fill()


            //// Bezier 29 Drawing
            let bezier29Path = UIBezierPath()
            bezier29Path.move(to: CGPoint(x: 19.7, y: 16.79))
            bezier29Path.addLine(to: CGPoint(x: 16.74, y: 15.31))
            bezier29Path.addLine(to: CGPoint(x: 15.26, y: 16.79))
            bezier29Path.addLine(to: CGPoint(x: 19.7, y: 16.79))
            bezier29Path.close()
            bezier29Path.usesEvenOddFillRule = true
            fillColor58.setFill()
            bezier29Path.fill()


            //// Bezier 30 Drawing
            let bezier30Path = UIBezierPath()
            bezier30Path.move(to: CGPoint(x: 15.26, y: 21.24))
            bezier30Path.addLine(to: CGPoint(x: 16.74, y: 18.28))
            bezier30Path.addLine(to: CGPoint(x: 15.26, y: 16.79))
            bezier30Path.addLine(to: CGPoint(x: 15.26, y: 21.24))
            bezier30Path.close()
            bezier30Path.usesEvenOddFillRule = true
            fillColor58.setFill()
            bezier30Path.fill()


            //// Bezier 31 Drawing
            let bezier31Path = UIBezierPath()
            bezier31Path.move(to: CGPoint(x: 10.81, y: 16.79))
            bezier31Path.addLine(to: CGPoint(x: 13.77, y: 18.28))
            bezier31Path.addLine(to: CGPoint(x: 15.26, y: 16.79))
            bezier31Path.addLine(to: CGPoint(x: 10.81, y: 16.79))
            bezier31Path.close()
            bezier31Path.usesEvenOddFillRule = true
            fillColor59.setFill()
            bezier31Path.fill()


            //// Bezier 32 Drawing
            let bezier32Path = UIBezierPath()
            bezier32Path.move(to: CGPoint(x: 15.26, y: 12.35))
            bezier32Path.addLine(to: CGPoint(x: 13.77, y: 15.31))
            bezier32Path.addLine(to: CGPoint(x: 15.26, y: 16.79))
            bezier32Path.addLine(to: CGPoint(x: 15.26, y: 12.35))
            bezier32Path.close()
            bezier32Path.usesEvenOddFillRule = true
            fillColor59.setFill()
            bezier32Path.fill()


        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHealerLightBg(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 32, height: 32)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawHealer(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, darkBackground: false)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHealerDarkBg(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 32, height: 32)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawHealer(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, darkBackground: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMage(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit, darkBackground: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Color Declarations
        let fillColor60 = UIColor(red: 0.712, green: 0.882, blue: 0.970, alpha: 1.000)
        let fillColor61 = UIColor(red: 0.153, green: 0.541, blue: 0.749, alpha: 1.000)
        let fillColor62 = UIColor(red: 0.325, green: 0.706, blue: 0.898, alpha: 1.000)
        let fillColor63 = UIColor(red: 0.165, green: 0.627, blue: 0.812, alpha: 1.000)
        let fillColor64 = UIColor(red: 0.302, green: 0.698, blue: 0.839, alpha: 1.000)
        let fillColor65 = UIColor(red: 0.420, green: 0.769, blue: 0.914, alpha: 1.000)
        let fillColor66 = UIColor(red: 0.420, green: 0.769, blue: 0.914, alpha: 1.000)
        let fillColor67 = UIColor(red: 0.325, green: 0.706, blue: 0.898, alpha: 1.000)
        let fillColor68 = UIColor(red: 0.122, green: 0.431, blue: 0.635, alpha: 1.000)
        let fillColor69 = UIColor(red: 0.663, green: 0.859, blue: 0.961, alpha: 1.000)
        let fillColor70 = UIColor(red: 0.518, green: 0.812, blue: 0.949, alpha: 1.000)

        //// Variable Declarations
        let lightBackground = !darkBackground

        if (darkBackground) {
            //// Group 2
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 15.74, y: 5.08))
            bezierPath.addCurve(to: CGPoint(x: 10.93, y: 15.97), controlPoint1: CGPoint(x: 13.82, y: 7.01), controlPoint2: CGPoint(x: 11.93, y: 12.69))
            bezierPath.addCurve(to: CGPoint(x: 9.29, y: 14.24), controlPoint1: CGPoint(x: 10.49, y: 15.42), controlPoint2: CGPoint(x: 9.99, y: 14.89))
            bezierPath.addCurve(to: CGPoint(x: 3.74, y: 20.39), controlPoint1: CGPoint(x: 6.78, y: 16.07), controlPoint2: CGPoint(x: 5.45, y: 18.01))
            bezierPath.addCurve(to: CGPoint(x: 15.72, y: 28.73), controlPoint1: CGPoint(x: 8.38, y: 24.52), controlPoint2: CGPoint(x: 9.59, y: 25.21))
            bezierPath.addLine(to: CGPoint(x: 15.74, y: 28.72))
            bezierPath.addLine(to: CGPoint(x: 15.74, y: 28.72))
            bezierPath.addLine(to: CGPoint(x: 15.76, y: 28.73))
            bezierPath.addCurve(to: CGPoint(x: 27.74, y: 20.39), controlPoint1: CGPoint(x: 21.89, y: 25.21), controlPoint2: CGPoint(x: 23.1, y: 24.52))
            bezierPath.addCurve(to: CGPoint(x: 22.2, y: 14.24), controlPoint1: CGPoint(x: 26.03, y: 18.01), controlPoint2: CGPoint(x: 24.7, y: 16.07))
            bezierPath.addCurve(to: CGPoint(x: 20.55, y: 15.97), controlPoint1: CGPoint(x: 21.49, y: 14.89), controlPoint2: CGPoint(x: 20.99, y: 15.42))
            bezierPath.addCurve(to: CGPoint(x: 15.74, y: 5.08), controlPoint1: CGPoint(x: 19.55, y: 12.69), controlPoint2: CGPoint(x: 17.66, y: 7.01))
            bezierPath.addLine(to: CGPoint(x: 15.74, y: 5.08))
            bezierPath.close()
            bezierPath.usesEvenOddFillRule = true
            fillColor60.setFill()
            bezierPath.fill()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 15.74, y: 21.2))
            bezier2Path.addLine(to: CGPoint(x: 17.6, y: 20.54))
            bezier2Path.addCurve(to: CGPoint(x: 22.51, y: 18.72), controlPoint1: CGPoint(x: 20.76, y: 20.23), controlPoint2: CGPoint(x: 21.98, y: 19.36))
            bezier2Path.addLine(to: CGPoint(x: 25.66, y: 20.13))
            bezier2Path.addCurve(to: CGPoint(x: 25.66, y: 20.14), controlPoint1: CGPoint(x: 25.66, y: 20.13), controlPoint2: CGPoint(x: 25.66, y: 20.14))
            bezier2Path.addCurve(to: CGPoint(x: 25.6, y: 20.29), controlPoint1: CGPoint(x: 25.66, y: 20.19), controlPoint2: CGPoint(x: 25.64, y: 20.24))
            bezier2Path.addCurve(to: CGPoint(x: 25.44, y: 20.46), controlPoint1: CGPoint(x: 25.56, y: 20.34), controlPoint2: CGPoint(x: 25.5, y: 20.4))
            bezier2Path.addCurve(to: CGPoint(x: 15.74, y: 26.81), controlPoint1: CGPoint(x: 23.66, y: 22.19), controlPoint2: CGPoint(x: 15.94, y: 26.7))
            bezier2Path.addLine(to: CGPoint(x: 15.74, y: 26.81))
            bezier2Path.addLine(to: CGPoint(x: 15.74, y: 21.2))
            bezier2Path.close()
            bezier2Path.usesEvenOddFillRule = true
            fillColor61.setFill()
            bezier2Path.fill()


            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 21.96, y: 16.48))
            bezier3Path.addCurve(to: CGPoint(x: 22.31, y: 16.3), controlPoint1: CGPoint(x: 22.08, y: 16.38), controlPoint2: CGPoint(x: 22.11, y: 16.3))
            bezier3Path.addCurve(to: CGPoint(x: 25.47, y: 19.67), controlPoint1: CGPoint(x: 22.93, y: 16.34), controlPoint2: CGPoint(x: 25, y: 19))
            bezier3Path.addCurve(to: CGPoint(x: 25.66, y: 20.13), controlPoint1: CGPoint(x: 25.57, y: 19.81), controlPoint2: CGPoint(x: 25.66, y: 19.99))
            bezier3Path.addLine(to: CGPoint(x: 22.51, y: 18.72))
            bezier3Path.addCurve(to: CGPoint(x: 22.32, y: 18.07), controlPoint1: CGPoint(x: 22.63, y: 18.53), controlPoint2: CGPoint(x: 22.6, y: 18.24))
            bezier3Path.addCurve(to: CGPoint(x: 20.78, y: 18.22), controlPoint1: CGPoint(x: 21.89, y: 17.81), controlPoint2: CGPoint(x: 21, y: 18.56))
            bezier3Path.addCurve(to: CGPoint(x: 21.96, y: 16.48), controlPoint1: CGPoint(x: 20.47, y: 17.73), controlPoint2: CGPoint(x: 21.84, y: 16.58))
            bezier3Path.close()
            bezier3Path.usesEvenOddFillRule = true
            fillColor62.setFill()
            bezier3Path.fill()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 15.29, y: 8.38))
            bezier4Path.addCurve(to: CGPoint(x: 11, y: 20.78), controlPoint1: CGPoint(x: 12.48, y: 16.41), controlPoint2: CGPoint(x: 11, y: 20.78))
            bezier4Path.addLine(to: CGPoint(x: 15.74, y: 23.26))
            bezier4Path.addLine(to: CGPoint(x: 15.74, y: 8.04))
            bezier4Path.addCurve(to: CGPoint(x: 15.29, y: 8.38), controlPoint1: CGPoint(x: 15.55, y: 8.04), controlPoint2: CGPoint(x: 15.37, y: 8.15))
            bezier4Path.close()
            bezier4Path.usesEvenOddFillRule = true
            fillColor63.setFill()
            bezier4Path.fill()


            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 16.19, y: 8.38))
            bezier5Path.addCurve(to: CGPoint(x: 15.74, y: 8.04), controlPoint1: CGPoint(x: 16.11, y: 8.15), controlPoint2: CGPoint(x: 15.93, y: 8.04))
            bezier5Path.addLine(to: CGPoint(x: 15.74, y: 23.26))
            bezier5Path.addLine(to: CGPoint(x: 20.48, y: 20.78))
            bezier5Path.addCurve(to: CGPoint(x: 16.19, y: 8.38), controlPoint1: CGPoint(x: 20.48, y: 20.78), controlPoint2: CGPoint(x: 19, y: 16.41))
            bezier5Path.close()
            bezier5Path.usesEvenOddFillRule = true
            fillColor61.setFill()
            bezier5Path.fill()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 15.74, y: 21.2))
            bezier6Path.addLine(to: CGPoint(x: 13.89, y: 20.54))
            bezier6Path.addCurve(to: CGPoint(x: 8.98, y: 18.72), controlPoint1: CGPoint(x: 10.72, y: 20.23), controlPoint2: CGPoint(x: 9.54, y: 19.32))
            bezier6Path.addLine(to: CGPoint(x: 5.82, y: 20.13))
            bezier6Path.addCurve(to: CGPoint(x: 5.82, y: 20.14), controlPoint1: CGPoint(x: 5.82, y: 20.13), controlPoint2: CGPoint(x: 5.82, y: 20.14))
            bezier6Path.addCurve(to: CGPoint(x: 5.88, y: 20.29), controlPoint1: CGPoint(x: 5.83, y: 20.19), controlPoint2: CGPoint(x: 5.84, y: 20.24))
            bezier6Path.addCurve(to: CGPoint(x: 6.04, y: 20.46), controlPoint1: CGPoint(x: 5.92, y: 20.34), controlPoint2: CGPoint(x: 5.98, y: 20.4))
            bezier6Path.addCurve(to: CGPoint(x: 15.74, y: 26.81), controlPoint1: CGPoint(x: 7.82, y: 22.19), controlPoint2: CGPoint(x: 15.54, y: 26.7))
            bezier6Path.addLine(to: CGPoint(x: 15.74, y: 26.81))
            bezier6Path.addLine(to: CGPoint(x: 15.74, y: 21.2))
            bezier6Path.close()
            bezier6Path.usesEvenOddFillRule = true
            fillColor64.setFill()
            bezier6Path.fill()


            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 9.52, y: 16.48))
            bezier7Path.addCurve(to: CGPoint(x: 9.17, y: 16.3), controlPoint1: CGPoint(x: 9.4, y: 16.38), controlPoint2: CGPoint(x: 9.37, y: 16.3))
            bezier7Path.addCurve(to: CGPoint(x: 6.01, y: 19.67), controlPoint1: CGPoint(x: 8.55, y: 16.34), controlPoint2: CGPoint(x: 6.48, y: 19))
            bezier7Path.addCurve(to: CGPoint(x: 5.82, y: 20.13), controlPoint1: CGPoint(x: 5.91, y: 19.81), controlPoint2: CGPoint(x: 5.82, y: 19.99))
            bezier7Path.addLine(to: CGPoint(x: 8.98, y: 18.72))
            bezier7Path.addCurve(to: CGPoint(x: 9.16, y: 18.07), controlPoint1: CGPoint(x: 8.85, y: 18.53), controlPoint2: CGPoint(x: 8.88, y: 18.24))
            bezier7Path.addCurve(to: CGPoint(x: 10.7, y: 18.22), controlPoint1: CGPoint(x: 9.59, y: 17.81), controlPoint2: CGPoint(x: 10.48, y: 18.56))
            bezier7Path.addCurve(to: CGPoint(x: 9.52, y: 16.48), controlPoint1: CGPoint(x: 11.01, y: 17.73), controlPoint2: CGPoint(x: 9.64, y: 16.58))
            bezier7Path.close()
            bezier7Path.usesEvenOddFillRule = true
            fillColor65.setFill()
            bezier7Path.fill()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 15.74, y: 22.71))
            bezier8Path.addLine(to: CGPoint(x: 15.74, y: 20.05))
            bezier8Path.addLine(to: CGPoint(x: 11.99, y: 17.9))
            bezier8Path.addLine(to: CGPoint(x: 11.21, y: 20.01))
            bezier8Path.addLine(to: CGPoint(x: 15.74, y: 22.71))
            bezier8Path.close()
            bezier8Path.usesEvenOddFillRule = true
            fillColor66.setFill()
            bezier8Path.fill()


            //// Bezier 9 Drawing
            let bezier9Path = UIBezierPath()
            bezier9Path.move(to: CGPoint(x: 15.74, y: 22.71))
            bezier9Path.addLine(to: CGPoint(x: 15.74, y: 20.05))
            bezier9Path.addLine(to: CGPoint(x: 19.5, y: 17.9))
            bezier9Path.addLine(to: CGPoint(x: 20.27, y: 20.01))
            bezier9Path.addLine(to: CGPoint(x: 15.74, y: 22.71))
            bezier9Path.close()
            bezier9Path.usesEvenOddFillRule = true
            fillColor67.setFill()
            bezier9Path.fill()


        }


        if (lightBackground) {
            //// Group 3
            //// Bezier 10 Drawing
            let bezier10Path = UIBezierPath()
            bezier10Path.move(to: CGPoint(x: 15.74, y: 5.08))
            bezier10Path.addCurve(to: CGPoint(x: 10.93, y: 15.97), controlPoint1: CGPoint(x: 13.82, y: 7.01), controlPoint2: CGPoint(x: 11.93, y: 12.69))
            bezier10Path.addCurve(to: CGPoint(x: 9.29, y: 14.24), controlPoint1: CGPoint(x: 10.49, y: 15.42), controlPoint2: CGPoint(x: 9.99, y: 14.89))
            bezier10Path.addCurve(to: CGPoint(x: 3.74, y: 20.39), controlPoint1: CGPoint(x: 6.78, y: 16.07), controlPoint2: CGPoint(x: 5.45, y: 18.01))
            bezier10Path.addCurve(to: CGPoint(x: 15.72, y: 28.73), controlPoint1: CGPoint(x: 8.38, y: 24.52), controlPoint2: CGPoint(x: 9.59, y: 25.21))
            bezier10Path.addLine(to: CGPoint(x: 15.74, y: 28.72))
            bezier10Path.addLine(to: CGPoint(x: 15.74, y: 28.72))
            bezier10Path.addLine(to: CGPoint(x: 15.76, y: 28.73))
            bezier10Path.addCurve(to: CGPoint(x: 27.74, y: 20.39), controlPoint1: CGPoint(x: 21.89, y: 25.21), controlPoint2: CGPoint(x: 23.1, y: 24.52))
            bezier10Path.addCurve(to: CGPoint(x: 22.2, y: 14.24), controlPoint1: CGPoint(x: 26.03, y: 18.01), controlPoint2: CGPoint(x: 24.7, y: 16.07))
            bezier10Path.addCurve(to: CGPoint(x: 20.55, y: 15.97), controlPoint1: CGPoint(x: 21.49, y: 14.89), controlPoint2: CGPoint(x: 20.99, y: 15.42))
            bezier10Path.addCurve(to: CGPoint(x: 15.74, y: 5.08), controlPoint1: CGPoint(x: 19.55, y: 12.69), controlPoint2: CGPoint(x: 17.66, y: 7.01))
            bezier10Path.addLine(to: CGPoint(x: 15.74, y: 5.08))
            bezier10Path.close()
            bezier10Path.usesEvenOddFillRule = true
            fillColor68.setFill()
            bezier10Path.fill()


            //// Bezier 11 Drawing
            let bezier11Path = UIBezierPath()
            bezier11Path.move(to: CGPoint(x: 15.74, y: 21.2))
            bezier11Path.addLine(to: CGPoint(x: 17.6, y: 20.54))
            bezier11Path.addCurve(to: CGPoint(x: 22.51, y: 18.72), controlPoint1: CGPoint(x: 20.76, y: 20.23), controlPoint2: CGPoint(x: 21.98, y: 19.36))
            bezier11Path.addLine(to: CGPoint(x: 25.66, y: 20.13))
            bezier11Path.addCurve(to: CGPoint(x: 25.66, y: 20.14), controlPoint1: CGPoint(x: 25.66, y: 20.13), controlPoint2: CGPoint(x: 25.66, y: 20.14))
            bezier11Path.addCurve(to: CGPoint(x: 25.6, y: 20.29), controlPoint1: CGPoint(x: 25.66, y: 20.19), controlPoint2: CGPoint(x: 25.64, y: 20.24))
            bezier11Path.addCurve(to: CGPoint(x: 25.44, y: 20.46), controlPoint1: CGPoint(x: 25.56, y: 20.34), controlPoint2: CGPoint(x: 25.5, y: 20.4))
            bezier11Path.addCurve(to: CGPoint(x: 15.74, y: 26.81), controlPoint1: CGPoint(x: 23.66, y: 22.19), controlPoint2: CGPoint(x: 15.94, y: 26.7))
            bezier11Path.addLine(to: CGPoint(x: 15.74, y: 26.81))
            bezier11Path.addLine(to: CGPoint(x: 15.74, y: 21.2))
            bezier11Path.close()
            bezier11Path.usesEvenOddFillRule = true
            fillColor61.setFill()
            bezier11Path.fill()


            //// Bezier 12 Drawing
            let bezier12Path = UIBezierPath()
            bezier12Path.move(to: CGPoint(x: 21.96, y: 16.48))
            bezier12Path.addCurve(to: CGPoint(x: 22.31, y: 16.3), controlPoint1: CGPoint(x: 22.08, y: 16.38), controlPoint2: CGPoint(x: 22.11, y: 16.3))
            bezier12Path.addCurve(to: CGPoint(x: 25.47, y: 19.67), controlPoint1: CGPoint(x: 22.93, y: 16.34), controlPoint2: CGPoint(x: 25, y: 19))
            bezier12Path.addCurve(to: CGPoint(x: 25.66, y: 20.13), controlPoint1: CGPoint(x: 25.57, y: 19.81), controlPoint2: CGPoint(x: 25.66, y: 19.99))
            bezier12Path.addLine(to: CGPoint(x: 22.51, y: 18.72))
            bezier12Path.addCurve(to: CGPoint(x: 22.32, y: 18.07), controlPoint1: CGPoint(x: 22.63, y: 18.53), controlPoint2: CGPoint(x: 22.6, y: 18.24))
            bezier12Path.addCurve(to: CGPoint(x: 20.78, y: 18.22), controlPoint1: CGPoint(x: 21.89, y: 17.81), controlPoint2: CGPoint(x: 21, y: 18.56))
            bezier12Path.addCurve(to: CGPoint(x: 21.96, y: 16.48), controlPoint1: CGPoint(x: 20.47, y: 17.73), controlPoint2: CGPoint(x: 21.84, y: 16.58))
            bezier12Path.close()
            bezier12Path.usesEvenOddFillRule = true
            fillColor62.setFill()
            bezier12Path.fill()


            //// Bezier 13 Drawing
            let bezier13Path = UIBezierPath()
            bezier13Path.move(to: CGPoint(x: 15.29, y: 8.38))
            bezier13Path.addCurve(to: CGPoint(x: 11, y: 20.78), controlPoint1: CGPoint(x: 12.48, y: 16.41), controlPoint2: CGPoint(x: 11, y: 20.78))
            bezier13Path.addLine(to: CGPoint(x: 15.74, y: 23.26))
            bezier13Path.addLine(to: CGPoint(x: 15.74, y: 8.04))
            bezier13Path.addCurve(to: CGPoint(x: 15.29, y: 8.38), controlPoint1: CGPoint(x: 15.55, y: 8.04), controlPoint2: CGPoint(x: 15.37, y: 8.15))
            bezier13Path.close()
            bezier13Path.usesEvenOddFillRule = true
            fillColor63.setFill()
            bezier13Path.fill()


            //// Bezier 14 Drawing
            let bezier14Path = UIBezierPath()
            bezier14Path.move(to: CGPoint(x: 16.19, y: 8.38))
            bezier14Path.addCurve(to: CGPoint(x: 15.74, y: 8.04), controlPoint1: CGPoint(x: 16.11, y: 8.15), controlPoint2: CGPoint(x: 15.93, y: 8.04))
            bezier14Path.addLine(to: CGPoint(x: 15.74, y: 23.26))
            bezier14Path.addLine(to: CGPoint(x: 20.48, y: 20.78))
            bezier14Path.addCurve(to: CGPoint(x: 16.19, y: 8.38), controlPoint1: CGPoint(x: 20.48, y: 20.78), controlPoint2: CGPoint(x: 19, y: 16.41))
            bezier14Path.close()
            bezier14Path.usesEvenOddFillRule = true
            fillColor61.setFill()
            bezier14Path.fill()


            //// Bezier 15 Drawing
            let bezier15Path = UIBezierPath()
            bezier15Path.move(to: CGPoint(x: 15.74, y: 21.2))
            bezier15Path.addLine(to: CGPoint(x: 13.89, y: 20.54))
            bezier15Path.addCurve(to: CGPoint(x: 8.98, y: 18.72), controlPoint1: CGPoint(x: 10.72, y: 20.23), controlPoint2: CGPoint(x: 9.54, y: 19.32))
            bezier15Path.addLine(to: CGPoint(x: 5.82, y: 20.13))
            bezier15Path.addCurve(to: CGPoint(x: 5.82, y: 20.14), controlPoint1: CGPoint(x: 5.82, y: 20.13), controlPoint2: CGPoint(x: 5.82, y: 20.14))
            bezier15Path.addCurve(to: CGPoint(x: 5.88, y: 20.29), controlPoint1: CGPoint(x: 5.83, y: 20.19), controlPoint2: CGPoint(x: 5.84, y: 20.24))
            bezier15Path.addCurve(to: CGPoint(x: 6.04, y: 20.46), controlPoint1: CGPoint(x: 5.92, y: 20.34), controlPoint2: CGPoint(x: 5.98, y: 20.4))
            bezier15Path.addCurve(to: CGPoint(x: 15.74, y: 26.81), controlPoint1: CGPoint(x: 7.82, y: 22.19), controlPoint2: CGPoint(x: 15.54, y: 26.7))
            bezier15Path.addLine(to: CGPoint(x: 15.74, y: 26.81))
            bezier15Path.addLine(to: CGPoint(x: 15.74, y: 21.2))
            bezier15Path.close()
            bezier15Path.usesEvenOddFillRule = true
            fillColor64.setFill()
            bezier15Path.fill()


            //// Bezier 16 Drawing
            let bezier16Path = UIBezierPath()
            bezier16Path.move(to: CGPoint(x: 9.52, y: 16.48))
            bezier16Path.addCurve(to: CGPoint(x: 9.17, y: 16.3), controlPoint1: CGPoint(x: 9.4, y: 16.38), controlPoint2: CGPoint(x: 9.37, y: 16.3))
            bezier16Path.addCurve(to: CGPoint(x: 6.01, y: 19.67), controlPoint1: CGPoint(x: 8.55, y: 16.34), controlPoint2: CGPoint(x: 6.48, y: 19))
            bezier16Path.addCurve(to: CGPoint(x: 5.82, y: 20.13), controlPoint1: CGPoint(x: 5.91, y: 19.81), controlPoint2: CGPoint(x: 5.82, y: 19.99))
            bezier16Path.addLine(to: CGPoint(x: 8.98, y: 18.72))
            bezier16Path.addCurve(to: CGPoint(x: 9.16, y: 18.07), controlPoint1: CGPoint(x: 8.85, y: 18.53), controlPoint2: CGPoint(x: 8.88, y: 18.24))
            bezier16Path.addCurve(to: CGPoint(x: 10.7, y: 18.22), controlPoint1: CGPoint(x: 9.59, y: 17.81), controlPoint2: CGPoint(x: 10.48, y: 18.56))
            bezier16Path.addCurve(to: CGPoint(x: 9.52, y: 16.48), controlPoint1: CGPoint(x: 11.01, y: 17.73), controlPoint2: CGPoint(x: 9.64, y: 16.58))
            bezier16Path.close()
            bezier16Path.usesEvenOddFillRule = true
            fillColor65.setFill()
            bezier16Path.fill()


            //// Bezier 17 Drawing
            let bezier17Path = UIBezierPath()
            bezier17Path.move(to: CGPoint(x: 15.74, y: 22.71))
            bezier17Path.addLine(to: CGPoint(x: 15.74, y: 20.05))
            bezier17Path.addLine(to: CGPoint(x: 11.99, y: 17.9))
            bezier17Path.addLine(to: CGPoint(x: 11.21, y: 20.01))
            bezier17Path.addLine(to: CGPoint(x: 15.74, y: 22.71))
            bezier17Path.close()
            bezier17Path.usesEvenOddFillRule = true
            fillColor69.setFill()
            bezier17Path.fill()


            //// Bezier 18 Drawing
            let bezier18Path = UIBezierPath()
            bezier18Path.move(to: CGPoint(x: 15.74, y: 22.71))
            bezier18Path.addLine(to: CGPoint(x: 15.74, y: 20.05))
            bezier18Path.addLine(to: CGPoint(x: 19.5, y: 17.9))
            bezier18Path.addLine(to: CGPoint(x: 20.27, y: 20.01))
            bezier18Path.addLine(to: CGPoint(x: 15.74, y: 22.71))
            bezier18Path.close()
            bezier18Path.usesEvenOddFillRule = true
            fillColor70.setFill()
            bezier18Path.fill()


        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMageDarkBg(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 32, height: 32)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawMage(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, darkBackground: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMageLightBg(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 32, height: 32)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawMage(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, darkBackground: false)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCheckmark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 12), resizing: ResizingBehavior = .aspectFit, checkmarkColor: UIColor = UIColor(red: 0.529, green: 0.506, blue: 0.565, alpha: 1.000), percentage: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 12), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 12)



        //// Variable Declarations
        let checkmarkVisibility: CGFloat = percentage * 20

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 1, y: 5))
        bezierPath.addLine(to: CGPoint(x: 6, y: 10))
        bezierPath.addLine(to: CGPoint(x: 15, y: 1))
        checkmarkColor.setStroke()
        bezierPath.lineWidth = 2
        context.saveGState()
        context.setLineDash(phase: 0, lengths: [checkmarkVisibility, 20])
        bezierPath.stroke()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHourglassShop(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 42, height: 53), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 42, height: 53), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 42, y: resizedFrame.height / 53)


        //// Color Declarations
        let fillColor16 = UIColor(red: 0.663, green: 0.863, blue: 0.965, alpha: 0.800)
        let fillColor17 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.900)
        let fillColor18 = UIColor(red: 0.604, green: 0.384, blue: 1.000, alpha: 1.000)
        let fillColor19 = UIColor(red: 0.310, green: 0.165, blue: 0.576, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath()
        rectanglePath.move(to: CGPoint(x: 19, y: 8.6))
        rectanglePath.addCurve(to: CGPoint(x: 20.4, y: 10), controlPoint1: CGPoint(x: 19, y: 9.37), controlPoint2: CGPoint(x: 19.63, y: 10))
        rectanglePath.addLine(to: CGPoint(x: 20.6, y: 10))
        rectanglePath.addCurve(to: CGPoint(x: 22, y: 8.6), controlPoint1: CGPoint(x: 21.37, y: 10), controlPoint2: CGPoint(x: 22, y: 9.37))
        rectanglePath.addLine(to: CGPoint(x: 22, y: 1.4))
        rectanglePath.addCurve(to: CGPoint(x: 20.6, y: 0), controlPoint1: CGPoint(x: 22, y: 0.63), controlPoint2: CGPoint(x: 21.37, y: 0))
        rectanglePath.addLine(to: CGPoint(x: 20.4, y: 0))
        rectanglePath.addCurve(to: CGPoint(x: 19, y: 1.4), controlPoint1: CGPoint(x: 19.63, y: -0), controlPoint2: CGPoint(x: 19, y: 0.63))
        rectanglePath.addLine(to: CGPoint(x: 19, y: 8.6))
        rectanglePath.close()
        fillColor18.setFill()
        rectanglePath.fill()


        //// Clip Drawing
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 1.41, y: 6.55))
        clipPath.addCurve(to: CGPoint(x: 1.41, y: 8.53), controlPoint1: CGPoint(x: 0.86, y: 7.1), controlPoint2: CGPoint(x: 0.86, y: 7.98))
        clipPath.addLine(to: CGPoint(x: 6.5, y: 13.62))
        clipPath.addCurve(to: CGPoint(x: 8.48, y: 13.62), controlPoint1: CGPoint(x: 7.05, y: 14.17), controlPoint2: CGPoint(x: 7.93, y: 14.17))
        clipPath.addLine(to: CGPoint(x: 8.62, y: 13.48))
        clipPath.addCurve(to: CGPoint(x: 8.62, y: 11.5), controlPoint1: CGPoint(x: 9.17, y: 12.93), controlPoint2: CGPoint(x: 9.17, y: 12.05))
        clipPath.addLine(to: CGPoint(x: 3.53, y: 6.41))
        clipPath.addCurve(to: CGPoint(x: 1.55, y: 6.41), controlPoint1: CGPoint(x: 2.98, y: 5.86), controlPoint2: CGPoint(x: 2.1, y: 5.86))
        clipPath.addLine(to: CGPoint(x: 1.41, y: 6.55))
        clipPath.close()
        fillColor18.setFill()
        clipPath.fill()


        //// Clip 2 Drawing
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 33.55, y: 13.62))
        clip2Path.addCurve(to: CGPoint(x: 35.53, y: 13.62), controlPoint1: CGPoint(x: 34.1, y: 14.17), controlPoint2: CGPoint(x: 34.98, y: 14.17))
        clip2Path.addLine(to: CGPoint(x: 40.62, y: 8.53))
        clip2Path.addCurve(to: CGPoint(x: 40.62, y: 6.55), controlPoint1: CGPoint(x: 41.17, y: 7.98), controlPoint2: CGPoint(x: 41.17, y: 7.1))
        clip2Path.addLine(to: CGPoint(x: 40.48, y: 6.41))
        clip2Path.addCurve(to: CGPoint(x: 38.5, y: 6.41), controlPoint1: CGPoint(x: 39.93, y: 5.86), controlPoint2: CGPoint(x: 39.05, y: 5.86))
        clip2Path.addLine(to: CGPoint(x: 33.41, y: 11.5))
        clip2Path.addCurve(to: CGPoint(x: 33.41, y: 13.48), controlPoint1: CGPoint(x: 32.86, y: 12.05), controlPoint2: CGPoint(x: 32.86, y: 12.93))
        clip2Path.addLine(to: CGPoint(x: 33.55, y: 13.62))
        clip2Path.close()
        fillColor18.setFill()
        clip2Path.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 44.69))
        bezierPath.addLine(to: CGPoint(x: 10, y: 48.74))
        bezierPath.addCurve(to: CGPoint(x: 10.6, y: 49.95), controlPoint1: CGPoint(x: 10, y: 49.21), controlPoint2: CGPoint(x: 10.21, y: 49.67))
        bezierPath.addCurve(to: CGPoint(x: 30.55, y: 49.95), controlPoint1: CGPoint(x: 14.79, y: 53.01), controlPoint2: CGPoint(x: 26.35, y: 53.01))
        bezierPath.addCurve(to: CGPoint(x: 31.14, y: 48.74), controlPoint1: CGPoint(x: 30.93, y: 49.67), controlPoint2: CGPoint(x: 31.14, y: 49.21))
        bezierPath.addLine(to: CGPoint(x: 31.14, y: 44.69))
        bezierPath.addCurve(to: CGPoint(x: 26.38, y: 35.35), controlPoint1: CGPoint(x: 31.14, y: 41), controlPoint2: CGPoint(x: 29.25, y: 37.46))
        bezierPath.addCurve(to: CGPoint(x: 26.38, y: 32.89), controlPoint1: CGPoint(x: 25.54, y: 34.73), controlPoint2: CGPoint(x: 25.54, y: 33.51))
        bezierPath.addCurve(to: CGPoint(x: 31.14, y: 23.55), controlPoint1: CGPoint(x: 29.25, y: 30.78), controlPoint2: CGPoint(x: 31.14, y: 27.24))
        bezierPath.addLine(to: CGPoint(x: 31.14, y: 19.5))
        bezierPath.addCurve(to: CGPoint(x: 30.55, y: 18.3), controlPoint1: CGPoint(x: 31.14, y: 19.03), controlPoint2: CGPoint(x: 30.93, y: 18.58))
        bezierPath.addCurve(to: CGPoint(x: 10.6, y: 18.3), controlPoint1: CGPoint(x: 26.35, y: 15.23), controlPoint2: CGPoint(x: 14.79, y: 15.23))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 19.5), controlPoint1: CGPoint(x: 10.21, y: 18.58), controlPoint2: CGPoint(x: 10, y: 19.03))
        bezierPath.addLine(to: CGPoint(x: 10, y: 23.55))
        bezierPath.addCurve(to: CGPoint(x: 14.76, y: 32.89), controlPoint1: CGPoint(x: 10, y: 27.24), controlPoint2: CGPoint(x: 11.89, y: 30.78))
        bezierPath.addCurve(to: CGPoint(x: 14.76, y: 35.35), controlPoint1: CGPoint(x: 15.6, y: 33.51), controlPoint2: CGPoint(x: 15.6, y: 34.73))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 44.69), controlPoint1: CGPoint(x: 11.89, y: 37.46), controlPoint2: CGPoint(x: 10, y: 41))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor16.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 20.57, y: 19.02))
        bezier2Path.addCurve(to: CGPoint(x: 28.12, y: 20.36), controlPoint1: CGPoint(x: 24, y: 19.02), controlPoint2: CGPoint(x: 26.68, y: 19.64))
        bezier2Path.addLine(to: CGPoint(x: 28.12, y: 23.55))
        bezier2Path.addCurve(to: CGPoint(x: 24.59, y: 30.46), controlPoint1: CGPoint(x: 28.12, y: 26.21), controlPoint2: CGPoint(x: 26.77, y: 28.86))
        bezier2Path.addCurve(to: CGPoint(x: 22.73, y: 34.12), controlPoint1: CGPoint(x: 23.43, y: 31.32), controlPoint2: CGPoint(x: 22.73, y: 32.69))
        bezier2Path.addCurve(to: CGPoint(x: 24.59, y: 37.78), controlPoint1: CGPoint(x: 22.73, y: 35.56), controlPoint2: CGPoint(x: 23.43, y: 36.93))
        bezier2Path.addCurve(to: CGPoint(x: 28.12, y: 44.69), controlPoint1: CGPoint(x: 26.77, y: 39.39), controlPoint2: CGPoint(x: 28.12, y: 42.03))
        bezier2Path.addLine(to: CGPoint(x: 28.12, y: 47.89))
        bezier2Path.addCurve(to: CGPoint(x: 20.57, y: 49.22), controlPoint1: CGPoint(x: 26.68, y: 48.6), controlPoint2: CGPoint(x: 24, y: 49.22))
        bezier2Path.addCurve(to: CGPoint(x: 13.02, y: 47.89), controlPoint1: CGPoint(x: 17.14, y: 49.22), controlPoint2: CGPoint(x: 14.46, y: 48.6))
        bezier2Path.addLine(to: CGPoint(x: 13.02, y: 44.69))
        bezier2Path.addCurve(to: CGPoint(x: 16.55, y: 37.78), controlPoint1: CGPoint(x: 13.02, y: 42.03), controlPoint2: CGPoint(x: 14.37, y: 39.39))
        bezier2Path.addCurve(to: CGPoint(x: 18.41, y: 34.12), controlPoint1: CGPoint(x: 17.72, y: 36.93), controlPoint2: CGPoint(x: 18.41, y: 35.56))
        bezier2Path.addCurve(to: CGPoint(x: 16.55, y: 30.46), controlPoint1: CGPoint(x: 18.41, y: 32.69), controlPoint2: CGPoint(x: 17.72, y: 31.32))
        bezier2Path.addCurve(to: CGPoint(x: 13.02, y: 23.55), controlPoint1: CGPoint(x: 14.37, y: 28.86), controlPoint2: CGPoint(x: 13.02, y: 26.21))
        bezier2Path.addLine(to: CGPoint(x: 13.02, y: 20.36))
        bezier2Path.addCurve(to: CGPoint(x: 20.57, y: 19.02), controlPoint1: CGPoint(x: 14.46, y: 19.64), controlPoint2: CGPoint(x: 17.14, y: 19.02))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        fillColor17.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 20.92, y: 21.29))
        bezier3Path.addCurve(to: CGPoint(x: 15.59, y: 22.17), controlPoint1: CGPoint(x: 18.34, y: 21.29), controlPoint2: CGPoint(x: 15.61, y: 21.53))
        bezier3Path.addCurve(to: CGPoint(x: 17.67, y: 24.74), controlPoint1: CGPoint(x: 15.56, y: 22.68), controlPoint2: CGPoint(x: 15.57, y: 23.68))
        bezier3Path.addCurve(to: CGPoint(x: 21.18, y: 27.66), controlPoint1: CGPoint(x: 19.7, y: 25.77), controlPoint2: CGPoint(x: 20.08, y: 27.66))
        bezier3Path.addCurve(to: CGPoint(x: 24.11, y: 25.49), controlPoint1: CGPoint(x: 22.47, y: 27.66), controlPoint2: CGPoint(x: 22.54, y: 26.57))
        bezier3Path.addCurve(to: CGPoint(x: 25.96, y: 22.29), controlPoint1: CGPoint(x: 25.72, y: 24.38), controlPoint2: CGPoint(x: 25.98, y: 22.88))
        bezier3Path.addCurve(to: CGPoint(x: 20.92, y: 21.29), controlPoint1: CGPoint(x: 25.94, y: 21.46), controlPoint2: CGPoint(x: 23.49, y: 21.29))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        fillColor18.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 24.11, y: 25.49))
        bezier4Path.addCurve(to: CGPoint(x: 25.96, y: 22.29), controlPoint1: CGPoint(x: 25.72, y: 24.38), controlPoint2: CGPoint(x: 25.98, y: 22.88))
        bezier4Path.addCurve(to: CGPoint(x: 22.49, y: 21.32), controlPoint1: CGPoint(x: 25.94, y: 21.63), controlPoint2: CGPoint(x: 24.41, y: 21.39))
        bezier4Path.addCurve(to: CGPoint(x: 23.55, y: 23.32), controlPoint1: CGPoint(x: 23.03, y: 21.59), controlPoint2: CGPoint(x: 23.72, y: 22.17))
        bezier4Path.addCurve(to: CGPoint(x: 21.8, y: 26.89), controlPoint1: CGPoint(x: 23.37, y: 24.51), controlPoint2: CGPoint(x: 21.49, y: 25.83))
        bezier4Path.addCurve(to: CGPoint(x: 22.08, y: 27.39), controlPoint1: CGPoint(x: 21.86, y: 27.09), controlPoint2: CGPoint(x: 21.96, y: 27.26))
        bezier4Path.addCurve(to: CGPoint(x: 24.11, y: 25.49), controlPoint1: CGPoint(x: 22.64, y: 27.01), controlPoint2: CGPoint(x: 23.01, y: 26.25))
        bezier4Path.close()
        bezier4Path.usesEvenOddFillRule = true
        fillColor19.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 20.57, y: 36.87))
        bezier5Path.addCurve(to: CGPoint(x: 18.45, y: 39.19), controlPoint1: CGPoint(x: 19.79, y: 36.87), controlPoint2: CGPoint(x: 19.59, y: 38.3))
        bezier5Path.addCurve(to: CGPoint(x: 15.36, y: 43.54), controlPoint1: CGPoint(x: 17.05, y: 40.28), controlPoint2: CGPoint(x: 15.73, y: 41.62))
        bezier5Path.addCurve(to: CGPoint(x: 15.7, y: 45.44), controlPoint1: CGPoint(x: 15.06, y: 45.13), controlPoint2: CGPoint(x: 15.33, y: 45.33))
        bezier5Path.addCurve(to: CGPoint(x: 21.59, y: 45.44), controlPoint1: CGPoint(x: 16.06, y: 45.55), controlPoint2: CGPoint(x: 18.85, y: 46.03))
        bezier5Path.addCurve(to: CGPoint(x: 25.58, y: 42.65), controlPoint1: CGPoint(x: 24.33, y: 44.86), controlPoint2: CGPoint(x: 25.84, y: 43.77))
        bezier5Path.addCurve(to: CGPoint(x: 23.15, y: 39.63), controlPoint1: CGPoint(x: 25.33, y: 41.59), controlPoint2: CGPoint(x: 24.56, y: 40.68))
        bezier5Path.addCurve(to: CGPoint(x: 20.57, y: 36.87), controlPoint1: CGPoint(x: 21.8, y: 38.63), controlPoint2: CGPoint(x: 21.36, y: 36.87))
        bezier5Path.close()
        bezier5Path.usesEvenOddFillRule = true
        fillColor18.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 15.7, y: 45.44))
        bezier6Path.addCurve(to: CGPoint(x: 21.59, y: 45.44), controlPoint1: CGPoint(x: 16.06, y: 45.55), controlPoint2: CGPoint(x: 18.85, y: 46.03))
        bezier6Path.addCurve(to: CGPoint(x: 25.52, y: 43.33), controlPoint1: CGPoint(x: 23.76, y: 44.98), controlPoint2: CGPoint(x: 25.17, y: 44.19))
        bezier6Path.addCurve(to: CGPoint(x: 25.51, y: 43.28), controlPoint1: CGPoint(x: 25.52, y: 43.31), controlPoint2: CGPoint(x: 25.52, y: 43.29))
        bezier6Path.addCurve(to: CGPoint(x: 20.22, y: 42.8), controlPoint1: CGPoint(x: 25.36, y: 42.69), controlPoint2: CGPoint(x: 23.07, y: 42.34))
        bezier6Path.addCurve(to: CGPoint(x: 15.32, y: 45.15), controlPoint1: CGPoint(x: 17.51, y: 43.24), controlPoint2: CGPoint(x: 15.31, y: 44.14))
        bezier6Path.addCurve(to: CGPoint(x: 15.7, y: 45.44), controlPoint1: CGPoint(x: 15.4, y: 45.33), controlPoint2: CGPoint(x: 15.54, y: 45.39))
        bezier6Path.close()
        bezier6Path.usesEvenOddFillRule = true
        fillColor19.setFill()
        bezier6Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawAttributeSparklesLeft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 77, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 77, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 77, y: resizedFrame.height / 24)


        //// Color Declarations
        let fillColor18 = UIColor(red: 0.604, green: 0.384, blue: 1.000, alpha: 1.000)
        let fillColor71 = UIColor(red: 0.314, green: 0.710, blue: 0.914, alpha: 1.000)
        let fillColor72 = UIColor(red: 1.000, green: 0.380, blue: 0.396, alpha: 1.000)
        let fillColor73 = UIColor(red: 1.000, green: 0.706, blue: 0.271, alpha: 1.000)

        //// Star Drawing
        let starPath = UIBezierPath()
        starPath.move(to: CGPoint(x: 42.5, y: 0))
        starPath.addLine(to: CGPoint(x: 44.66, y: 4.34))
        starPath.addLine(to: CGPoint(x: 49, y: 6.5))
        starPath.addLine(to: CGPoint(x: 44.66, y: 8.66))
        starPath.addLine(to: CGPoint(x: 42.5, y: 13))
        starPath.addLine(to: CGPoint(x: 40.34, y: 8.66))
        starPath.addLine(to: CGPoint(x: 36, y: 6.5))
        starPath.addLine(to: CGPoint(x: 40.34, y: 4.34))
        starPath.close()
        fillColor71.setFill()
        starPath.fill()


        //// Star 2 Drawing
        let star2Path = UIBezierPath()
        star2Path.move(to: CGPoint(x: 69, y: 6))
        star2Path.addLine(to: CGPoint(x: 71.65, y: 11.35))
        star2Path.addLine(to: CGPoint(x: 77, y: 14))
        star2Path.addLine(to: CGPoint(x: 71.65, y: 16.65))
        star2Path.addLine(to: CGPoint(x: 69, y: 22))
        star2Path.addLine(to: CGPoint(x: 66.35, y: 16.65))
        star2Path.addLine(to: CGPoint(x: 61, y: 14))
        star2Path.addLine(to: CGPoint(x: 66.35, y: 11.35))
        star2Path.close()
        fillColor18.setFill()
        star2Path.fill()


        //// Star 3 Drawing
        let star3Path = UIBezierPath()
        star3Path.move(to: CGPoint(x: 22, y: 14))
        star3Path.addLine(to: CGPoint(x: 23.66, y: 17.34))
        star3Path.addLine(to: CGPoint(x: 27, y: 19))
        star3Path.addLine(to: CGPoint(x: 23.66, y: 20.66))
        star3Path.addLine(to: CGPoint(x: 22, y: 24))
        star3Path.addLine(to: CGPoint(x: 20.34, y: 20.66))
        star3Path.addLine(to: CGPoint(x: 17, y: 19))
        star3Path.addLine(to: CGPoint(x: 20.34, y: 17.34))
        star3Path.close()
        fillColor72.setFill()
        star3Path.fill()


        //// Star 4 Drawing
        let star4Path = UIBezierPath()
        star4Path.move(to: CGPoint(x: 3.5, y: 9))
        star4Path.addLine(to: CGPoint(x: 4.67, y: 11.33))
        star4Path.addLine(to: CGPoint(x: 7, y: 12.5))
        star4Path.addLine(to: CGPoint(x: 4.67, y: 13.67))
        star4Path.addLine(to: CGPoint(x: 3.5, y: 16))
        star4Path.addLine(to: CGPoint(x: 2.33, y: 13.67))
        star4Path.addLine(to: CGPoint(x: 0, y: 12.5))
        star4Path.addLine(to: CGPoint(x: 2.33, y: 11.33))
        star4Path.close()
        fillColor73.setFill()
        star4Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawAttributeSparklesRight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 77, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 77, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 77, y: resizedFrame.height / 24)


        //// Color Declarations
        let fillColor18 = UIColor(red: 0.604, green: 0.384, blue: 1.000, alpha: 1.000)
        let fillColor71 = UIColor(red: 0.314, green: 0.710, blue: 0.914, alpha: 1.000)
        let fillColor72 = UIColor(red: 1.000, green: 0.380, blue: 0.396, alpha: 1.000)
        let fillColor74 = UIColor(red: 1.000, green: 0.745, blue: 0.365, alpha: 1.000)

        //// Star Drawing
        let starPath = UIBezierPath()
        starPath.move(to: CGPoint(x: 34.5, y: 0))
        starPath.addLine(to: CGPoint(x: 36.66, y: 4.34))
        starPath.addLine(to: CGPoint(x: 41, y: 6.5))
        starPath.addLine(to: CGPoint(x: 36.66, y: 8.66))
        starPath.addLine(to: CGPoint(x: 34.5, y: 13))
        starPath.addLine(to: CGPoint(x: 32.34, y: 8.66))
        starPath.addLine(to: CGPoint(x: 28, y: 6.5))
        starPath.addLine(to: CGPoint(x: 32.34, y: 4.34))
        starPath.close()
        fillColor72.setFill()
        starPath.fill()


        //// Star 2 Drawing
        let star2Path = UIBezierPath()
        star2Path.move(to: CGPoint(x: 8, y: 6))
        star2Path.addLine(to: CGPoint(x: 10.65, y: 11.35))
        star2Path.addLine(to: CGPoint(x: 16, y: 14))
        star2Path.addLine(to: CGPoint(x: 10.65, y: 16.65))
        star2Path.addLine(to: CGPoint(x: 8, y: 22))
        star2Path.addLine(to: CGPoint(x: 5.35, y: 16.65))
        star2Path.addLine(to: CGPoint(x: 0, y: 14))
        star2Path.addLine(to: CGPoint(x: 5.35, y: 11.35))
        star2Path.close()
        fillColor74.setFill()
        star2Path.fill()


        //// Star 3 Drawing
        let star3Path = UIBezierPath()
        star3Path.move(to: CGPoint(x: 55, y: 14))
        star3Path.addLine(to: CGPoint(x: 56.66, y: 17.34))
        star3Path.addLine(to: CGPoint(x: 60, y: 19))
        star3Path.addLine(to: CGPoint(x: 56.66, y: 20.66))
        star3Path.addLine(to: CGPoint(x: 55, y: 24))
        star3Path.addLine(to: CGPoint(x: 53.34, y: 20.66))
        star3Path.addLine(to: CGPoint(x: 50, y: 19))
        star3Path.addLine(to: CGPoint(x: 53.34, y: 17.34))
        star3Path.close()
        fillColor18.setFill()
        star3Path.fill()


        //// Star 4 Drawing
        let star4Path = UIBezierPath()
        star4Path.move(to: CGPoint(x: 73.5, y: 9))
        star4Path.addLine(to: CGPoint(x: 74.67, y: 11.33))
        star4Path.addLine(to: CGPoint(x: 77, y: 12.5))
        star4Path.addLine(to: CGPoint(x: 74.67, y: 13.67))
        star4Path.addLine(to: CGPoint(x: 73.5, y: 16))
        star4Path.addLine(to: CGPoint(x: 72.33, y: 13.67))
        star4Path.addLine(to: CGPoint(x: 70, y: 12.5))
        star4Path.addLine(to: CGPoint(x: 72.33, y: 11.33))
        star4Path.close()
        fillColor71.setFill()
        star4Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawAttributeAllocateButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 15), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 15)


        //// Color Declarations
        let fillColor75 = UIColor(red: 0.529, green: 0.506, blue: 0.565, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: 15))
        bezierPath.addLine(to: CGPoint(x: 12, y: 0))
        bezierPath.addLine(to: CGPoint(x: 24, y: 15))
        bezierPath.addLine(to: CGPoint(x: 0, y: 15))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor75.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawInfoIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit, infoIconColor: UIColor = UIColor(red: 0.604, green: 0.384, blue: 1.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 9, y: 7))
        bezierPath.addLine(to: CGPoint(x: 11, y: 7))
        bezierPath.addLine(to: CGPoint(x: 11, y: 5))
        bezierPath.addLine(to: CGPoint(x: 9, y: 5))
        bezierPath.addLine(to: CGPoint(x: 9, y: 7))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 5.59, y: 18), controlPoint2: CGPoint(x: 2, y: 14.41))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 2, y: 5.59), controlPoint2: CGPoint(x: 5.59, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 14.41, y: 2), controlPoint2: CGPoint(x: 18, y: 5.59))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 18), controlPoint1: CGPoint(x: 18, y: 14.41), controlPoint2: CGPoint(x: 14.41, y: 18))
        bezierPath.addLine(to: CGPoint(x: 10, y: 18))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 10), controlPoint1: CGPoint(x: 4.48, y: 0), controlPoint2: CGPoint(x: 0, y: 4.48))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 20), controlPoint1: CGPoint(x: 0, y: 15.52), controlPoint2: CGPoint(x: 4.48, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 10), controlPoint1: CGPoint(x: 15.52, y: 20), controlPoint2: CGPoint(x: 20, y: 15.52))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 0), controlPoint1: CGPoint(x: 20, y: 4.48), controlPoint2: CGPoint(x: 15.52, y: 0))
        bezierPath.addLine(to: CGPoint(x: 10, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9, y: 15))
        bezierPath.addLine(to: CGPoint(x: 11, y: 15))
        bezierPath.addLine(to: CGPoint(x: 11, y: 9))
        bezierPath.addLine(to: CGPoint(x: 9, y: 9))
        bezierPath.addLine(to: CGPoint(x: 9, y: 15))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        infoIconColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawContributorBadge(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit, contributorTier: CGFloat = 1, isNPC: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)


        //// Color Declarations
        let fillColor2 = UIColor(red: 1.000, green: 0.380, blue: 0.396, alpha: 1.000)
        let fillColor7 = UIColor(red: 0.161, green: 0.584, blue: 0.804, alpha: 1.000)
        let fillColor76 = UIColor(red: 1.000, green: 0.714, blue: 0.722, alpha: 1.000)
        let strokeColor3 = UIColor(red: 0.992, green: 0.486, blue: 0.499, alpha: 1.000)
        let fillColor77 = UIColor(red: 0.788, green: 0.169, blue: 0.169, alpha: 1.000)
        let strokeColor4 = UIColor(red: 0.531, green: 0.041, blue: 0.041, alpha: 1.000)
        let strokeColor5 = UIColor(red: 0.881, green: 0.086, blue: 0.107, alpha: 1.000)
        let fillColor78 = UIColor(red: 1.000, green: 0.580, blue: 0.298, alpha: 1.000)
        let strokeColor6 = UIColor(red: 0.927, green: 0.426, blue: 0.091, alpha: 1.000)
        let fillColor79 = UIColor(red: 1.000, green: 0.745, blue: 0.365, alpha: 1.000)
        let strokeColor7 = UIColor(red: 0.933, green: 0.569, blue: 0.035, alpha: 1.000)
        let fillColor80 = UIColor(red: 0.247, green: 0.855, blue: 0.635, alpha: 1.000)
        let strokeColor8 = UIColor(red: 0.110, green: 0.639, blue: 0.447, alpha: 1.000)
        let fillColor81 = UIColor(red: 0.369, green: 0.867, blue: 0.914, alpha: 1.000)
        let strokeColor9 = UIColor(red: 0.204, green: 0.710, blue: 0.757, alpha: 1.000)
        let strokeColor10 = UIColor(red: 0.021, green: 0.441, blue: 0.657, alpha: 1.000)
        let fillColor82 = UIColor(red: 0.604, green: 0.384, blue: 1.000, alpha: 1.000)
        let strokeColor11 = UIColor(red: 0.417, green: 0.205, blue: 0.802, alpha: 1.000)
        let fillColor83 = UIColor(red: 0.467, green: 0.957, blue: 0.780, alpha: 1.000)
        let strokeColor12 = UIColor(red: 0.000, green: 0.341, blue: 0.216, alpha: 1.000)

        //// Variable Declarations
        let isTier1 = contributorTier == 1 && !isNPC
        let isTier2 = contributorTier == 2 && !isNPC
        let isTier3 = contributorTier == 3 && !isNPC
        let isTier4 = contributorTier == 4 && !isNPC
        let isTier5 = contributorTier == 5 && !isNPC
        let isTier6 = contributorTier == 6 && !isNPC
        let isTier7 = contributorTier == 7 && !isNPC
        let isTier8 = contributorTier == 8 && !isNPC
        let isTier9 = contributorTier == 9 && !isNPC

        if (isTier1) {
            //// Tier1 Drawing
            let tier1Path = UIBezierPath()
            tier1Path.move(to: CGPoint(x: 7.5, y: 4))
            tier1Path.addLine(to: CGPoint(x: 11.4, y: 6.25))
            tier1Path.addLine(to: CGPoint(x: 11.4, y: 10.75))
            tier1Path.addLine(to: CGPoint(x: 7.5, y: 13))
            tier1Path.addLine(to: CGPoint(x: 3.6, y: 10.75))
            tier1Path.addLine(to: CGPoint(x: 3.6, y: 6.25))
            tier1Path.close()
            fillColor76.setFill()
            tier1Path.fill()
            strokeColor3.setStroke()
            tier1Path.lineWidth = 1
            tier1Path.stroke()
        }


        if (isTier2) {
            //// Tier2 Drawing
            let tier2Path = UIBezierPath()
            tier2Path.move(to: CGPoint(x: 7.5, y: 4))
            tier2Path.addLine(to: CGPoint(x: 11.4, y: 6.25))
            tier2Path.addLine(to: CGPoint(x: 11.4, y: 10.75))
            tier2Path.addLine(to: CGPoint(x: 7.5, y: 13))
            tier2Path.addLine(to: CGPoint(x: 3.6, y: 10.75))
            tier2Path.addLine(to: CGPoint(x: 3.6, y: 6.25))
            tier2Path.close()
            fillColor77.setFill()
            tier2Path.fill()
            strokeColor4.setStroke()
            tier2Path.lineWidth = 1
            tier2Path.stroke()
        }


        if (isTier3) {
            //// Tier3 Drawing
            let tier3Path = UIBezierPath()
            tier3Path.move(to: CGPoint(x: 8, y: 3.5))
            tier3Path.addLine(to: CGPoint(x: 12.5, y: 12.5))
            tier3Path.addLine(to: CGPoint(x: 3.5, y: 12.5))
            tier3Path.addLine(to: CGPoint(x: 8, y: 3.5))
            tier3Path.close()
            fillColor2.setFill()
            tier3Path.fill()
            strokeColor5.setStroke()
            tier3Path.lineWidth = 1
            tier3Path.stroke()
        }


        if (isTier4) {
            //// Tier4 Drawing
            let tier4Path = UIBezierPath()
            tier4Path.move(to: CGPoint(x: 8, y: 3.5))
            tier4Path.addLine(to: CGPoint(x: 12.5, y: 12.5))
            tier4Path.addLine(to: CGPoint(x: 3.5, y: 12.5))
            tier4Path.addLine(to: CGPoint(x: 8, y: 3.5))
            tier4Path.close()
            fillColor78.setFill()
            tier4Path.fill()
            strokeColor6.setStroke()
            tier4Path.lineWidth = 1
            tier4Path.stroke()
        }


        if (isTier5) {
            //// Tier5 Drawing
            let tier5Path = UIBezierPath(rect: CGRect(x: 3.5, y: 3.5, width: 9, height: 9))
            fillColor79.setFill()
            tier5Path.fill()
            strokeColor7.setStroke()
            tier5Path.lineWidth = 1
            tier5Path.stroke()
        }


        if (isTier6) {
            //// Tier6 Drawing
            let tier6Path = UIBezierPath(rect: CGRect(x: 3.5, y: 3.5, width: 9, height: 9))
            fillColor80.setFill()
            tier6Path.fill()
            strokeColor8.setStroke()
            tier6Path.lineWidth = 1
            tier6Path.stroke()
        }


        if (isTier7) {
            //// Tier7 Drawing
            context.saveGState()
            context.translateBy(x: 8.16, y: 7.84)
            context.rotate(by: 45 * CGFloat.pi/180)

            let tier7Path = UIBezierPath(rect: CGRect(x: -4, y: -4, width: 8, height: 8))
            fillColor81.setFill()
            tier7Path.fill()
            strokeColor9.setStroke()
            tier7Path.lineWidth = 1
            tier7Path.stroke()

            context.restoreGState()
        }


        if (isTier8) {
            //// TierMod Drawing
            let tierModPath = UIBezierPath()
            tierModPath.move(to: CGPoint(x: 7.5, y: 2.5))
            tierModPath.addLine(to: CGPoint(x: 9.44, y: 5.83))
            tierModPath.addLine(to: CGPoint(x: 13.21, y: 6.65))
            tierModPath.addLine(to: CGPoint(x: 10.64, y: 9.52))
            tierModPath.addLine(to: CGPoint(x: 11.03, y: 13.35))
            tierModPath.addLine(to: CGPoint(x: 7.5, y: 11.8))
            tierModPath.addLine(to: CGPoint(x: 3.97, y: 13.35))
            tierModPath.addLine(to: CGPoint(x: 4.36, y: 9.52))
            tierModPath.addLine(to: CGPoint(x: 1.79, y: 6.65))
            tierModPath.addLine(to: CGPoint(x: 5.56, y: 5.83))
            tierModPath.close()
            fillColor7.setFill()
            tierModPath.fill()
            strokeColor10.setStroke()
            tierModPath.lineWidth = 1
            tierModPath.stroke()
        }


        if (isTier9) {
            //// TierStaff Drawing
            let tierStaffPath = UIBezierPath()
            tierStaffPath.move(to: CGPoint(x: 2.5, y: 4.5))
            tierStaffPath.addLine(to: CGPoint(x: 2.5, y: 12.5))
            tierStaffPath.addLine(to: CGPoint(x: 12.5, y: 12.5))
            tierStaffPath.addLine(to: CGPoint(x: 12.5, y: 4.5))
            tierStaffPath.addLine(to: CGPoint(x: 9.5, y: 7.5))
            tierStaffPath.addLine(to: CGPoint(x: 7.46, y: 4.54))
            tierStaffPath.addLine(to: CGPoint(x: 5.5, y: 7.5))
            tierStaffPath.addLine(to: CGPoint(x: 2.5, y: 4.5))
            tierStaffPath.close()
            fillColor82.setFill()
            tierStaffPath.fill()
            strokeColor11.setStroke()
            tierStaffPath.lineWidth = 1
            tierStaffPath.stroke()
        }


        if (isNPC) {
            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 11.5, y: 3.5))
            bezier4Path.addLine(to: CGPoint(x: 11.5, y: 7.5))
            bezier4Path.addLine(to: CGPoint(x: 11.5, y: 13.5))
            bezier4Path.addLine(to: CGPoint(x: 7.5, y: 10.5))
            bezier4Path.addLine(to: CGPoint(x: 3.5, y: 13.5))
            bezier4Path.addLine(to: CGPoint(x: 3.5, y: 7.5))
            bezier4Path.addLine(to: CGPoint(x: 3.5, y: 3.5))
            bezier4Path.addLine(to: CGPoint(x: 7.5, y: 3.5))
            bezier4Path.addLine(to: CGPoint(x: 11.5, y: 3.5))
            bezier4Path.close()
            fillColor83.setFill()
            bezier4Path.fill()
            strokeColor12.setStroke()
            bezier4Path.lineWidth = 1
            bezier4Path.stroke()
        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawChatLikeIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 12, height: 12), resizing: ResizingBehavior = .aspectFit, wasLiked: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 12, height: 12), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 12, y: resizedFrame.height / 12)


        //// Color Declarations
        let fillColor25 = UIColor(red: 0.882, green: 0.878, blue: 0.890, alpha: 1.000)
        let fillColor82 = UIColor(red: 0.604, green: 0.384, blue: 1.000, alpha: 1.000)

        //// Variable Declarations
        let expression2 = wasLiked ? fillColor82 : fillColor25

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 8.25, y: 7.5))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 9.75), controlPoint1: CGPoint(x: 8.25, y: 8.74), controlPoint2: CGPoint(x: 7.24, y: 9.75))
        bezierPath.addCurve(to: CGPoint(x: 3.75, y: 7.5), controlPoint1: CGPoint(x: 4.76, y: 9.75), controlPoint2: CGPoint(x: 3.75, y: 8.74))
        bezierPath.addLine(to: CGPoint(x: 8.25, y: 7.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9.75, y: 4.88))
        bezierPath.addCurve(to: CGPoint(x: 8.62, y: 6), controlPoint1: CGPoint(x: 9.75, y: 5.5), controlPoint2: CGPoint(x: 9.25, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 7.5, y: 4.88), controlPoint1: CGPoint(x: 8, y: 6), controlPoint2: CGPoint(x: 7.5, y: 5.5))
        bezierPath.addCurve(to: CGPoint(x: 8.62, y: 3.75), controlPoint1: CGPoint(x: 7.5, y: 4.25), controlPoint2: CGPoint(x: 8, y: 3.75))
        bezierPath.addCurve(to: CGPoint(x: 9.75, y: 4.88), controlPoint1: CGPoint(x: 9.25, y: 3.75), controlPoint2: CGPoint(x: 9.75, y: 4.25))
        bezierPath.addLine(to: CGPoint(x: 9.75, y: 4.88))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 4.5, y: 4.88))
        bezierPath.addCurve(to: CGPoint(x: 3.38, y: 6), controlPoint1: CGPoint(x: 4.5, y: 5.5), controlPoint2: CGPoint(x: 4, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 2.25, y: 4.88), controlPoint1: CGPoint(x: 2.75, y: 6), controlPoint2: CGPoint(x: 2.25, y: 5.5))
        bezierPath.addCurve(to: CGPoint(x: 3.38, y: 3.75), controlPoint1: CGPoint(x: 2.25, y: 4.25), controlPoint2: CGPoint(x: 2.75, y: 3.75))
        bezierPath.addCurve(to: CGPoint(x: 4.5, y: 4.88), controlPoint1: CGPoint(x: 4, y: 3.75), controlPoint2: CGPoint(x: 4.5, y: 4.25))
        bezierPath.addLine(to: CGPoint(x: 4.5, y: 4.88))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10.5, y: 0))
        bezierPath.addLine(to: CGPoint(x: 1.5, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 1.5), controlPoint1: CGPoint(x: 0.67, y: 0), controlPoint2: CGPoint(x: 0, y: 0.67))
        bezierPath.addLine(to: CGPoint(x: 0, y: 10.5))
        bezierPath.addCurve(to: CGPoint(x: 1.5, y: 12), controlPoint1: CGPoint(x: 0, y: 11.33), controlPoint2: CGPoint(x: 0.67, y: 12))
        bezierPath.addLine(to: CGPoint(x: 10.5, y: 12))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 10.5), controlPoint1: CGPoint(x: 11.33, y: 12), controlPoint2: CGPoint(x: 12, y: 11.33))
        bezierPath.addLine(to: CGPoint(x: 12, y: 1.5))
        bezierPath.addCurve(to: CGPoint(x: 10.5, y: 0), controlPoint1: CGPoint(x: 12, y: 0.67), controlPoint2: CGPoint(x: 11.33, y: 0))
        bezierPath.addLine(to: CGPoint(x: 10.5, y: 0))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        expression2.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawQuestBackground(frame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21), bossColorDark: UIColor = UIColor(red: 0.764, green: 0.753, blue: 0.781, alpha: 1.000), bossColorMedium: UIColor = UIColor(red: 0.928, green: 0.925, blue: 0.935, alpha: 1.000), bossColorLight: UIColor = UIColor(red: 0.976, green: 0.977, blue: 0.976, alpha: 1.000)) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX + 2, y: frame.minY + frame.height - 8, width: 6, height: 6)
        let group3: CGRect = CGRect(x: frame.minX + frame.width - 8, y: frame.minY + 2, width: 6, height: 6)
        let group4: CGRect = CGRect(x: frame.minX + frame.width - 8, y: frame.minY + frame.height - 8, width: 6, height: 6)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: frame.minX, y: frame.minY, width: fastFloor((frame.width) * 1.00000 + 0.5), height: fastFloor((frame.height) * 1.00000 + 0.5)))
        bossColorMedium.setFill()
        rectanglePath.fill()


        //// Group
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: group.minX, y: group.minY, width: 6, height: 6))
        bossColorLight.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: group.minX + 2, y: group.minY + 2, width: 2, height: 2))
        bossColorDark.setFill()
        rectangle3Path.fill()




        //// Group 2
        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: frame.minX + 2, y: frame.minY + 2, width: 6, height: 6))
        bossColorLight.setFill()
        rectangle4Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: frame.minX + 4, y: frame.minY + 4, width: 2, height: 2))
        bossColorDark.setFill()
        rectangle5Path.fill()




        //// Group 3
        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRect(x: group3.minX, y: group3.minY, width: 6, height: 6))
        bossColorLight.setFill()
        rectangle6Path.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRect(x: group3.minX + 2, y: group3.minY + 2, width: 2, height: 2))
        bossColorDark.setFill()
        rectangle7Path.fill()




        //// Group 4
        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRect(x: group4.minX, y: group4.minY, width: 6, height: 6))
        bossColorLight.setFill()
        rectangle8Path.fill()


        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(rect: CGRect(x: group4.minX + 2, y: group4.minY + 2, width: 2, height: 2))
        bossColorDark.setFill()
        rectangle9Path.fill()




        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRect(x: frame.minX + frame.width - 4, y: frame.minY + 10, width: 2, height: frame.height - 20))
        bossColorLight.setFill()
        rectangle10Path.fill()


        //// Rectangle 11 Drawing
        let rectangle11Path = UIBezierPath(rect: CGRect(x: frame.minX + 10, y: frame.minY + frame.height - 4, width: frame.width - 20, height: 2))
        bossColorLight.setFill()
        rectangle11Path.fill()


        //// Rectangle 12 Drawing
        let rectangle12Path = UIBezierPath(rect: CGRect(x: frame.minX + 10, y: frame.minY + 2, width: frame.width - 20, height: 2))
        bossColorLight.setFill()
        rectangle12Path.fill()


        //// Rectangle 13 Drawing
        let rectangle13Path = UIBezierPath(rect: CGRect(x: frame.minX + 10, y: frame.minY + 4, width: frame.width - 20, height: frame.height - 8))
        bossColorDark.setFill()
        rectangle13Path.fill()


        //// Rectangle 14 Drawing
        let rectangle14Path = UIBezierPath(rect: CGRect(x: frame.minX + 4, y: frame.minY + 10, width: frame.width - 8, height: frame.height - 20))
        bossColorDark.setFill()
        rectangle14Path.fill()


        //// Rectangle 15 Drawing
        let rectangle15Path = UIBezierPath(rect: CGRect(x: frame.minX + 2, y: frame.minY + 10, width: 2, height: frame.height - 20))
        bossColorLight.setFill()
        rectangle15Path.fill()
    }

    @objc dynamic public class func drawDamage(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let fillColor25 = UIColor(red: 0.882, green: 0.878, blue: 0.890, alpha: 1.000)
        let fillColor35 = UIColor(red: 0.765, green: 0.753, blue: 0.780, alpha: 1.000)
        let fillColor37 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor40 = UIColor(red: 0.647, green: 0.631, blue: 0.675, alpha: 1.000)
        let fillColor75 = UIColor(red: 0.529, green: 0.506, blue: 0.565, alpha: 1.000)
        let fillColor84 = UIColor(red: 0.941, green: 0.380, blue: 0.400, alpha: 1.000)
        let fillColor85 = UIColor(red: 0.929, green: 0.925, blue: 0.933, alpha: 1.000)
        let fillColor86 = UIColor(red: 0.835, green: 0.784, blue: 1.000, alpha: 1.000)
        let fillColor87 = UIColor(red: 0.741, green: 0.659, blue: 1.000, alpha: 1.000)
        let fillColor88 = UIColor(red: 0.702, green: 0.384, blue: 0.075, alpha: 1.000)
        let fillColor89 = UIColor(red: 0.890, green: 0.561, blue: 0.239, alpha: 1.000)
        let fillColor90 = UIColor(red: 0.306, green: 0.290, blue: 0.341, alpha: 0.700)

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 11.1, y: 11.16))
        bezierPath.addLine(to: CGPoint(x: 8.73, y: 12.26))
        bezierPath.addCurve(to: CGPoint(x: 8.35, y: 12.74), controlPoint1: CGPoint(x: 8.53, y: 12.35), controlPoint2: CGPoint(x: 8.4, y: 12.53))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 14.37), controlPoint1: CGPoint(x: 8.27, y: 13.1), controlPoint2: CGPoint(x: 8.02, y: 13.93))
        bezierPath.addCurve(to: CGPoint(x: 8.15, y: 14.65), controlPoint1: CGPoint(x: 8, y: 14.48), controlPoint2: CGPoint(x: 8.05, y: 14.59))
        bezierPath.addCurve(to: CGPoint(x: 8.47, y: 14.68), controlPoint1: CGPoint(x: 8.24, y: 14.72), controlPoint2: CGPoint(x: 8.36, y: 14.73))
        bezierPath.addLine(to: CGPoint(x: 12.44, y: 12.78))
        bezierPath.addCurve(to: CGPoint(x: 12.72, y: 12.49), controlPoint1: CGPoint(x: 12.56, y: 12.72), controlPoint2: CGPoint(x: 12.66, y: 12.62))
        bezierPath.addLine(to: CGPoint(x: 14.62, y: 8.53))
        bezierPath.addCurve(to: CGPoint(x: 14.6, y: 8.2), controlPoint1: CGPoint(x: 14.67, y: 8.42), controlPoint2: CGPoint(x: 14.66, y: 8.3))
        bezierPath.addCurve(to: CGPoint(x: 14.31, y: 8.06), controlPoint1: CGPoint(x: 14.53, y: 8.11), controlPoint2: CGPoint(x: 14.42, y: 8.05))
        bezierPath.addCurve(to: CGPoint(x: 12.68, y: 8.41), controlPoint1: CGPoint(x: 13.87, y: 8.08), controlPoint2: CGPoint(x: 13.06, y: 8.32))
        bezierPath.addCurve(to: CGPoint(x: 12.2, y: 8.79), controlPoint1: CGPoint(x: 12.47, y: 8.46), controlPoint2: CGPoint(x: 12.29, y: 8.59))
        bezierPath.addLine(to: CGPoint(x: 11.1, y: 11.16))
        bezierPath.close()
        fillColor84.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 16.85, y: 16.91))
        bezier2Path.addLine(to: CGPoint(x: 15.82, y: 17.93))
        bezier2Path.addLine(to: CGPoint(x: 13.17, y: 17.72))
        bezier2Path.addLine(to: CGPoint(x: 13.03, y: 15.98))
        bezier2Path.addLine(to: CGPoint(x: 11.5, y: 14.45))
        bezier2Path.addLine(to: CGPoint(x: 8.73, y: 15.77))
        bezier2Path.addLine(to: CGPoint(x: 6.65, y: 15.21))
        bezier2Path.addLine(to: CGPoint(x: 7.52, y: 11.47))
        bezier2Path.addLine(to: CGPoint(x: 1.71, y: 6.04))
        bezier2Path.addLine(to: CGPoint(x: 0.59, y: 0.65))
        bezier2Path.addLine(to: CGPoint(x: 0.59, y: 0.65))
        bezier2Path.addLine(to: CGPoint(x: 0.59, y: 0.65))
        bezier2Path.addLine(to: CGPoint(x: 0.59, y: 0.65))
        bezier2Path.addLine(to: CGPoint(x: 5.98, y: 1.76))
        bezier2Path.addLine(to: CGPoint(x: 11.41, y: 7.58))
        bezier2Path.addLine(to: CGPoint(x: 15.15, y: 6.71))
        bezier2Path.addLine(to: CGPoint(x: 15.71, y: 8.79))
        bezier2Path.addLine(to: CGPoint(x: 14.39, y: 11.56))
        bezier2Path.addLine(to: CGPoint(x: 15.92, y: 13.09))
        bezier2Path.addLine(to: CGPoint(x: 17.66, y: 13.22))
        bezier2Path.addLine(to: CGPoint(x: 17.87, y: 15.88))
        bezier2Path.addLine(to: CGPoint(x: 16.85, y: 16.91))
        bezier2Path.addLine(to: CGPoint(x: 16.85, y: 16.91))
        bezier2Path.close()
        fillColor90.setFill()
        bezier2Path.fill()


        //// Rectangle Drawing
        context.saveGState()
        context.translateBy(x: 13.65, y: 13.75)
        context.rotate(by: 45 * CGFloat.pi/180)

        let rectanglePath = UIBezierPath(rect: CGRect(x: -2.33, y: -0.95, width: 4.65, height: 1.9))
        fillColor84.setFill()
        rectanglePath.fill()

        context.restoreGState()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 16.73, y: 15.46))
        bezier3Path.addLine(to: CGPoint(x: 16.64, y: 14.25))
        bezier3Path.addLine(to: CGPoint(x: 15.42, y: 14.15))
        bezier3Path.addLine(to: CGPoint(x: 14.1, y: 15.48))
        bezier3Path.addLine(to: CGPoint(x: 14.19, y: 16.7))
        bezier3Path.addLine(to: CGPoint(x: 15.4, y: 16.79))
        bezier3Path.addLine(to: CGPoint(x: 16.73, y: 15.46))
        bezier3Path.close()
        fillColor84.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 5.27, y: 2.82))
        bezier4Path.addLine(to: CGPoint(x: 5.16, y: 5.22))
        bezier4Path.addLine(to: CGPoint(x: 2.12, y: 2.18))
        bezier4Path.addCurve(to: CGPoint(x: 5.27, y: 2.82), controlPoint1: CGPoint(x: 2.18, y: 2.13), controlPoint2: CGPoint(x: 4.47, y: 2.39))
        bezier4Path.close()
        fillColor37.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 5.33, y: 2.85))
        bezier5Path.addLine(to: CGPoint(x: 11.75, y: 9.59))
        bezier5Path.addLine(to: CGPoint(x: 10.11, y: 10.16))
        bezier5Path.addLine(to: CGPoint(x: 5.16, y: 5.22))
        bezier5Path.addLine(to: CGPoint(x: 5.27, y: 2.82))
        bezier5Path.addLine(to: CGPoint(x: 5.33, y: 2.85))
        bezier5Path.close()
        fillColor85.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 11.75, y: 9.59))
        bezier6Path.addLine(to: CGPoint(x: 11.81, y: 9.65))
        bezier6Path.addLine(to: CGPoint(x: 11.11, y: 11.17))
        bezier6Path.addLine(to: CGPoint(x: 10.11, y: 10.16))
        bezier6Path.addLine(to: CGPoint(x: 11.75, y: 9.59))
        bezier6Path.addLine(to: CGPoint(x: 11.75, y: 9.59))
        bezier6Path.close()
        bezier6Path.move(to: CGPoint(x: 2.77, y: 5.33))
        bezier6Path.addLine(to: CGPoint(x: 5.16, y: 5.22))
        bezier6Path.addLine(to: CGPoint(x: 2.12, y: 2.18))
        bezier6Path.addCurve(to: CGPoint(x: 2.77, y: 5.33), controlPoint1: CGPoint(x: 2.07, y: 2.24), controlPoint2: CGPoint(x: 2.33, y: 4.53))
        bezier6Path.close()
        fillColor85.setFill()
        bezier6Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 2.79, y: 5.39))
        bezier7Path.addLine(to: CGPoint(x: 9.53, y: 11.81))
        bezier7Path.addLine(to: CGPoint(x: 10.11, y: 10.16))
        bezier7Path.addLine(to: CGPoint(x: 5.16, y: 5.22))
        bezier7Path.addLine(to: CGPoint(x: 2.77, y: 5.33))
        bezier7Path.addCurve(to: CGPoint(x: 2.79, y: 5.39), controlPoint1: CGPoint(x: 2.78, y: 5.35), controlPoint2: CGPoint(x: 2.79, y: 5.37))
        bezier7Path.close()
        fillColor25.setFill()
        bezier7Path.fill()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 9.53, y: 11.81))
        bezier8Path.addLine(to: CGPoint(x: 9.59, y: 11.87))
        bezier8Path.addLine(to: CGPoint(x: 11.11, y: 11.17))
        bezier8Path.addLine(to: CGPoint(x: 10.11, y: 10.17))
        bezier8Path.addLine(to: CGPoint(x: 9.53, y: 11.81))
        bezier8Path.addLine(to: CGPoint(x: 9.53, y: 11.81))
        bezier8Path.close()
        fillColor25.setFill()
        bezier8Path.fill()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 15.43, y: 14.15))
        bezier9Path.addLine(to: CGPoint(x: 15.71, y: 15.18))
        bezier9Path.addLine(to: CGPoint(x: 16.64, y: 14.25))
        bezier9Path.addLine(to: CGPoint(x: 15.43, y: 14.15))
        bezier9Path.close()
        bezier9Path.move(to: CGPoint(x: 14.1, y: 15.48))
        bezier9Path.addLine(to: CGPoint(x: 15.13, y: 15.76))
        bezier9Path.addLine(to: CGPoint(x: 14.19, y: 16.69))
        bezier9Path.addLine(to: CGPoint(x: 14.1, y: 15.48))
        bezier9Path.close()
        fillColor86.setFill()
        bezier9Path.fill()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 15.43, y: 14.15))
        bezier10Path.addLine(to: CGPoint(x: 14.1, y: 15.48))
        bezier10Path.addLine(to: CGPoint(x: 15.13, y: 15.76))
        bezier10Path.addLine(to: CGPoint(x: 15.71, y: 15.18))
        bezier10Path.addLine(to: CGPoint(x: 15.43, y: 14.15))
        bezier10Path.close()
        fillColor87.setFill()
        bezier10Path.fill()


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 16.73, y: 15.46))
        bezier11Path.addLine(to: CGPoint(x: 15.7, y: 15.18))
        bezier11Path.addLine(to: CGPoint(x: 16.64, y: 14.25))
        bezier11Path.addLine(to: CGPoint(x: 16.73, y: 15.46))
        bezier11Path.close()
        bezier11Path.move(to: CGPoint(x: 15.41, y: 16.79))
        bezier11Path.addLine(to: CGPoint(x: 15.12, y: 15.76))
        bezier11Path.addLine(to: CGPoint(x: 14.19, y: 16.69))
        bezier11Path.addLine(to: CGPoint(x: 15.41, y: 16.79))
        bezier11Path.close()
        fillColor87.setFill()
        bezier11Path.fill()


        //// Bezier 12 Drawing
        let bezier12Path = UIBezierPath()
        bezier12Path.move(to: CGPoint(x: 16.73, y: 15.46))
        bezier12Path.addLine(to: CGPoint(x: 15.4, y: 16.79))
        bezier12Path.addLine(to: CGPoint(x: 15.12, y: 15.76))
        bezier12Path.addLine(to: CGPoint(x: 15.7, y: 15.18))
        bezier12Path.addLine(to: CGPoint(x: 16.73, y: 15.46))
        bezier12Path.close()
        fillColor86.setFill()
        bezier12Path.fill()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 12.75, y: 12.8)
        context.rotate(by: 45 * CGFloat.pi/180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: -0.58, y: -0.95, width: 1.15, height: 1.9))
        fillColor88.setFill()
        rectangle2Path.fill()

        context.restoreGState()


        //// Rectangle 3 Drawing
        context.saveGState()
        context.translateBy(x: 13.55, y: 13.6)
        context.rotate(by: 45 * CGFloat.pi/180)

        let rectangle3Path = UIBezierPath(rect: CGRect(x: -0.58, y: -0.95, width: 1.15, height: 1.9))
        fillColor89.setFill()
        rectangle3Path.fill()

        context.restoreGState()


        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: 14.35, y: 14.4)
        context.rotate(by: -45 * CGFloat.pi/180)

        let rectangle4Path = UIBezierPath(rect: CGRect(x: -0.95, y: -0.58, width: 1.9, height: 1.15))
        fillColor88.setFill()
        rectangle4Path.fill()

        context.restoreGState()


        //// Bezier 13 Drawing
        let bezier13Path = UIBezierPath()
        bezier13Path.move(to: CGPoint(x: 11.1, y: 11.16))
        bezier13Path.addLine(to: CGPoint(x: 12.2, y: 8.79))
        bezier13Path.addCurve(to: CGPoint(x: 12.37, y: 8.57), controlPoint1: CGPoint(x: 12.24, y: 8.7), controlPoint2: CGPoint(x: 12.3, y: 8.63))
        bezier13Path.addCurve(to: CGPoint(x: 12.68, y: 8.41), controlPoint1: CGPoint(x: 12.46, y: 8.49), controlPoint2: CGPoint(x: 12.57, y: 8.44))
        bezier13Path.addCurve(to: CGPoint(x: 14.31, y: 8.06), controlPoint1: CGPoint(x: 13.06, y: 8.32), controlPoint2: CGPoint(x: 13.87, y: 8.08))
        bezier13Path.addCurve(to: CGPoint(x: 14.58, y: 8.19), controlPoint1: CGPoint(x: 14.41, y: 8.06), controlPoint2: CGPoint(x: 14.51, y: 8.1))
        bezier13Path.addLine(to: CGPoint(x: 12.98, y: 9.55))
        bezier13Path.addLine(to: CGPoint(x: 11.81, y: 11.87))
        bezier13Path.addLine(to: CGPoint(x: 11.1, y: 11.16))
        bezier13Path.addLine(to: CGPoint(x: 11.1, y: 11.16))
        bezier13Path.addLine(to: CGPoint(x: 11.1, y: 11.16))
        bezier13Path.close()
        fillColor35.setFill()
        bezier13Path.fill()


        //// Bezier 14 Drawing
        let bezier14Path = UIBezierPath()
        bezier14Path.move(to: CGPoint(x: 12.98, y: 9.55))
        bezier14Path.addLine(to: CGPoint(x: 14.58, y: 8.19))
        bezier14Path.addCurve(to: CGPoint(x: 14.62, y: 8.53), controlPoint1: CGPoint(x: 14.66, y: 8.28), controlPoint2: CGPoint(x: 14.67, y: 8.41))
        bezier14Path.addLine(to: CGPoint(x: 12.72, y: 12.5))
        bezier14Path.addCurve(to: CGPoint(x: 12.6, y: 12.66), controlPoint1: CGPoint(x: 12.69, y: 12.56), controlPoint2: CGPoint(x: 12.65, y: 12.61))
        bezier14Path.addLine(to: CGPoint(x: 11.81, y: 11.87))
        bezier14Path.addLine(to: CGPoint(x: 12.98, y: 9.55))
        bezier14Path.close()
        bezier14Path.move(to: CGPoint(x: 8, y: 14.37))
        bezier14Path.addCurve(to: CGPoint(x: 8.35, y: 12.74), controlPoint1: CGPoint(x: 8.02, y: 13.93), controlPoint2: CGPoint(x: 8.25, y: 13.12))
        bezier14Path.addCurve(to: CGPoint(x: 8.51, y: 12.43), controlPoint1: CGPoint(x: 8.38, y: 12.63), controlPoint2: CGPoint(x: 8.43, y: 12.52))
        bezier14Path.addCurve(to: CGPoint(x: 8.72, y: 12.26), controlPoint1: CGPoint(x: 8.56, y: 12.36), controlPoint2: CGPoint(x: 8.64, y: 12.3))
        bezier14Path.addLine(to: CGPoint(x: 11.1, y: 11.16))
        bezier14Path.addLine(to: CGPoint(x: 11.1, y: 11.16))
        bezier14Path.addLine(to: CGPoint(x: 11.81, y: 11.87))
        bezier14Path.addLine(to: CGPoint(x: 9.49, y: 13.04))
        bezier14Path.addLine(to: CGPoint(x: 8.12, y: 14.64))
        bezier14Path.addCurve(to: CGPoint(x: 8, y: 14.37), controlPoint1: CGPoint(x: 8.04, y: 14.58), controlPoint2: CGPoint(x: 7.99, y: 14.47))
        bezier14Path.close()
        fillColor40.setFill()
        bezier14Path.fill()


        //// Bezier 15 Drawing
        let bezier15Path = UIBezierPath()
        bezier15Path.move(to: CGPoint(x: 9.49, y: 13.04))
        bezier15Path.addLine(to: CGPoint(x: 8.12, y: 14.64))
        bezier15Path.addCurve(to: CGPoint(x: 8.46, y: 14.68), controlPoint1: CGPoint(x: 8.22, y: 14.72), controlPoint2: CGPoint(x: 8.35, y: 14.73))
        bezier15Path.addLine(to: CGPoint(x: 12.43, y: 12.78))
        bezier15Path.addCurve(to: CGPoint(x: 12.6, y: 12.66), controlPoint1: CGPoint(x: 12.49, y: 12.75), controlPoint2: CGPoint(x: 12.55, y: 12.71))
        bezier15Path.addLine(to: CGPoint(x: 11.81, y: 11.87))
        bezier15Path.addLine(to: CGPoint(x: 9.49, y: 13.04))
        bezier15Path.addLine(to: CGPoint(x: 9.49, y: 13.04))
        bezier15Path.close()
        fillColor75.setFill()
        bezier15Path.fill()


        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 6.23, y: 3.79))
        clipPath.addLine(to: CGPoint(x: 8.78, y: 6.46))
        clipPath.addLine(to: CGPoint(x: 8.78, y: 8.83))
        clipPath.addLine(to: CGPoint(x: 6.23, y: 6.29))
        clipPath.addLine(to: CGPoint(x: 6.23, y: 3.79))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Bezier 16 Drawing
        let bezier16Path = UIBezierPath()
        bezier16Path.move(to: CGPoint(x: 8.78, y: 4.22))
        bezier16Path.addCurve(to: CGPoint(x: 8.78, y: 9), controlPoint1: CGPoint(x: 8.78, y: 4.21), controlPoint2: CGPoint(x: 8.78, y: 7.06))
        bezier16Path.addLine(to: CGPoint(x: 7.68, y: 9))
        bezier16Path.addCurve(to: CGPoint(x: 7.68, y: 4.22), controlPoint1: CGPoint(x: 7.68, y: 7.06), controlPoint2: CGPoint(x: 7.68, y: 4.22))
        bezier16Path.addLine(to: CGPoint(x: 8.78, y: 4.22))
        bezier16Path.addLine(to: CGPoint(x: 8.78, y: 4.22))
        bezier16Path.close()
        bezier16Path.move(to: CGPoint(x: 6.95, y: 8.96))
        bezier16Path.addLine(to: CGPoint(x: 6.58, y: 9))
        bezier16Path.addCurve(to: CGPoint(x: 6.58, y: 3), controlPoint1: CGPoint(x: 6.58, y: 8.3), controlPoint2: CGPoint(x: 6.58, y: 4.34))
        bezier16Path.addLine(to: CGPoint(x: 6.95, y: 3))
        bezier16Path.addCurve(to: CGPoint(x: 6.95, y: 9), controlPoint1: CGPoint(x: 6.95, y: 4.34), controlPoint2: CGPoint(x: 6.95, y: 8.3))
        bezier16Path.addLine(to: CGPoint(x: 6.95, y: 8.96))
        bezier16Path.close()
        fillColor37.setFill()
        bezier16Path.fill()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCaret(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit, caretColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), pointsUp: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)



        //// Variable Declarations
        let caretRotation: CGFloat = pointsUp ? 180 : 0

        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 8, y: 8)
        context.rotate(by: -caretRotation * CGFloat.pi/180)

        context.saveGState()
        context.setAlpha(0.54)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 4.6, y: -3.7))
        bezierPath.addLine(to: CGPoint(x: 6, y: -2.3))
        bezierPath.addLine(to: CGPoint(x: 0, y: 3.7))
        bezierPath.addLine(to: CGPoint(x: -6, y: -2.3))
        bezierPath.addLine(to: CGPoint(x: -4.6, y: -3.7))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0.9))
        bezierPath.addLine(to: CGPoint(x: 4.6, y: -3.7))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        caretColor.setFill()
        bezierPath.fill()

        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawRageStrikeInactive(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 63, height: 82), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 63, height: 82), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 63, y: resizedFrame.height / 82)


        //// Color Declarations
        let fillColor91 = UIColor(red: 1.000, green: 0.784, blue: 0.655, alpha: 1.000)
        let strokeColor13 = UIColor(red: 0.957, green: 0.471, blue: 0.145, alpha: 1.000)
        let strokeColor14 = UIColor(red: 1.000, green: 0.580, blue: 0.298, alpha: 1.000)
        let textForeground = UIColor(red: 0.718, green: 0.353, blue: 0.110, alpha: 1.000)

        //// Group 3
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 17, y: 48.08))
        bezier2Path.addLine(to: CGPoint(x: 21.6, y: 41))
        bezier2Path.addLine(to: CGPoint(x: 17, y: 33.92))
        bezier2Path.addLine(to: CGPoint(x: 31, y: 21))
        bezier2Path.addLine(to: CGPoint(x: 45, y: 33.92))
        bezier2Path.addLine(to: CGPoint(x: 40.4, y: 41))
        bezier2Path.addLine(to: CGPoint(x: 45, y: 48.08))
        bezier2Path.addLine(to: CGPoint(x: 31, y: 61))
        bezier2Path.addLine(to: CGPoint(x: 17, y: 48.08))
        bezier2Path.close()
        strokeColor13.setStroke()
        bezier2Path.lineWidth = 16
        bezier2Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 17, y: 48.08))
        bezier4Path.addLine(to: CGPoint(x: 21.6, y: 41))
        bezier4Path.addLine(to: CGPoint(x: 17, y: 33.92))
        bezier4Path.addLine(to: CGPoint(x: 31, y: 21))
        bezier4Path.addLine(to: CGPoint(x: 45, y: 33.92))
        bezier4Path.addLine(to: CGPoint(x: 40.4, y: 41))
        bezier4Path.addLine(to: CGPoint(x: 45, y: 48.08))
        bezier4Path.addLine(to: CGPoint(x: 31, y: 61))
        bezier4Path.addLine(to: CGPoint(x: 17, y: 48.08))
        bezier4Path.close()
        strokeColor14.setStroke()
        bezier4Path.lineWidth = 8
        bezier4Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 17, y: 48.08))
        bezierPath.addLine(to: CGPoint(x: 21.6, y: 41))
        bezierPath.addLine(to: CGPoint(x: 17, y: 33.92))
        bezierPath.addLine(to: CGPoint(x: 31, y: 21))
        bezierPath.addLine(to: CGPoint(x: 45, y: 33.92))
        bezierPath.addLine(to: CGPoint(x: 40.4, y: 41))
        bezierPath.addLine(to: CGPoint(x: 45, y: 48.08))
        bezierPath.addLine(to: CGPoint(x: 31, y: 61))
        bezierPath.addLine(to: CGPoint(x: 17, y: 48.08))
        bezierPath.close()
        fillColor91.setFill()
        bezierPath.fill()


        //// Label Drawing
        let labelPath = UIBezierPath()
        labelPath.move(to: CGPoint(x: 30.36, y: 46.78))
        labelPath.addLine(to: CGPoint(x: 30.36, y: 49))
        labelPath.addLine(to: CGPoint(x: 32.58, y: 49))
        labelPath.addLine(to: CGPoint(x: 32.58, y: 46.78))
        labelPath.addLine(to: CGPoint(x: 30.36, y: 46.78))
        labelPath.close()
        labelPath.move(to: CGPoint(x: 27.1, y: 39.18))
        labelPath.addLine(to: CGPoint(x: 28.8, y: 39.18))
        labelPath.addCurve(to: CGPoint(x: 28.96, y: 37.88), controlPoint1: CGPoint(x: 28.8, y: 38.71), controlPoint2: CGPoint(x: 28.85, y: 38.28))
        labelPath.addCurve(to: CGPoint(x: 29.47, y: 36.84), controlPoint1: CGPoint(x: 29.07, y: 37.48), controlPoint2: CGPoint(x: 29.24, y: 37.13))
        labelPath.addCurve(to: CGPoint(x: 30.34, y: 36.14), controlPoint1: CGPoint(x: 29.7, y: 36.55), controlPoint2: CGPoint(x: 29.99, y: 36.31))
        labelPath.addCurve(to: CGPoint(x: 31.58, y: 35.88), controlPoint1: CGPoint(x: 30.69, y: 35.97), controlPoint2: CGPoint(x: 31.1, y: 35.88))
        labelPath.addCurve(to: CGPoint(x: 33.29, y: 36.5), controlPoint1: CGPoint(x: 32.3, y: 35.88), controlPoint2: CGPoint(x: 32.87, y: 36.09))
        labelPath.addCurve(to: CGPoint(x: 34, y: 38.22), controlPoint1: CGPoint(x: 33.71, y: 36.91), controlPoint2: CGPoint(x: 33.95, y: 37.49))
        labelPath.addCurve(to: CGPoint(x: 33.82, y: 39.48), controlPoint1: CGPoint(x: 34.03, y: 38.71), controlPoint2: CGPoint(x: 33.97, y: 39.13))
        labelPath.addCurve(to: CGPoint(x: 33.23, y: 40.43), controlPoint1: CGPoint(x: 33.67, y: 39.83), controlPoint2: CGPoint(x: 33.48, y: 40.14))
        labelPath.addCurve(to: CGPoint(x: 32.43, y: 41.25), controlPoint1: CGPoint(x: 32.98, y: 40.72), controlPoint2: CGPoint(x: 32.72, y: 40.99))
        labelPath.addCurve(to: CGPoint(x: 31.61, y: 42.1), controlPoint1: CGPoint(x: 32.14, y: 41.51), controlPoint2: CGPoint(x: 31.87, y: 41.79))
        labelPath.addCurve(to: CGPoint(x: 30.95, y: 43.15), controlPoint1: CGPoint(x: 31.35, y: 42.41), controlPoint2: CGPoint(x: 31.13, y: 42.76))
        labelPath.addCurve(to: CGPoint(x: 30.64, y: 44.58), controlPoint1: CGPoint(x: 30.77, y: 43.54), controlPoint2: CGPoint(x: 30.67, y: 44.02))
        labelPath.addLine(to: CGPoint(x: 30.64, y: 45.52))
        labelPath.addLine(to: CGPoint(x: 32.34, y: 45.52))
        labelPath.addLine(to: CGPoint(x: 32.34, y: 44.74))
        labelPath.addCurve(to: CGPoint(x: 32.49, y: 43.81), controlPoint1: CGPoint(x: 32.34, y: 44.39), controlPoint2: CGPoint(x: 32.39, y: 44.08))
        labelPath.addCurve(to: CGPoint(x: 32.89, y: 43.05), controlPoint1: CGPoint(x: 32.59, y: 43.54), controlPoint2: CGPoint(x: 32.72, y: 43.28))
        labelPath.addCurve(to: CGPoint(x: 33.45, y: 42.39), controlPoint1: CGPoint(x: 33.06, y: 42.82), controlPoint2: CGPoint(x: 33.24, y: 42.6))
        labelPath.addCurve(to: CGPoint(x: 34.08, y: 41.78), controlPoint1: CGPoint(x: 33.66, y: 42.18), controlPoint2: CGPoint(x: 33.87, y: 41.98))
        labelPath.addCurve(to: CGPoint(x: 34.71, y: 41.12), controlPoint1: CGPoint(x: 34.29, y: 41.57), controlPoint2: CGPoint(x: 34.5, y: 41.35))
        labelPath.addCurve(to: CGPoint(x: 35.26, y: 40.38), controlPoint1: CGPoint(x: 34.92, y: 40.89), controlPoint2: CGPoint(x: 35.1, y: 40.65))
        labelPath.addCurve(to: CGPoint(x: 35.65, y: 39.49), controlPoint1: CGPoint(x: 35.42, y: 40.11), controlPoint2: CGPoint(x: 35.55, y: 39.82))
        labelPath.addCurve(to: CGPoint(x: 35.8, y: 38.38), controlPoint1: CGPoint(x: 35.75, y: 39.16), controlPoint2: CGPoint(x: 35.8, y: 38.79))
        labelPath.addCurve(to: CGPoint(x: 35.49, y: 36.68), controlPoint1: CGPoint(x: 35.8, y: 37.74), controlPoint2: CGPoint(x: 35.7, y: 37.17))
        labelPath.addCurve(to: CGPoint(x: 34.62, y: 35.43), controlPoint1: CGPoint(x: 35.28, y: 36.19), controlPoint2: CGPoint(x: 34.99, y: 35.77))
        labelPath.addCurve(to: CGPoint(x: 33.29, y: 34.65), controlPoint1: CGPoint(x: 34.25, y: 35.09), controlPoint2: CGPoint(x: 33.8, y: 34.83))
        labelPath.addCurve(to: CGPoint(x: 31.58, y: 34.38), controlPoint1: CGPoint(x: 32.78, y: 34.47), controlPoint2: CGPoint(x: 32.21, y: 34.38))
        labelPath.addCurve(to: CGPoint(x: 29.7, y: 34.74), controlPoint1: CGPoint(x: 30.89, y: 34.38), controlPoint2: CGPoint(x: 30.26, y: 34.5))
        labelPath.addCurve(to: CGPoint(x: 28.28, y: 35.75), controlPoint1: CGPoint(x: 29.14, y: 34.98), controlPoint2: CGPoint(x: 28.67, y: 35.32))
        labelPath.addCurve(to: CGPoint(x: 27.39, y: 37.28), controlPoint1: CGPoint(x: 27.89, y: 36.18), controlPoint2: CGPoint(x: 27.6, y: 36.69))
        labelPath.addCurve(to: CGPoint(x: 27.1, y: 39.18), controlPoint1: CGPoint(x: 27.18, y: 37.87), controlPoint2: CGPoint(x: 27.09, y: 38.5))
        labelPath.close()
        textForeground.setFill()
        labelPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawRageStrikeActive(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 63, height: 82), resizing: ResizingBehavior = .aspectFit, rageStrikeNPC: UIImage) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 63, height: 82), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 63, y: resizedFrame.height / 82)


        //// Color Declarations
        let strokeColor13 = UIColor(red: 0.957, green: 0.471, blue: 0.145, alpha: 1.000)
        let strokeColor14 = UIColor(red: 1.000, green: 0.580, blue: 0.298, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.39, y: 51.5))
        bezierPath.addLine(to: CGPoint(x: 17.28, y: 40.89))
        bezierPath.addLine(to: CGPoint(x: 10.39, y: 30.27))
        bezierPath.addLine(to: CGPoint(x: 31.39, y: 10.89))
        bezierPath.addLine(to: CGPoint(x: 52.39, y: 30.27))
        bezierPath.addLine(to: CGPoint(x: 45.49, y: 40.89))
        bezierPath.addLine(to: CGPoint(x: 52.39, y: 51.5))
        bezierPath.addLine(to: CGPoint(x: 31.39, y: 70.89))
        bezierPath.addLine(to: CGPoint(x: 10.39, y: 51.5))
        bezierPath.close()
        strokeColor13.setStroke()
        bezierPath.lineWidth = 16
        bezierPath.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 10.39, y: 51.5))
        bezier3Path.addLine(to: CGPoint(x: 17.28, y: 40.89))
        bezier3Path.addLine(to: CGPoint(x: 10.39, y: 30.27))
        bezier3Path.addLine(to: CGPoint(x: 31.39, y: 10.89))
        bezier3Path.addLine(to: CGPoint(x: 52.39, y: 30.27))
        bezier3Path.addLine(to: CGPoint(x: 45.49, y: 40.89))
        bezier3Path.addLine(to: CGPoint(x: 52.39, y: 51.5))
        bezier3Path.addLine(to: CGPoint(x: 31.39, y: 70.89))
        bezier3Path.addLine(to: CGPoint(x: 10.39, y: 51.5))
        bezier3Path.close()
        strokeColor14.setStroke()
        bezier3Path.lineWidth = 8
        bezier3Path.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 10, y: 51.61))
        bezier2Path.addLine(to: CGPoint(x: 16.9, y: 41))
        bezier2Path.addLine(to: CGPoint(x: 10, y: 30.39))
        bezier2Path.addLine(to: CGPoint(x: 31, y: 11))
        bezier2Path.addLine(to: CGPoint(x: 52, y: 30.39))
        bezier2Path.addLine(to: CGPoint(x: 45.1, y: 41))
        bezier2Path.addLine(to: CGPoint(x: 52, y: 51.61))
        bezier2Path.addLine(to: CGPoint(x: 31, y: 71))
        bezier2Path.addLine(to: CGPoint(x: 10, y: 51.61))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        context.translateBy(x: -17, y: -7)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -rageStrikeNPC.size.height)
        context.draw(rageStrikeNPC.cgImage!, in: CGRect(x: 0, y: 0, width: rageStrikeNPC.size.width, height: rageStrikeNPC.size.height))
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawRage(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.500)
        let fillColor5 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.250)
        let fillColor14 = UIColor(red: 0.141, green: 0.800, blue: 0.561, alpha: 1.000)
        let fillColor15 = UIColor(red: 0.106, green: 0.600, blue: 0.420, alpha: 0.350)
        let fillColor92 = UIColor(red: 0.353, green: 0.894, blue: 0.698, alpha: 1.000)
        let fillColor93 = UIColor(red: 0.957, green: 0.471, blue: 0.145, alpha: 1.000)
        let fillColor94 = UIColor(red: 0.706, green: 0.349, blue: 0.106, alpha: 0.350)

        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 2, y: 7))
        bezierPath.addLine(to: CGPoint(x: 8.67, y: 1))
        bezierPath.addLine(to: CGPoint(x: 15.33, y: 7))
        bezierPath.addLine(to: CGPoint(x: 8.67, y: 17))
        bezierPath.addLine(to: CGPoint(x: 2, y: 7))
        bezierPath.close()
        fillColor14.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 2, y: 7))
        bezier2Path.addLine(to: CGPoint(x: 8.67, y: 1))
        bezier2Path.addLine(to: CGPoint(x: 15.33, y: 7))
        bezier2Path.addLine(to: CGPoint(x: 8.67, y: 17))
        bezier2Path.addLine(to: CGPoint(x: 2, y: 7))
        bezier2Path.close()
        fillColor14.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 13.6, y: 7.2))
        bezier3Path.addLine(to: CGPoint(x: 8.67, y: 6.2))
        bezier3Path.addLine(to: CGPoint(x: 8.67, y: 2.8))
        bezier3Path.addLine(to: CGPoint(x: 13.6, y: 7.2))
        bezier3Path.close()
        fillColor5.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 8.67, y: 6.2))
        bezier4Path.addLine(to: CGPoint(x: 3.73, y: 7.2))
        bezier4Path.addLine(to: CGPoint(x: 8.67, y: 2.8))
        bezier4Path.addLine(to: CGPoint(x: 8.67, y: 6.2))
        bezier4Path.close()
        fillColor3.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 8.67, y: 6.2))
        bezier5Path.addLine(to: CGPoint(x: 8.67, y: 14.6))
        bezier5Path.addLine(to: CGPoint(x: 3.73, y: 7.2))
        bezier5Path.addLine(to: CGPoint(x: 8.67, y: 6.2))
        bezier5Path.close()
        fillColor92.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 13.6, y: 7.2))
        bezier6Path.addLine(to: CGPoint(x: 8.67, y: 14.6))
        bezier6Path.addLine(to: CGPoint(x: 8.67, y: 6.2))
        bezier6Path.addLine(to: CGPoint(x: 13.6, y: 7.2))
        bezier6Path.close()
        fillColor15.setFill()
        bezier6Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 15.33, y: 7))
        bezier7Path.addLine(to: CGPoint(x: 8.67, y: 1))
        bezier7Path.addLine(to: CGPoint(x: 2, y: 7))
        bezier7Path.addLine(to: CGPoint(x: 3.33, y: 9))
        bezier7Path.addLine(to: CGPoint(x: 2, y: 11))
        bezier7Path.addLine(to: CGPoint(x: 8.67, y: 17))
        bezier7Path.addLine(to: CGPoint(x: 15.33, y: 11))
        bezier7Path.addLine(to: CGPoint(x: 14, y: 9))
        bezier7Path.addLine(to: CGPoint(x: 15.33, y: 7))
        bezier7Path.close()
        fillColor93.setFill()
        bezier7Path.fill()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 13.6, y: 7.2))
        bezier8Path.addLine(to: CGPoint(x: 8.67, y: 6.2))
        bezier8Path.addLine(to: CGPoint(x: 8.67, y: 2.8))
        bezier8Path.addLine(to: CGPoint(x: 13.6, y: 7.2))
        bezier8Path.close()
        fillColor5.setFill()
        bezier8Path.fill()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 8.67, y: 6.2))
        bezier9Path.addLine(to: CGPoint(x: 3.73, y: 7.2))
        bezier9Path.addLine(to: CGPoint(x: 8.67, y: 2.8))
        bezier9Path.addLine(to: CGPoint(x: 8.67, y: 6.2))
        bezier9Path.close()
        fillColor3.setFill()
        bezier9Path.fill()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 8.67, y: 6.2))
        bezier10Path.addLine(to: CGPoint(x: 8.67, y: 14.6))
        bezier10Path.addLine(to: CGPoint(x: 7.37, y: 12.65))
        bezier10Path.addLine(to: CGPoint(x: 3.73, y: 7.2))
        bezier10Path.addLine(to: CGPoint(x: 8.67, y: 6.2))
        bezier10Path.close()
        bezier10Path.move(to: CGPoint(x: 8.67, y: 11.8))
        bezier10Path.addLine(to: CGPoint(x: 8.67, y: 3.4))
        bezier10Path.addLine(to: CGPoint(x: 9.96, y: 5.35))
        bezier10Path.addLine(to: CGPoint(x: 13.6, y: 10.8))
        bezier10Path.addLine(to: CGPoint(x: 8.67, y: 11.8))
        bezier10Path.close()
        fillColor5.setFill()
        bezier10Path.fill()


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 13.6, y: 7.2))
        bezier11Path.addLine(to: CGPoint(x: 8.67, y: 14.6))
        bezier11Path.addLine(to: CGPoint(x: 8.67, y: 6.2))
        bezier11Path.addLine(to: CGPoint(x: 13.6, y: 7.2))
        bezier11Path.close()
        bezier11Path.move(to: CGPoint(x: 3.73, y: 10.8))
        bezier11Path.addLine(to: CGPoint(x: 8.67, y: 11.8))
        bezier11Path.addLine(to: CGPoint(x: 8.67, y: 15.2))
        bezier11Path.addLine(to: CGPoint(x: 3.73, y: 10.8))
        bezier11Path.close()
        fillColor94.setFill()
        bezier11Path.fill()


        //// Bezier 12 Drawing
        let bezier12Path = UIBezierPath()
        bezier12Path.move(to: CGPoint(x: 8.67, y: 11.8))
        bezier12Path.addLine(to: CGPoint(x: 13.6, y: 10.8))
        bezier12Path.addLine(to: CGPoint(x: 8.67, y: 15.2))
        bezier12Path.addLine(to: CGPoint(x: 8.67, y: 11.8))
        bezier12Path.close()
        fillColor3.setFill()
        bezier12Path.fill()


        //// Bezier 13 Drawing
        let bezier13Path = UIBezierPath()
        bezier13Path.move(to: CGPoint(x: 3.73, y: 10.8))
        bezier13Path.addLine(to: CGPoint(x: 8.67, y: 3.4))
        bezier13Path.addLine(to: CGPoint(x: 8.67, y: 11.8))
        bezier13Path.addLine(to: CGPoint(x: 3.73, y: 10.8))
        bezier13Path.close()
        fillColor5.setFill()
        bezier13Path.fill()


        //// Bezier 14 Drawing
        let bezier14Path = UIBezierPath()
        bezier14Path.move(to: CGPoint(x: 5.5, y: 10.53))
        bezier14Path.addLine(to: CGPoint(x: 6.54, y: 9))
        bezier14Path.addLine(to: CGPoint(x: 5.5, y: 7.47))
        bezier14Path.addLine(to: CGPoint(x: 8.67, y: 4.67))
        bezier14Path.addLine(to: CGPoint(x: 11.83, y: 7.47))
        bezier14Path.addLine(to: CGPoint(x: 10.79, y: 9))
        bezier14Path.addLine(to: CGPoint(x: 11.83, y: 10.53))
        bezier14Path.addLine(to: CGPoint(x: 8.67, y: 13.33))
        bezier14Path.addLine(to: CGPoint(x: 5.5, y: 10.53))
        bezier14Path.close()
        fillColor3.setFill()
        bezier14Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawTaskDifficultyStars(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit, taskTintColor: UIColor = UIColor(red: 0.380, green: 0.200, blue: 0.706, alpha: 1.000), difficulty: CGFloat = 2, isActive: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)



        //// Variable Declarations
        let isTrivial = difficulty == 0.1
        let isEasy = difficulty == 1
        let isMedium = difficulty == 1.5
        let isHard = difficulty == 2

        if (isEasy) {
            //// Group
            //// Symbol 2 Drawing
            let symbol2Rect = CGRect(x: 0, y: 9, width: 16, height: 16)
            context.saveGState()
            context.clip(to: symbol2Rect)
            context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

            HabiticaIcons.drawTaskFormDifficultyStar(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, taskTintColor: taskTintColor, isActive: isActive)
            context.restoreGState()


            //// Symbol 3 Drawing
            let symbol3Rect = CGRect(x: 20, y: 9, width: 16, height: 16)
            context.saveGState()
            context.clip(to: symbol3Rect)
            context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

            HabiticaIcons.drawTaskFormDifficultyStar(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, taskTintColor: taskTintColor, isActive: isActive)
            context.restoreGState()


        }


        if (isMedium) {
            //// Group 2
            //// Symbol 4 Drawing
            let symbol4Rect = CGRect(x: 10, y: 0, width: 16, height: 16)
            context.saveGState()
            context.clip(to: symbol4Rect)
            context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

            HabiticaIcons.drawTaskFormDifficultyStar(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch, taskTintColor: taskTintColor, isActive: isActive)
            context.restoreGState()


            //// Symbol 5 Drawing
            let symbol5Rect = CGRect(x: 20, y: 13, width: 16, height: 16)
            context.saveGState()
            context.clip(to: symbol5Rect)
            context.translateBy(x: symbol5Rect.minX, y: symbol5Rect.minY)

            HabiticaIcons.drawTaskFormDifficultyStar(frame: CGRect(origin: .zero, size: symbol5Rect.size), resizing: .stretch, taskTintColor: taskTintColor, isActive: isActive)
            context.restoreGState()


            //// Symbol 6 Drawing
            let symbol6Rect = CGRect(x: 0, y: 13, width: 16, height: 16)
            context.saveGState()
            context.clip(to: symbol6Rect)
            context.translateBy(x: symbol6Rect.minX, y: symbol6Rect.minY)

            HabiticaIcons.drawTaskFormDifficultyStar(frame: CGRect(origin: .zero, size: symbol6Rect.size), resizing: .stretch, taskTintColor: taskTintColor, isActive: isActive)
            context.restoreGState()


        }


        if (isHard) {
            //// Group 3
            //// Symbol 7 Drawing
            let symbol7Rect = CGRect(x: 0, y: 0, width: 16, height: 16)
            context.saveGState()
            context.clip(to: symbol7Rect)
            context.translateBy(x: symbol7Rect.minX, y: symbol7Rect.minY)

            HabiticaIcons.drawTaskFormDifficultyStar(frame: CGRect(origin: .zero, size: symbol7Rect.size), resizing: .stretch, taskTintColor: taskTintColor, isActive: isActive)
            context.restoreGState()


            //// Symbol 8 Drawing
            let symbol8Rect = CGRect(x: 20, y: 0, width: 16, height: 16)
            context.saveGState()
            context.clip(to: symbol8Rect)
            context.translateBy(x: symbol8Rect.minX, y: symbol8Rect.minY)

            HabiticaIcons.drawTaskFormDifficultyStar(frame: CGRect(origin: .zero, size: symbol8Rect.size), resizing: .stretch, taskTintColor: taskTintColor, isActive: isActive)
            context.restoreGState()


            //// Symbol 9 Drawing
            let symbol9Rect = CGRect(x: 0, y: 20, width: 16, height: 16)
            context.saveGState()
            context.clip(to: symbol9Rect)
            context.translateBy(x: symbol9Rect.minX, y: symbol9Rect.minY)

            HabiticaIcons.drawTaskFormDifficultyStar(frame: CGRect(origin: .zero, size: symbol9Rect.size), resizing: .stretch, taskTintColor: taskTintColor, isActive: isActive)
            context.restoreGState()


            //// Symbol 10 Drawing
            let symbol10Rect = CGRect(x: 20, y: 20, width: 16, height: 16)
            context.saveGState()
            context.clip(to: symbol10Rect)
            context.translateBy(x: symbol10Rect.minX, y: symbol10Rect.minY)

            HabiticaIcons.drawTaskFormDifficultyStar(frame: CGRect(origin: .zero, size: symbol10Rect.size), resizing: .stretch, taskTintColor: taskTintColor, isActive: isActive)
            context.restoreGState()


        }


        if (isTrivial) {
            //// Symbol Drawing
            let symbolRect = CGRect(x: 10, y: 9, width: 16, height: 16)
            context.saveGState()
            context.clip(to: symbolRect)
            context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

            HabiticaIcons.drawTaskFormDifficultyStar(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, taskTintColor: taskTintColor, isActive: isActive)
            context.restoreGState()
        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawTaskFormDifficultyStar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit, taskTintColor: UIColor = UIColor(red: 0.380, green: 0.200, blue: 0.706, alpha: 1.000), isActive: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)


        //// Color Declarations
        let strokeColor15 = UIColor(red: 0.765, green: 0.753, blue: 0.780, alpha: 1.000)
        let transparent = UIColor(red: 0.800, green: 0.322, blue: 0.322, alpha: 0.000)

        //// Variable Declarations
        let starFillColor = isActive ? taskTintColor : transparent
        let borderColor = isActive ? taskTintColor : strokeColor15

        //// Star 3 Drawing
        let star3Path = UIBezierPath()
        star3Path.move(to: CGPoint(x: 8, y: 1))
        star3Path.addLine(to: CGPoint(x: 10.33, y: 5.67))
        star3Path.addLine(to: CGPoint(x: 15, y: 8))
        star3Path.addLine(to: CGPoint(x: 10.33, y: 10.33))
        star3Path.addLine(to: CGPoint(x: 8, y: 15))
        star3Path.addLine(to: CGPoint(x: 5.67, y: 10.33))
        star3Path.addLine(to: CGPoint(x: 1, y: 8))
        star3Path.addLine(to: CGPoint(x: 5.67, y: 5.67))
        star3Path.close()
        starFillColor.setFill()
        star3Path.fill()
        borderColor.setStroke()
        star3Path.lineWidth = 1
        star3Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHabitControlPlus(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 34, height: 34), resizing: ResizingBehavior = .aspectFit, taskTintColor: UIColor = UIColor(red: 0.380, green: 0.200, blue: 0.706, alpha: 1.000), isActive: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 34, height: 34), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 34, y: resizedFrame.height / 34)


        //// Color Declarations
        let fillColor37 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let strokeColor15 = UIColor(red: 0.765, green: 0.753, blue: 0.780, alpha: 1.000)
        let transparent = UIColor(red: 0.800, green: 0.322, blue: 0.322, alpha: 0.000)

        //// Variable Declarations
        let starFillColor = isActive ? taskTintColor : transparent
        let borderColor = isActive ? taskTintColor : strokeColor15
        let controlFillColor = isActive ? fillColor37 : strokeColor15

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 1, y: 1, width: 32, height: 32))
        starFillColor.setFill()
        ovalPath.fill()
        borderColor.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16, y: 16))
        bezierPath.addLine(to: CGPoint(x: 16, y: 10))
        bezierPath.addLine(to: CGPoint(x: 18, y: 10))
        bezierPath.addLine(to: CGPoint(x: 18, y: 16))
        bezierPath.addLine(to: CGPoint(x: 24, y: 16))
        bezierPath.addLine(to: CGPoint(x: 24, y: 18))
        bezierPath.addLine(to: CGPoint(x: 18, y: 18))
        bezierPath.addLine(to: CGPoint(x: 18, y: 24))
        bezierPath.addLine(to: CGPoint(x: 16, y: 24))
        bezierPath.addLine(to: CGPoint(x: 16, y: 18))
        bezierPath.addLine(to: CGPoint(x: 10, y: 18))
        bezierPath.addLine(to: CGPoint(x: 10, y: 16))
        bezierPath.addLine(to: CGPoint(x: 16, y: 16))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        controlFillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHabitControlMinus(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 34, height: 34), resizing: ResizingBehavior = .aspectFit, taskTintColor: UIColor = UIColor(red: 0.380, green: 0.200, blue: 0.706, alpha: 1.000), isActive: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 34, height: 34), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 34, y: resizedFrame.height / 34)


        //// Color Declarations
        let fillColor37 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let strokeColor15 = UIColor(red: 0.765, green: 0.753, blue: 0.780, alpha: 1.000)
        let transparent = UIColor(red: 0.800, green: 0.322, blue: 0.322, alpha: 0.000)

        //// Variable Declarations
        let starFillColor = isActive ? taskTintColor : transparent
        let borderColor = isActive ? taskTintColor : strokeColor15
        let controlFillColor = isActive ? fillColor37 : strokeColor15

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 1, y: 1, width: 32, height: 32))
        starFillColor.setFill()
        ovalPath.fill()
        borderColor.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 10, y: 17.96))
        bezier2Path.addLine(to: CGPoint(x: 24, y: 17.96))
        bezier2Path.addLine(to: CGPoint(x: 24, y: 16))
        bezier2Path.addLine(to: CGPoint(x: 10, y: 16))
        bezier2Path.usesEvenOddFillRule = true
        controlFillColor.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawLocked(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 17), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 15, height: 17), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 15, y: resizedFrame.height / 17)


        //// Color Declarations
        let fillColor35 = UIColor(red: 0.765, green: 0.753, blue: 0.780, alpha: 1.000)
        let strokeColor15 = UIColor(red: 0.765, green: 0.753, blue: 0.780, alpha: 1.000)

        //// Group 3
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 6, y: 10, width: 3, height: 3))
        fillColor35.setFill()
        rectanglePath.fill()


        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 2, y: 6))
        clipPath.addLine(to: CGPoint(x: 13, y: 6))
        clipPath.addCurve(to: CGPoint(x: 15, y: 8), controlPoint1: CGPoint(x: 14.1, y: 6), controlPoint2: CGPoint(x: 15, y: 6.9))
        clipPath.addLine(to: CGPoint(x: 15, y: 15))
        clipPath.addCurve(to: CGPoint(x: 13, y: 17), controlPoint1: CGPoint(x: 15, y: 16.1), controlPoint2: CGPoint(x: 14.1, y: 17))
        clipPath.addLine(to: CGPoint(x: 2, y: 17))
        clipPath.addCurve(to: CGPoint(x: 0, y: 15), controlPoint1: CGPoint(x: 0.9, y: 17), controlPoint2: CGPoint(x: 0, y: 16.1))
        clipPath.addLine(to: CGPoint(x: 0, y: 8))
        clipPath.addCurve(to: CGPoint(x: 2, y: 6), controlPoint1: CGPoint(x: 0, y: 6.9), controlPoint2: CGPoint(x: 0.9, y: 6))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 2, y: 6))
        bezierPath.addLine(to: CGPoint(x: 13, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 8), controlPoint1: CGPoint(x: 14.1, y: 6), controlPoint2: CGPoint(x: 15, y: 6.9))
        bezierPath.addLine(to: CGPoint(x: 15, y: 15))
        bezierPath.addCurve(to: CGPoint(x: 13, y: 17), controlPoint1: CGPoint(x: 15, y: 16.1), controlPoint2: CGPoint(x: 14.1, y: 17))
        bezierPath.addLine(to: CGPoint(x: 2, y: 17))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 15), controlPoint1: CGPoint(x: 0.9, y: 17), controlPoint2: CGPoint(x: 0, y: 16.1))
        bezierPath.addLine(to: CGPoint(x: 0, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 6), controlPoint1: CGPoint(x: 0, y: 6.9), controlPoint2: CGPoint(x: 0.9, y: 6))
        bezierPath.close()
        strokeColor15.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 7.5, y: 0))
        clip2Path.addLine(to: CGPoint(x: 7.5, y: 0))
        clip2Path.addCurve(to: CGPoint(x: 13, y: 5.5), controlPoint1: CGPoint(x: 10.54, y: 0), controlPoint2: CGPoint(x: 13, y: 2.46))
        clip2Path.addLine(to: CGPoint(x: 13, y: 8))
        clip2Path.addLine(to: CGPoint(x: 2, y: 8))
        clip2Path.addLine(to: CGPoint(x: 2, y: 5.5))
        clip2Path.addCurve(to: CGPoint(x: 7.5, y: 0), controlPoint1: CGPoint(x: 2, y: 2.46), controlPoint2: CGPoint(x: 4.46, y: 0))
        clip2Path.close()
        clip2Path.usesEvenOddFillRule = true
        clip2Path.addClip()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 7.5, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 7.5, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 13, y: 5.5), controlPoint1: CGPoint(x: 10.54, y: 0), controlPoint2: CGPoint(x: 13, y: 2.46))
        bezier3Path.addLine(to: CGPoint(x: 13, y: 8))
        bezier3Path.addLine(to: CGPoint(x: 2, y: 8))
        bezier3Path.addLine(to: CGPoint(x: 2, y: 5.5))
        bezier3Path.addCurve(to: CGPoint(x: 7.5, y: 0), controlPoint1: CGPoint(x: 2, y: 2.46), controlPoint2: CGPoint(x: 4.46, y: 0))
        bezier3Path.close()
        strokeColor15.setStroke()
        bezier3Path.lineWidth = 4
        bezier3Path.stroke()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawGuildCrest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 38), resizing: ResizingBehavior = .aspectFit, isOwner: Bool = false, isPublic: Bool = true, memberCount: CGFloat = 100, memberCountLabel: String = "") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 38), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 38)


        //// Color Declarations
        let crestBronze1 = UIColor(red: 0.918, green: 0.549, blue: 0.192, alpha: 1.000)
        let crestBronze2 = UIColor(red: 0.957, green: 0.647, blue: 0.349, alpha: 1.000)
        let crestBronze3 = UIColor(red: 0.702, green: 0.384, blue: 0.075, alpha: 1.000)
        let crestBronze4 = UIColor(red: 0.843, green: 0.478, blue: 0.125, alpha: 1.000)
        let crestBronze5 = UIColor(red: 0.702, green: 0.384, blue: 0.075, alpha: 1.000)
        let crestBronze6 = UIColor(red: 0.702, green: 0.384, blue: 0.075, alpha: 1.000)
        let crestSilver1 = UIColor(red: 0.761, green: 0.761, blue: 0.761, alpha: 1.000)
        let crestSilver3 = UIColor(red: 0.553, green: 0.553, blue: 0.553, alpha: 1.000)
        let crestSilver4 = UIColor(red: 0.686, green: 0.686, blue: 0.686, alpha: 1.000)
        let crestSilver6 = UIColor(red: 0.553, green: 0.553, blue: 0.553, alpha: 1.000)
        let crestSilver5 = UIColor(red: 0.553, green: 0.553, blue: 0.553, alpha: 1.000)
        let crestSilver2 = UIColor(red: 0.851, green: 0.851, blue: 0.851, alpha: 1.000)
        let crestGold1 = UIColor(red: 1.000, green: 0.737, blue: 0.353, alpha: 1.000)
        let crestGold2 = UIColor(red: 1.000, green: 0.824, blue: 0.569, alpha: 1.000)
        let crestGold3 = UIColor(red: 0.875, green: 0.569, blue: 0.118, alpha: 1.000)
        let crestGold4 = UIColor(red: 1.000, green: 0.651, blue: 0.137, alpha: 1.000)
        let crestGold6 = UIColor(red: 0.875, green: 0.569, blue: 0.118, alpha: 1.000)
        let crestGold5 = UIColor(red: 0.875, green: 0.569, blue: 0.118, alpha: 1.000)

        //// Variable Declarations
        let isPrivate = !isPublic
        let crestColor1 = memberCount < 100 ? crestBronze1 : (memberCount < 1000 ? crestSilver1 : crestGold1)
        let crestColor2 = memberCount < 100 ? crestBronze2 : (memberCount < 1000 ? crestSilver2 : crestGold2)
        let crestColor3 = memberCount < 100 ? crestBronze3 : (memberCount < 1000 ? crestSilver3 : crestGold3)
        let crestColor4 = memberCount < 100 ? crestBronze4 : (memberCount < 1000 ? crestSilver4 : crestGold4)
        let crestColor5 = memberCount < 100 ? crestBronze5 : (memberCount < 1000 ? crestSilver5 : crestGold5)
        let crestColor6 = memberCount < 100 ? crestBronze6 : (memberCount < 1000 ? crestSilver6 : crestGold6)

        if (isPublic) {
            //// Group
            context.saveGState()
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            //// Clip Clip 5
            let clip5Path = UIBezierPath()
            clip5Path.move(to: CGPoint(x: 20.5, y: 38))
            clip5Path.addLine(to: CGPoint(x: 33.14, y: 30.6))
            clip5Path.addCurve(to: CGPoint(x: 40, y: 4.93), controlPoint1: CGPoint(x: 33.01, y: 22.28), controlPoint2: CGPoint(x: 33.81, y: 13.48))
            clip5Path.addCurve(to: CGPoint(x: 20.5, y: 0), controlPoint1: CGPoint(x: 29.47, y: 3.77), controlPoint2: CGPoint(x: 26.58, y: 0))
            clip5Path.addCurve(to: CGPoint(x: 0, y: 4.93), controlPoint1: CGPoint(x: 14.6, y: 0), controlPoint2: CGPoint(x: 10.53, y: 3.77))
            clip5Path.addCurve(to: CGPoint(x: 6.86, y: 30.6), controlPoint1: CGPoint(x: 6.19, y: 13.48), controlPoint2: CGPoint(x: 6.99, y: 22.28))
            clip5Path.addLine(to: CGPoint(x: 20.5, y: 38))
            clip5Path.close()
            clip5Path.usesEvenOddFillRule = true
            clip5Path.addClip()


            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(rect: CGRect(x: -5, y: -5, width: 50, height: 48))
            crestColor1.setFill()
            rectanglePath.fill()


            //// Rectangle 2 Drawing
            context.saveGState()
            context.translateBy(x: 23.02, y: 23.52)
            context.rotate(by: -45 * CGFloat.pi/180)

            let rectangle2Path = UIBezierPath(rect: CGRect(x: -6.01, y: -38, width: 12.02, height: 76))
            crestColor2.setFill()
            rectangle2Path.fill()

            context.restoreGState()


            //// Rectangle 4 Drawing
            context.saveGState()
            context.translateBy(x: 35, y: 22)
            context.rotate(by: -45 * CGFloat.pi/180)

            let rectangle4Path = UIBezierPath(rect: CGRect(x: -1, y: -38, width: 2, height: 76))
            crestColor2.setFill()
            rectangle4Path.fill()

            context.restoreGState()


            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 20.5, y: 38))
            bezier2Path.addLine(to: CGPoint(x: 33.14, y: 30.6))
            bezier2Path.addCurve(to: CGPoint(x: 40, y: 4.93), controlPoint1: CGPoint(x: 33.01, y: 22.28), controlPoint2: CGPoint(x: 33.81, y: 13.48))
            bezier2Path.addCurve(to: CGPoint(x: 20.5, y: 0), controlPoint1: CGPoint(x: 29.47, y: 3.77), controlPoint2: CGPoint(x: 26.58, y: 0))
            bezier2Path.addCurve(to: CGPoint(x: 0, y: 4.93), controlPoint1: CGPoint(x: 14.6, y: 0), controlPoint2: CGPoint(x: 10.53, y: 3.77))
            bezier2Path.addCurve(to: CGPoint(x: 6.86, y: 30.6), controlPoint1: CGPoint(x: 6.19, y: 13.48), controlPoint2: CGPoint(x: 6.99, y: 22.28))
            bezier2Path.addLine(to: CGPoint(x: 20.5, y: 38))
            bezier2Path.close()
            crestColor3.setStroke()
            bezier2Path.lineWidth = 10
            bezier2Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 20.5, y: 38))
            bezier4Path.addLine(to: CGPoint(x: 33.14, y: 30.6))
            bezier4Path.addCurve(to: CGPoint(x: 40, y: 4.93), controlPoint1: CGPoint(x: 33.01, y: 22.28), controlPoint2: CGPoint(x: 33.81, y: 13.48))
            bezier4Path.addCurve(to: CGPoint(x: 20.5, y: -0), controlPoint1: CGPoint(x: 29.47, y: 3.77), controlPoint2: CGPoint(x: 26.58, y: -0))
            bezier4Path.addCurve(to: CGPoint(x: 0, y: 4.93), controlPoint1: CGPoint(x: 14.6, y: -0), controlPoint2: CGPoint(x: 10.53, y: 3.77))
            bezier4Path.addCurve(to: CGPoint(x: 6.86, y: 30.6), controlPoint1: CGPoint(x: 6.19, y: 13.48), controlPoint2: CGPoint(x: 6.99, y: 22.28))
            bezier4Path.addLine(to: CGPoint(x: 20.5, y: 38))
            bezier4Path.close()
            crestColor4.setStroke()
            bezier4Path.lineWidth = 6
            bezier4Path.stroke()


            if (isOwner) {
                //// Bezier 7 Drawing
                let bezier7Path = UIBezierPath()
                bezier7Path.move(to: CGPoint(x: 13.3, y: 12.54))
                bezier7Path.addLine(to: CGPoint(x: 12.37, y: 13.05))
                bezier7Path.addCurve(to: CGPoint(x: 11.65, y: 12.55), controlPoint1: CGPoint(x: 11.89, y: 13.31), controlPoint2: CGPoint(x: 11.57, y: 13.08))
                bezier7Path.addLine(to: CGPoint(x: 11.84, y: 11.43))
                bezier7Path.addLine(to: CGPoint(x: 11.07, y: 10.65))
                bezier7Path.addCurve(to: CGPoint(x: 11.36, y: 9.79), controlPoint1: CGPoint(x: 10.69, y: 10.26), controlPoint2: CGPoint(x: 10.82, y: 9.87))
                bezier7Path.addLine(to: CGPoint(x: 12.4, y: 9.63))
                bezier7Path.addLine(to: CGPoint(x: 12.87, y: 8.63))
                bezier7Path.addCurve(to: CGPoint(x: 13.73, y: 8.63), controlPoint1: CGPoint(x: 13.11, y: 8.13), controlPoint2: CGPoint(x: 13.49, y: 8.12))
                bezier7Path.addLine(to: CGPoint(x: 14.2, y: 9.63))
                bezier7Path.addLine(to: CGPoint(x: 15.24, y: 9.79))
                bezier7Path.addCurve(to: CGPoint(x: 15.53, y: 10.65), controlPoint1: CGPoint(x: 15.78, y: 9.87), controlPoint2: CGPoint(x: 15.92, y: 10.25))
                bezier7Path.addLine(to: CGPoint(x: 14.76, y: 11.43))
                bezier7Path.addLine(to: CGPoint(x: 14.95, y: 12.55))
                bezier7Path.addCurve(to: CGPoint(x: 14.23, y: 13.05), controlPoint1: CGPoint(x: 15.04, y: 13.09), controlPoint2: CGPoint(x: 14.72, y: 13.32))
                bezier7Path.addLine(to: CGPoint(x: 13.3, y: 12.54))
                bezier7Path.close()
                bezier7Path.usesEvenOddFillRule = true
                crestColor6.setFill()
                bezier7Path.fill()


                //// Bezier 8 Drawing
                let bezier8Path = UIBezierPath()
                bezier8Path.move(to: CGPoint(x: 26.7, y: 12.54))
                bezier8Path.addLine(to: CGPoint(x: 25.77, y: 13.05))
                bezier8Path.addCurve(to: CGPoint(x: 25.05, y: 12.55), controlPoint1: CGPoint(x: 25.29, y: 13.31), controlPoint2: CGPoint(x: 24.97, y: 13.08))
                bezier8Path.addLine(to: CGPoint(x: 25.24, y: 11.43))
                bezier8Path.addLine(to: CGPoint(x: 24.47, y: 10.65))
                bezier8Path.addCurve(to: CGPoint(x: 24.76, y: 9.79), controlPoint1: CGPoint(x: 24.09, y: 10.26), controlPoint2: CGPoint(x: 24.22, y: 9.87))
                bezier8Path.addLine(to: CGPoint(x: 25.8, y: 9.63))
                bezier8Path.addLine(to: CGPoint(x: 26.27, y: 8.63))
                bezier8Path.addCurve(to: CGPoint(x: 27.13, y: 8.63), controlPoint1: CGPoint(x: 26.51, y: 8.13), controlPoint2: CGPoint(x: 26.89, y: 8.12))
                bezier8Path.addLine(to: CGPoint(x: 27.6, y: 9.63))
                bezier8Path.addLine(to: CGPoint(x: 28.64, y: 9.79))
                bezier8Path.addCurve(to: CGPoint(x: 28.93, y: 10.65), controlPoint1: CGPoint(x: 29.18, y: 9.87), controlPoint2: CGPoint(x: 29.32, y: 10.25))
                bezier8Path.addLine(to: CGPoint(x: 28.16, y: 11.43))
                bezier8Path.addLine(to: CGPoint(x: 28.35, y: 12.55))
                bezier8Path.addCurve(to: CGPoint(x: 27.63, y: 13.05), controlPoint1: CGPoint(x: 28.44, y: 13.09), controlPoint2: CGPoint(x: 28.12, y: 13.32))
                bezier8Path.addLine(to: CGPoint(x: 26.7, y: 12.54))
                bezier8Path.close()
                bezier8Path.usesEvenOddFillRule = true
                crestColor6.setFill()
                bezier8Path.fill()
            }


            context.endTransparencyLayer()
            context.restoreGState()
        }


        if (isPrivate) {
            //// Group 8
            context.saveGState()
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            //// Clip Clip 14
            let clip14Path = UIBezierPath()
            clip14Path.move(to: CGPoint(x: 20, y: 0))
            clip14Path.addLine(to: CGPoint(x: 3, y: 7.62))
            clip14Path.addCurve(to: CGPoint(x: 20, y: 38), controlPoint1: CGPoint(x: 3, y: 22.85), controlPoint2: CGPoint(x: 5.07, y: 31.47))
            clip14Path.addCurve(to: CGPoint(x: 37, y: 7.62), controlPoint1: CGPoint(x: 34.93, y: 31.47), controlPoint2: CGPoint(x: 37, y: 22.85))
            clip14Path.addLine(to: CGPoint(x: 20, y: 0))
            clip14Path.close()
            clip14Path.usesEvenOddFillRule = true
            clip14Path.addClip()


            //// Rectangle 3 Drawing
            let rectangle3Path = UIBezierPath(rect: CGRect(x: 2, y: 0, width: 35, height: 38))
            crestColor1.setFill()
            rectangle3Path.fill()


            //// Rectangle 8 Drawing
            context.saveGState()
            context.translateBy(x: 23.7, y: 10.7)
            context.rotate(by: -45 * CGFloat.pi/180)

            let rectangle8Path = UIBezierPath(rect: CGRect(x: -1, y: -11, width: 2, height: 22))
            crestColor2.setFill()
            rectangle8Path.fill()

            context.restoreGState()


            //// Rectangle 5 Drawing
            context.saveGState()
            context.translateBy(x: 17.73, y: 24)
            context.rotate(by: 45 * CGFloat.pi/180)

            let rectangle5Path = UIBezierPath(rect: CGRect(x: -19, y: -10, width: 38, height: 20))
            crestColor2.setFill()
            rectangle5Path.fill()

            context.restoreGState()


            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 20, y: 0))
            bezier3Path.addLine(to: CGPoint(x: 3, y: 7.62))
            bezier3Path.addCurve(to: CGPoint(x: 20, y: 38), controlPoint1: CGPoint(x: 3, y: 22.85), controlPoint2: CGPoint(x: 5.07, y: 31.47))
            bezier3Path.addCurve(to: CGPoint(x: 37, y: 7.62), controlPoint1: CGPoint(x: 34.93, y: 31.47), controlPoint2: CGPoint(x: 37, y: 22.85))
            bezier3Path.addLine(to: CGPoint(x: 20, y: 0))
            bezier3Path.close()
            crestColor3.setStroke()
            bezier3Path.lineWidth = 10
            bezier3Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 20, y: 0))
            bezier6Path.addLine(to: CGPoint(x: 3, y: 7.62))
            bezier6Path.addCurve(to: CGPoint(x: 20, y: 38), controlPoint1: CGPoint(x: 3, y: 22.85), controlPoint2: CGPoint(x: 5.07, y: 31.47))
            bezier6Path.addCurve(to: CGPoint(x: 37, y: 7.62), controlPoint1: CGPoint(x: 34.93, y: 31.47), controlPoint2: CGPoint(x: 37, y: 22.85))
            bezier6Path.addLine(to: CGPoint(x: 20, y: 0))
            bezier6Path.close()
            crestColor4.setStroke()
            bezier6Path.lineWidth = 6
            bezier6Path.stroke()


            if (isOwner) {
                //// Bezier 14 Drawing
                let bezier14Path = UIBezierPath()
                bezier14Path.move(to: CGPoint(x: 28.3, y: 15.14))
                bezier14Path.addLine(to: CGPoint(x: 27.37, y: 15.65))
                bezier14Path.addCurve(to: CGPoint(x: 26.65, y: 15.15), controlPoint1: CGPoint(x: 26.89, y: 15.91), controlPoint2: CGPoint(x: 26.57, y: 15.69))
                bezier14Path.addLine(to: CGPoint(x: 26.84, y: 14.03))
                bezier14Path.addLine(to: CGPoint(x: 26.07, y: 13.25))
                bezier14Path.addCurve(to: CGPoint(x: 26.36, y: 12.39), controlPoint1: CGPoint(x: 25.69, y: 12.86), controlPoint2: CGPoint(x: 25.82, y: 12.47))
                bezier14Path.addLine(to: CGPoint(x: 27.4, y: 12.23))
                bezier14Path.addLine(to: CGPoint(x: 27.87, y: 11.23))
                bezier14Path.addCurve(to: CGPoint(x: 28.73, y: 11.23), controlPoint1: CGPoint(x: 28.11, y: 10.73), controlPoint2: CGPoint(x: 28.49, y: 10.72))
                bezier14Path.addLine(to: CGPoint(x: 29.2, y: 12.23))
                bezier14Path.addLine(to: CGPoint(x: 30.24, y: 12.39))
                bezier14Path.addCurve(to: CGPoint(x: 30.53, y: 13.25), controlPoint1: CGPoint(x: 30.78, y: 12.47), controlPoint2: CGPoint(x: 30.92, y: 12.85))
                bezier14Path.addLine(to: CGPoint(x: 29.76, y: 14.03))
                bezier14Path.addLine(to: CGPoint(x: 29.95, y: 15.15))
                bezier14Path.addCurve(to: CGPoint(x: 29.23, y: 15.65), controlPoint1: CGPoint(x: 30.04, y: 15.69), controlPoint2: CGPoint(x: 29.72, y: 15.92))
                bezier14Path.addLine(to: CGPoint(x: 28.3, y: 15.14))
                bezier14Path.close()
                bezier14Path.usesEvenOddFillRule = true
                crestColor6.setFill()
                bezier14Path.fill()


                //// Bezier 15 Drawing
                let bezier15Path = UIBezierPath()
                bezier15Path.move(to: CGPoint(x: 11.7, y: 15.14))
                bezier15Path.addLine(to: CGPoint(x: 10.77, y: 15.65))
                bezier15Path.addCurve(to: CGPoint(x: 10.05, y: 15.15), controlPoint1: CGPoint(x: 10.29, y: 15.91), controlPoint2: CGPoint(x: 9.97, y: 15.69))
                bezier15Path.addLine(to: CGPoint(x: 10.24, y: 14.03))
                bezier15Path.addLine(to: CGPoint(x: 9.47, y: 13.25))
                bezier15Path.addCurve(to: CGPoint(x: 9.76, y: 12.39), controlPoint1: CGPoint(x: 9.09, y: 12.86), controlPoint2: CGPoint(x: 9.22, y: 12.47))
                bezier15Path.addLine(to: CGPoint(x: 10.8, y: 12.23))
                bezier15Path.addLine(to: CGPoint(x: 11.27, y: 11.23))
                bezier15Path.addCurve(to: CGPoint(x: 12.13, y: 11.23), controlPoint1: CGPoint(x: 11.51, y: 10.73), controlPoint2: CGPoint(x: 11.89, y: 10.72))
                bezier15Path.addLine(to: CGPoint(x: 12.6, y: 12.23))
                bezier15Path.addLine(to: CGPoint(x: 13.64, y: 12.39))
                bezier15Path.addCurve(to: CGPoint(x: 13.93, y: 13.25), controlPoint1: CGPoint(x: 14.18, y: 12.47), controlPoint2: CGPoint(x: 14.32, y: 12.85))
                bezier15Path.addLine(to: CGPoint(x: 13.16, y: 14.03))
                bezier15Path.addLine(to: CGPoint(x: 13.35, y: 15.15))
                bezier15Path.addCurve(to: CGPoint(x: 12.63, y: 15.65), controlPoint1: CGPoint(x: 13.44, y: 15.69), controlPoint2: CGPoint(x: 13.12, y: 15.92))
                bezier15Path.addLine(to: CGPoint(x: 11.7, y: 15.14))
                bezier15Path.close()
                bezier15Path.usesEvenOddFillRule = true
                crestColor6.setFill()
                bezier15Path.fill()
            }


            context.endTransparencyLayer()
            context.restoreGState()
        }


        //// Bezier 13 Drawing
        let bezier13Path = UIBezierPath()
        bezier13Path.move(to: CGPoint(x: 20, y: 12.72))
        bezier13Path.addCurve(to: CGPoint(x: 15, y: 15.22), controlPoint1: CGPoint(x: 18.33, y: 12.72), controlPoint2: CGPoint(x: 15, y: 13.55))
        bezier13Path.addLine(to: CGPoint(x: 15, y: 17))
        bezier13Path.addLine(to: CGPoint(x: 25, y: 17))
        bezier13Path.addLine(to: CGPoint(x: 25, y: 15.22))
        bezier13Path.addCurve(to: CGPoint(x: 20, y: 12.72), controlPoint1: CGPoint(x: 25, y: 13.55), controlPoint2: CGPoint(x: 21.67, y: 12.72))
        bezier13Path.close()
        bezier13Path.move(to: CGPoint(x: 20, y: 7))
        bezier13Path.addCurve(to: CGPoint(x: 17.86, y: 9.14), controlPoint1: CGPoint(x: 18.82, y: 7), controlPoint2: CGPoint(x: 17.86, y: 7.96))
        bezier13Path.addCurve(to: CGPoint(x: 20, y: 11.29), controlPoint1: CGPoint(x: 17.86, y: 10.33), controlPoint2: CGPoint(x: 18.82, y: 11.29))
        bezier13Path.addCurve(to: CGPoint(x: 22.14, y: 9.14), controlPoint1: CGPoint(x: 21.18, y: 11.29), controlPoint2: CGPoint(x: 22.14, y: 10.33))
        bezier13Path.addCurve(to: CGPoint(x: 20, y: 7), controlPoint1: CGPoint(x: 22.14, y: 7.96), controlPoint2: CGPoint(x: 21.18, y: 7))
        bezier13Path.close()
        bezier13Path.usesEvenOddFillRule = true
        crestColor6.setFill()
        bezier13Path.fill()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 2, y: 26.5))
        bezier10Path.addCurve(to: CGPoint(x: 9.5, y: 19), controlPoint1: CGPoint(x: 2, y: 22.36), controlPoint2: CGPoint(x: 5.35, y: 19))
        bezier10Path.addLine(to: CGPoint(x: 30.5, y: 19))
        bezier10Path.addCurve(to: CGPoint(x: 38, y: 26.5), controlPoint1: CGPoint(x: 34.64, y: 19), controlPoint2: CGPoint(x: 38, y: 22.37))
        bezier10Path.addLine(to: CGPoint(x: 38, y: 26.5))
        bezier10Path.addCurve(to: CGPoint(x: 30.5, y: 34), controlPoint1: CGPoint(x: 38, y: 30.64), controlPoint2: CGPoint(x: 34.65, y: 34))
        bezier10Path.addLine(to: CGPoint(x: 9.5, y: 34))
        bezier10Path.addCurve(to: CGPoint(x: 2, y: 26.5), controlPoint1: CGPoint(x: 5.36, y: 34), controlPoint2: CGPoint(x: 2, y: 30.63))
        bezier10Path.addLine(to: CGPoint(x: 2, y: 26.5))
        bezier10Path.close()
        bezier10Path.usesEvenOddFillRule = true
        UIColor.white.setFill()
        bezier10Path.fill()


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 2, y: 26.5))
        bezier11Path.addCurve(to: CGPoint(x: 9.5, y: 19), controlPoint1: CGPoint(x: 2, y: 22.36), controlPoint2: CGPoint(x: 5.35, y: 19))
        bezier11Path.addLine(to: CGPoint(x: 30.5, y: 19))
        bezier11Path.addCurve(to: CGPoint(x: 38, y: 26.5), controlPoint1: CGPoint(x: 34.64, y: 19), controlPoint2: CGPoint(x: 38, y: 22.37))
        bezier11Path.addLine(to: CGPoint(x: 38, y: 26.5))
        bezier11Path.addCurve(to: CGPoint(x: 30.5, y: 34), controlPoint1: CGPoint(x: 38, y: 30.64), controlPoint2: CGPoint(x: 34.65, y: 34))
        bezier11Path.addLine(to: CGPoint(x: 9.5, y: 34))
        bezier11Path.addCurve(to: CGPoint(x: 2, y: 26.5), controlPoint1: CGPoint(x: 5.36, y: 34), controlPoint2: CGPoint(x: 2, y: 30.63))
        bezier11Path.addLine(to: CGPoint(x: 2, y: 26.5))
        bezier11Path.close()
        crestColor3.setStroke()
        bezier11Path.lineWidth = 2
        bezier11Path.stroke()


        //// Label Drawing
        let labelRect = CGRect(x: 4, y: 20, width: 32, height: 13)
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .center
        let labelFontAttributes = [
            .font: UIFont(name: "HelveticaNeue", size: 12)!,
            .foregroundColor: crestColor5,
            .paragraphStyle: labelStyle,
        ] as [NSAttributedStringKey: Any]

        let labelTextHeight: CGFloat = memberCountLabel.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        memberCountLabel.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawGuildCrestMedium(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 34), resizing: ResizingBehavior = .aspectFit, memberCount: CGFloat = 100) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 34), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 34)


        //// Color Declarations
        let crestBronze1 = UIColor(red: 0.918, green: 0.549, blue: 0.192, alpha: 1.000)
        let crestBronze2 = UIColor(red: 0.957, green: 0.647, blue: 0.349, alpha: 1.000)
        let crestBronze3 = UIColor(red: 0.702, green: 0.384, blue: 0.075, alpha: 1.000)
        let crestBronze4 = UIColor(red: 0.843, green: 0.478, blue: 0.125, alpha: 1.000)
        let crestBronze6 = UIColor(red: 0.702, green: 0.384, blue: 0.075, alpha: 1.000)
        let crestSilver1 = UIColor(red: 0.761, green: 0.761, blue: 0.761, alpha: 1.000)
        let crestSilver3 = UIColor(red: 0.553, green: 0.553, blue: 0.553, alpha: 1.000)
        let crestSilver4 = UIColor(red: 0.686, green: 0.686, blue: 0.686, alpha: 1.000)
        let crestSilver6 = UIColor(red: 0.553, green: 0.553, blue: 0.553, alpha: 1.000)
        let crestSilver2 = UIColor(red: 0.851, green: 0.851, blue: 0.851, alpha: 1.000)
        let crestGold1 = UIColor(red: 1.000, green: 0.737, blue: 0.353, alpha: 1.000)
        let crestGold2 = UIColor(red: 1.000, green: 0.824, blue: 0.569, alpha: 1.000)
        let crestGold3 = UIColor(red: 0.875, green: 0.569, blue: 0.118, alpha: 1.000)
        let crestGold4 = UIColor(red: 1.000, green: 0.651, blue: 0.137, alpha: 1.000)
        let crestGold6 = UIColor(red: 0.875, green: 0.569, blue: 0.118, alpha: 1.000)

        //// Variable Declarations
        let crestColor1 = memberCount < 100 ? crestBronze1 : (memberCount < 1000 ? crestSilver1 : crestGold1)
        let crestColor2 = memberCount < 100 ? crestBronze2 : (memberCount < 1000 ? crestSilver2 : crestGold2)
        let crestColor3 = memberCount < 100 ? crestBronze3 : (memberCount < 1000 ? crestSilver3 : crestGold3)
        let crestColor4 = memberCount < 100 ? crestBronze4 : (memberCount < 1000 ? crestSilver4 : crestGold4)
        let crestColor6 = memberCount < 100 ? crestBronze6 : (memberCount < 1000 ? crestSilver6 : crestGold6)

        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 5
        let clip5Path = UIBezierPath()
        clip5Path.move(to: CGPoint(x: 15, y: 0))
        clip5Path.addLine(to: CGPoint(x: 0, y: 7))
        clip5Path.addCurve(to: CGPoint(x: 15, y: 34), controlPoint1: CGPoint(x: 0, y: 21), controlPoint2: CGPoint(x: 1, y: 28))
        clip5Path.addCurve(to: CGPoint(x: 30, y: 7), controlPoint1: CGPoint(x: 29, y: 28), controlPoint2: CGPoint(x: 30, y: 21))
        clip5Path.addLine(to: CGPoint(x: 15, y: 0))
        clip5Path.close()
        clip5Path.usesEvenOddFillRule = true
        clip5Path.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -5, y: -5, width: 40, height: 44))
        crestColor1.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 14.44, y: 17.06)
        context.rotate(by: 45 * CGFloat.pi/180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: -12.37, y: -4, width: 24.75, height: 8))
        crestColor2.setFill()
        rectangle2Path.fill()

        context.restoreGState()


        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: 17.86, y: 10.71)
        context.rotate(by: -45 * CGFloat.pi/180)

        let rectangle4Path = UIBezierPath(rect: CGRect(x: -1, y: -12.5, width: 2, height: 25))
        crestColor2.setFill()
        rectangle4Path.fill()

        context.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 15, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 7))
        bezier2Path.addCurve(to: CGPoint(x: 15, y: 34), controlPoint1: CGPoint(x: 0, y: 21), controlPoint2: CGPoint(x: 1, y: 28))
        bezier2Path.addCurve(to: CGPoint(x: 30, y: 7), controlPoint1: CGPoint(x: 29, y: 28), controlPoint2: CGPoint(x: 30, y: 21))
        bezier2Path.addLine(to: CGPoint(x: 15, y: 0))
        bezier2Path.close()
        crestColor3.setStroke()
        bezier2Path.lineWidth = 10
        bezier2Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 15, y: 0))
        bezier4Path.addLine(to: CGPoint(x: 0, y: 7))
        bezier4Path.addCurve(to: CGPoint(x: 15, y: 34), controlPoint1: CGPoint(x: 0, y: 21), controlPoint2: CGPoint(x: 1, y: 28))
        bezier4Path.addCurve(to: CGPoint(x: 30, y: 7), controlPoint1: CGPoint(x: 29, y: 28), controlPoint2: CGPoint(x: 30, y: 21))
        bezier4Path.addLine(to: CGPoint(x: 15, y: 0))
        bezier4Path.close()
        crestColor4.setStroke()
        bezier4Path.lineWidth = 6
        bezier4Path.stroke()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 15, y: 16.72))
        bezier6Path.addCurve(to: CGPoint(x: 10, y: 19.22), controlPoint1: CGPoint(x: 13.33, y: 16.72), controlPoint2: CGPoint(x: 10, y: 17.55))
        bezier6Path.addLine(to: CGPoint(x: 10, y: 21))
        bezier6Path.addLine(to: CGPoint(x: 20, y: 21))
        bezier6Path.addLine(to: CGPoint(x: 20, y: 19.22))
        bezier6Path.addCurve(to: CGPoint(x: 15, y: 16.72), controlPoint1: CGPoint(x: 20, y: 17.55), controlPoint2: CGPoint(x: 16.67, y: 16.72))
        bezier6Path.close()
        bezier6Path.move(to: CGPoint(x: 15, y: 11))
        bezier6Path.addCurve(to: CGPoint(x: 12.86, y: 13.14), controlPoint1: CGPoint(x: 13.82, y: 11), controlPoint2: CGPoint(x: 12.86, y: 11.96))
        bezier6Path.addCurve(to: CGPoint(x: 15, y: 15.29), controlPoint1: CGPoint(x: 12.86, y: 14.33), controlPoint2: CGPoint(x: 13.82, y: 15.29))
        bezier6Path.addCurve(to: CGPoint(x: 17.14, y: 13.14), controlPoint1: CGPoint(x: 16.18, y: 15.29), controlPoint2: CGPoint(x: 17.14, y: 14.33))
        bezier6Path.addCurve(to: CGPoint(x: 15, y: 11), controlPoint1: CGPoint(x: 17.14, y: 11.96), controlPoint2: CGPoint(x: 16.18, y: 11))
        bezier6Path.close()
        bezier6Path.usesEvenOddFillRule = true
        crestColor6.setFill()
        bezier6Path.fill()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawGuildCrestSmall(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit, memberCount: CGFloat = 100) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)


        //// Color Declarations
        let fillColor37 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let crestBronze4 = UIColor(red: 0.843, green: 0.478, blue: 0.125, alpha: 1.000)
        let crestSilver4 = UIColor(red: 0.686, green: 0.686, blue: 0.686, alpha: 1.000)
        let crestGold4 = UIColor(red: 1.000, green: 0.651, blue: 0.137, alpha: 1.000)

        //// Variable Declarations
        let crestColor4 = memberCount < 100 ? crestBronze4 : (memberCount < 1000 ? crestSilver4 : crestGold4)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 15.94, y: 3.41))
        bezierPath.addCurve(to: CGPoint(x: 15.18, y: 2.25), controlPoint1: CGPoint(x: 15.94, y: 2.94), controlPoint2: CGPoint(x: 15.69, y: 2.5))
        bezierPath.addCurve(to: CGPoint(x: 8, y: -0), controlPoint1: CGPoint(x: 13.64, y: 1.5), controlPoint2: CGPoint(x: 9.97, y: -0))
        bezierPath.addCurve(to: CGPoint(x: 0.82, y: 2.25), controlPoint1: CGPoint(x: 6.02, y: -0), controlPoint2: CGPoint(x: 2.36, y: 1.5))
        bezierPath.addCurve(to: CGPoint(x: 0.05, y: 3.41), controlPoint1: CGPoint(x: 0.31, y: 2.5), controlPoint2: CGPoint(x: 0.06, y: 2.94))
        bezierPath.addCurve(to: CGPoint(x: 7.1, y: 15.81), controlPoint1: CGPoint(x: 0.01, y: 5.65), controlPoint2: CGPoint(x: -0.93, y: 12.24))
        bezierPath.addCurve(to: CGPoint(x: 8.9, y: 15.81), controlPoint1: CGPoint(x: 7.65, y: 16.05), controlPoint2: CGPoint(x: 8.35, y: 16.07))
        bezierPath.addCurve(to: CGPoint(x: 15.94, y: 3.41), controlPoint1: CGPoint(x: 16.95, y: 12.24), controlPoint2: CGPoint(x: 15.98, y: 5.65))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        crestColor4.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 8, y: 7.57))
        bezier2Path.addCurve(to: CGPoint(x: 4, y: 9.57), controlPoint1: CGPoint(x: 6.67, y: 7.57), controlPoint2: CGPoint(x: 4, y: 8.24))
        bezier2Path.addLine(to: CGPoint(x: 4, y: 11))
        bezier2Path.addLine(to: CGPoint(x: 12, y: 11))
        bezier2Path.addLine(to: CGPoint(x: 12, y: 9.57))
        bezier2Path.addCurve(to: CGPoint(x: 8, y: 7.57), controlPoint1: CGPoint(x: 12, y: 8.24), controlPoint2: CGPoint(x: 9.33, y: 7.57))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 8, y: 3))
        bezier2Path.addCurve(to: CGPoint(x: 6.29, y: 4.71), controlPoint1: CGPoint(x: 7.05, y: 3), controlPoint2: CGPoint(x: 6.29, y: 3.77))
        bezier2Path.addCurve(to: CGPoint(x: 8, y: 6.43), controlPoint1: CGPoint(x: 6.29, y: 5.66), controlPoint2: CGPoint(x: 7.05, y: 6.43))
        bezier2Path.addCurve(to: CGPoint(x: 9.71, y: 4.71), controlPoint1: CGPoint(x: 8.95, y: 6.43), controlPoint2: CGPoint(x: 9.71, y: 5.66))
        bezier2Path.addCurve(to: CGPoint(x: 8, y: 3), controlPoint1: CGPoint(x: 9.71, y: 3.77), controlPoint2: CGPoint(x: 8.95, y: 3))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        fillColor37.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawGuildHeaderCrest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 116, height: 58), resizing: ResizingBehavior = .aspectFit, guildHeader: UIColor = UIColor(red: 0.310, green: 0.165, blue: 0.576, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 116, height: 58), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 116, y: resizedFrame.height / 58)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 116, resizedFrame.height / 58)


        //// Color Declarations
        let textForeground2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let shadowTint2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        var guildHeaderHueComponent: CGFloat = 1
        var guildHeaderSaturationComponent: CGFloat = 1
        var guildHeaderBrightnessComponent: CGFloat = 1
        guildHeader.getHue(&guildHeaderHueComponent, saturation: &guildHeaderSaturationComponent, brightness: &guildHeaderBrightnessComponent, alpha: nil)

        let guildHeaderDark2 = UIColor(hue: guildHeaderHueComponent, saturation: guildHeaderSaturationComponent, brightness: 0.7, alpha: guildHeader.cgColor.alpha)
        var guildHeaderDark2RedComponent: CGFloat = 1
        var guildHeaderDark2GreenComponent: CGFloat = 1
        var guildHeaderDark2BlueComponent: CGFloat = 1
        guildHeaderDark2.getRed(&guildHeaderDark2RedComponent, green: &guildHeaderDark2GreenComponent, blue: &guildHeaderDark2BlueComponent, alpha: nil)

        let guildHeaderDark6 = UIColor(red: (guildHeaderDark2RedComponent * 0.7 + 0.3), green: (guildHeaderDark2GreenComponent * 0.7 + 0.3), blue: (guildHeaderDark2BlueComponent * 0.7 + 0.3), alpha: (guildHeaderDark2.cgColor.alpha * 0.7 + 0.3))
        let guildHeaderDark8 = UIColor(red: (guildHeaderDark2RedComponent * 0.6 + 0.4), green: (guildHeaderDark2GreenComponent * 0.6 + 0.4), blue: (guildHeaderDark2BlueComponent * 0.6 + 0.4), alpha: (guildHeaderDark2.cgColor.alpha * 0.6 + 0.4))
        var guildHeaderDark8HueComponent: CGFloat = 1
        var guildHeaderDark8SaturationComponent: CGFloat = 1
        var guildHeaderDark8BrightnessComponent: CGFloat = 1
        guildHeaderDark8.getHue(&guildHeaderDark8HueComponent, saturation: &guildHeaderDark8SaturationComponent, brightness: &guildHeaderDark8BrightnessComponent, alpha: nil)

        let guildHeaderDark7 = UIColor(hue: guildHeaderDark8HueComponent, saturation: guildHeaderDark8SaturationComponent, brightness: 1, alpha: guildHeaderDark8.cgColor.alpha)
        let guildHeaderDark3 = UIColor(hue: guildHeaderHueComponent, saturation: guildHeaderSaturationComponent, brightness: 1, alpha: guildHeader.cgColor.alpha)
        var guildHeaderDark3RedComponent: CGFloat = 1
        var guildHeaderDark3GreenComponent: CGFloat = 1
        var guildHeaderDark3BlueComponent: CGFloat = 1
        guildHeaderDark3.getRed(&guildHeaderDark3RedComponent, green: &guildHeaderDark3GreenComponent, blue: &guildHeaderDark3BlueComponent, alpha: nil)

        let guildHeaderDark4 = UIColor(red: (guildHeaderDark3RedComponent * 0.85 + 0.15), green: (guildHeaderDark3GreenComponent * 0.85 + 0.15), blue: (guildHeaderDark3BlueComponent * 0.85 + 0.15), alpha: (guildHeaderDark3.cgColor.alpha * 0.85 + 0.15))
        let guildHeaderDark5 = UIColor(red: (guildHeaderDark3RedComponent * 0.3 + 0.7), green: (guildHeaderDark3GreenComponent * 0.3 + 0.7), blue: (guildHeaderDark3BlueComponent * 0.3 + 0.7), alpha: (guildHeaderDark3.cgColor.alpha * 0.3 + 0.7))

        //// Shadow Declarations
        let shadow2 = NSShadow()
        shadow2.shadowColor = shadowTint2.withAlphaComponent(0.72 * shadowTint2.cgColor.alpha)
        shadow2.shadowOffset = CGSize(width: 176, height: 1)
        shadow2.shadowBlurRadius = 2

        //// Group
        //// Group 6
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 6
        let clip6Path = UIBezierPath()
        clip6Path.move(to: CGPoint(x: 80.23, y: 11.47))
        clip6Path.addLine(to: CGPoint(x: 59.22, y: 1.28))
        clip6Path.addCurve(to: CGPoint(x: 56.78, y: 1.28), controlPoint1: CGPoint(x: 58.45, y: 0.91), controlPoint2: CGPoint(x: 57.55, y: 0.91))
        clip6Path.addLine(to: CGPoint(x: 35.77, y: 11.47))
        clip6Path.addCurve(to: CGPoint(x: 34.14, y: 13.89), controlPoint1: CGPoint(x: 34.84, y: 11.92), controlPoint2: CGPoint(x: 34.22, y: 12.84))
        clip6Path.addCurve(to: CGPoint(x: 37.73, y: 39.77), controlPoint1: CGPoint(x: 34.1, y: 14.57), controlPoint2: CGPoint(x: 33, y: 30.58))
        clip6Path.addCurve(to: CGPoint(x: 56.45, y: 56.55), controlPoint1: CGPoint(x: 41.68, y: 47.43), controlPoint2: CGPoint(x: 49.53, y: 52.98))
        clip6Path.addLine(to: CGPoint(x: 56.72, y: 56.69))
        clip6Path.addCurve(to: CGPoint(x: 58, y: 57), controlPoint1: CGPoint(x: 57.12, y: 56.9), controlPoint2: CGPoint(x: 57.56, y: 57))
        clip6Path.addCurve(to: CGPoint(x: 59.28, y: 56.69), controlPoint1: CGPoint(x: 58.44, y: 57), controlPoint2: CGPoint(x: 58.88, y: 56.9))
        clip6Path.addLine(to: CGPoint(x: 59.55, y: 56.55))
        clip6Path.addCurve(to: CGPoint(x: 78.27, y: 39.77), controlPoint1: CGPoint(x: 66.47, y: 52.98), controlPoint2: CGPoint(x: 74.32, y: 47.43))
        clip6Path.addCurve(to: CGPoint(x: 81.86, y: 13.89), controlPoint1: CGPoint(x: 83.01, y: 30.58), controlPoint2: CGPoint(x: 81.9, y: 14.57))
        clip6Path.addCurve(to: CGPoint(x: 80.23, y: 11.47), controlPoint1: CGPoint(x: 81.78, y: 12.84), controlPoint2: CGPoint(x: 81.16, y: 11.92))
        clip6Path.close()
        clip6Path.usesEvenOddFillRule = true
        clip6Path.addClip()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 80.23, y: 11.47))
        bezier3Path.addLine(to: CGPoint(x: 59.22, y: 1.28))
        bezier3Path.addCurve(to: CGPoint(x: 56.78, y: 1.28), controlPoint1: CGPoint(x: 58.45, y: 0.91), controlPoint2: CGPoint(x: 57.55, y: 0.91))
        bezier3Path.addLine(to: CGPoint(x: 35.77, y: 11.47))
        bezier3Path.addCurve(to: CGPoint(x: 34.14, y: 13.89), controlPoint1: CGPoint(x: 34.84, y: 11.92), controlPoint2: CGPoint(x: 34.22, y: 12.84))
        bezier3Path.addCurve(to: CGPoint(x: 37.73, y: 39.77), controlPoint1: CGPoint(x: 34.1, y: 14.57), controlPoint2: CGPoint(x: 33, y: 30.58))
        bezier3Path.addCurve(to: CGPoint(x: 56.45, y: 56.55), controlPoint1: CGPoint(x: 41.68, y: 47.43), controlPoint2: CGPoint(x: 49.53, y: 52.98))
        bezier3Path.addLine(to: CGPoint(x: 56.72, y: 56.69))
        bezier3Path.addCurve(to: CGPoint(x: 58, y: 57), controlPoint1: CGPoint(x: 57.12, y: 56.9), controlPoint2: CGPoint(x: 57.56, y: 57))
        bezier3Path.addCurve(to: CGPoint(x: 59.28, y: 56.69), controlPoint1: CGPoint(x: 58.44, y: 57), controlPoint2: CGPoint(x: 58.88, y: 56.9))
        bezier3Path.addLine(to: CGPoint(x: 59.55, y: 56.55))
        bezier3Path.addCurve(to: CGPoint(x: 78.27, y: 39.77), controlPoint1: CGPoint(x: 66.47, y: 52.98), controlPoint2: CGPoint(x: 74.32, y: 47.43))
        bezier3Path.addCurve(to: CGPoint(x: 81.86, y: 13.89), controlPoint1: CGPoint(x: 83.01, y: 30.58), controlPoint2: CGPoint(x: 81.9, y: 14.57))
        bezier3Path.addCurve(to: CGPoint(x: 80.23, y: 11.47), controlPoint1: CGPoint(x: 81.78, y: 12.84), controlPoint2: CGPoint(x: 81.16, y: 11.92))
        bezier3Path.close()
        guildHeaderDark4.setStroke()
        bezier3Path.lineWidth = 9
        bezier3Path.stroke()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 11
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 13
        let clip13Path = UIBezierPath()
        clip13Path.move(to: CGPoint(x: 77.46, y: 13.62))
        clip13Path.addLine(to: CGPoint(x: 59.06, y: 4.28))
        clip13Path.addCurve(to: CGPoint(x: 56.93, y: 4.28), controlPoint1: CGPoint(x: 58.39, y: 3.94), controlPoint2: CGPoint(x: 57.61, y: 3.94))
        clip13Path.addLine(to: CGPoint(x: 38.55, y: 13.62))
        clip13Path.addCurve(to: CGPoint(x: 37.13, y: 15.84), controlPoint1: CGPoint(x: 37.73, y: 14.03), controlPoint2: CGPoint(x: 37.19, y: 14.88))
        clip13Path.addCurve(to: CGPoint(x: 40.27, y: 39.57), controlPoint1: CGPoint(x: 37.08, y: 16.46), controlPoint2: CGPoint(x: 36.12, y: 31.14))
        clip13Path.addCurve(to: CGPoint(x: 56.65, y: 53.56), controlPoint1: CGPoint(x: 43.72, y: 46.58), controlPoint2: CGPoint(x: 50.59, y: 50.29))
        clip13Path.addLine(to: CGPoint(x: 56.88, y: 53.69))
        clip13Path.addCurve(to: CGPoint(x: 58, y: 53.97), controlPoint1: CGPoint(x: 57.23, y: 53.88), controlPoint2: CGPoint(x: 57.62, y: 53.97))
        clip13Path.addCurve(to: CGPoint(x: 59.12, y: 53.69), controlPoint1: CGPoint(x: 58.38, y: 53.97), controlPoint2: CGPoint(x: 58.77, y: 53.88))
        clip13Path.addLine(to: CGPoint(x: 59.35, y: 53.56))
        clip13Path.addCurve(to: CGPoint(x: 75.73, y: 39.57), controlPoint1: CGPoint(x: 65.41, y: 50.29), controlPoint2: CGPoint(x: 72.28, y: 46.58))
        clip13Path.addCurve(to: CGPoint(x: 78.87, y: 15.84), controlPoint1: CGPoint(x: 79.88, y: 31.14), controlPoint2: CGPoint(x: 78.92, y: 16.46))
        clip13Path.addCurve(to: CGPoint(x: 77.46, y: 13.62), controlPoint1: CGPoint(x: 78.81, y: 14.88), controlPoint2: CGPoint(x: 78.27, y: 14.03))
        clip13Path.close()
        clip13Path.usesEvenOddFillRule = true
        clip13Path.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 32, y: 1, width: 52, height: 56))
        guildHeaderDark7.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 53.06, y: 27)
        context.rotate(by: -45 * CGFloat.pi/180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: -8.5, y: -25, width: 17, height: 50))
        guildHeaderDark5.setFill()
        rectangle2Path.fill()

        context.restoreGState()


        //// Rectangle 5 Drawing
        context.saveGState()
        context.translateBy(x: 63.48, y: 18.35)
        context.rotate(by: 45 * CGFloat.pi/180)

        let rectangle5Path = UIBezierPath(rect: CGRect(x: -15, y: -1.5, width: 30, height: 3))
        guildHeaderDark5.setFill()
        rectangle5Path.fill()

        context.restoreGState()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 77.46, y: 13.62))
        bezier10Path.addLine(to: CGPoint(x: 59.06, y: 4.28))
        bezier10Path.addCurve(to: CGPoint(x: 56.93, y: 4.28), controlPoint1: CGPoint(x: 58.39, y: 3.94), controlPoint2: CGPoint(x: 57.61, y: 3.94))
        bezier10Path.addLine(to: CGPoint(x: 38.55, y: 13.62))
        bezier10Path.addCurve(to: CGPoint(x: 37.13, y: 15.84), controlPoint1: CGPoint(x: 37.73, y: 14.03), controlPoint2: CGPoint(x: 37.19, y: 14.88))
        bezier10Path.addCurve(to: CGPoint(x: 40.27, y: 39.57), controlPoint1: CGPoint(x: 37.08, y: 16.46), controlPoint2: CGPoint(x: 36.12, y: 31.14))
        bezier10Path.addCurve(to: CGPoint(x: 56.65, y: 53.56), controlPoint1: CGPoint(x: 43.72, y: 46.58), controlPoint2: CGPoint(x: 50.59, y: 50.29))
        bezier10Path.addLine(to: CGPoint(x: 56.88, y: 53.69))
        bezier10Path.addCurve(to: CGPoint(x: 58, y: 53.97), controlPoint1: CGPoint(x: 57.23, y: 53.88), controlPoint2: CGPoint(x: 57.62, y: 53.97))
        bezier10Path.addCurve(to: CGPoint(x: 59.12, y: 53.69), controlPoint1: CGPoint(x: 58.38, y: 53.97), controlPoint2: CGPoint(x: 58.77, y: 53.88))
        bezier10Path.addLine(to: CGPoint(x: 59.35, y: 53.56))
        bezier10Path.addCurve(to: CGPoint(x: 75.73, y: 39.57), controlPoint1: CGPoint(x: 65.41, y: 50.29), controlPoint2: CGPoint(x: 72.28, y: 46.58))
        bezier10Path.addCurve(to: CGPoint(x: 78.87, y: 15.84), controlPoint1: CGPoint(x: 79.88, y: 31.14), controlPoint2: CGPoint(x: 78.92, y: 16.46))
        bezier10Path.addCurve(to: CGPoint(x: 77.46, y: 13.62), controlPoint1: CGPoint(x: 78.81, y: 14.88), controlPoint2: CGPoint(x: 78.27, y: 14.03))
        bezier10Path.close()
        guildHeader.setStroke()
        bezier10Path.lineWidth = 6
        bezier10Path.stroke()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Bezier 13 Drawing
        let bezier13Path = UIBezierPath()
        bezier13Path.move(to: CGPoint(x: 58, y: 22.28))
        bezier13Path.addCurve(to: CGPoint(x: 50.5, y: 26.03), controlPoint1: CGPoint(x: 55.5, y: 22.28), controlPoint2: CGPoint(x: 50.5, y: 23.53))
        bezier13Path.addLine(to: CGPoint(x: 50.5, y: 28.7))
        bezier13Path.addLine(to: CGPoint(x: 65.5, y: 28.7))
        bezier13Path.addLine(to: CGPoint(x: 65.5, y: 26.03))
        bezier13Path.addCurve(to: CGPoint(x: 58, y: 22.28), controlPoint1: CGPoint(x: 65.5, y: 23.53), controlPoint2: CGPoint(x: 60.5, y: 22.28))
        bezier13Path.close()
        bezier13Path.move(to: CGPoint(x: 58, y: 13.7))
        bezier13Path.addCurve(to: CGPoint(x: 54.79, y: 16.92), controlPoint1: CGPoint(x: 56.23, y: 13.7), controlPoint2: CGPoint(x: 54.79, y: 15.14))
        bezier13Path.addCurve(to: CGPoint(x: 58, y: 20.13), controlPoint1: CGPoint(x: 54.79, y: 18.69), controlPoint2: CGPoint(x: 56.23, y: 20.13))
        bezier13Path.addCurve(to: CGPoint(x: 61.2, y: 16.92), controlPoint1: CGPoint(x: 59.78, y: 20.13), controlPoint2: CGPoint(x: 61.2, y: 18.69))
        bezier13Path.addCurve(to: CGPoint(x: 58, y: 13.7), controlPoint1: CGPoint(x: 61.2, y: 15.14), controlPoint2: CGPoint(x: 59.78, y: 13.7))
        bezier13Path.close()
        bezier13Path.usesEvenOddFillRule = true
        guildHeader.setFill()
        bezier13Path.fill()


        //// Bezier 14 Drawing
        let bezier14Path = UIBezierPath()
        bezier14Path.move(to: CGPoint(x: 69.77, y: 23.29))
        bezier14Path.addLine(to: CGPoint(x: 68.01, y: 24.22))
        bezier14Path.addCurve(to: CGPoint(x: 66.93, y: 23.45), controlPoint1: CGPoint(x: 67.28, y: 24.61), controlPoint2: CGPoint(x: 66.79, y: 24.25))
        bezier14Path.addLine(to: CGPoint(x: 67.27, y: 21.46))
        bezier14Path.addLine(to: CGPoint(x: 65.85, y: 20.06))
        bezier14Path.addCurve(to: CGPoint(x: 66.26, y: 18.78), controlPoint1: CGPoint(x: 65.25, y: 19.47), controlPoint2: CGPoint(x: 65.44, y: 18.9))
        bezier14Path.addLine(to: CGPoint(x: 68.22, y: 18.49))
        bezier14Path.addLine(to: CGPoint(x: 69.1, y: 16.7))
        bezier14Path.addCurve(to: CGPoint(x: 70.43, y: 16.7), controlPoint1: CGPoint(x: 69.47, y: 15.95), controlPoint2: CGPoint(x: 70.06, y: 15.95))
        bezier14Path.addLine(to: CGPoint(x: 71.31, y: 18.49))
        bezier14Path.addLine(to: CGPoint(x: 73.28, y: 18.78))
        bezier14Path.addCurve(to: CGPoint(x: 73.69, y: 20.06), controlPoint1: CGPoint(x: 74.1, y: 18.9), controlPoint2: CGPoint(x: 74.28, y: 19.47))
        bezier14Path.addLine(to: CGPoint(x: 72.26, y: 21.46))
        bezier14Path.addLine(to: CGPoint(x: 72.6, y: 23.45))
        bezier14Path.addCurve(to: CGPoint(x: 71.53, y: 24.22), controlPoint1: CGPoint(x: 72.74, y: 24.26), controlPoint2: CGPoint(x: 72.26, y: 24.61))
        bezier14Path.addLine(to: CGPoint(x: 69.77, y: 23.29))
        bezier14Path.close()
        bezier14Path.usesEvenOddFillRule = true
        guildHeader.setFill()
        bezier14Path.fill()


        //// Bezier 16 Drawing
        let bezier16Path = UIBezierPath()
        bezier16Path.move(to: CGPoint(x: 46.75, y: 22.57))
        bezier16Path.addLine(to: CGPoint(x: 44.99, y: 23.5))
        bezier16Path.addCurve(to: CGPoint(x: 43.91, y: 22.73), controlPoint1: CGPoint(x: 44.26, y: 23.89), controlPoint2: CGPoint(x: 43.78, y: 23.54))
        bezier16Path.addLine(to: CGPoint(x: 44.25, y: 20.74))
        bezier16Path.addLine(to: CGPoint(x: 42.83, y: 19.34))
        bezier16Path.addCurve(to: CGPoint(x: 43.24, y: 18.06), controlPoint1: CGPoint(x: 42.24, y: 18.75), controlPoint2: CGPoint(x: 42.42, y: 18.18))
        bezier16Path.addLine(to: CGPoint(x: 45.21, y: 17.78))
        bezier16Path.addLine(to: CGPoint(x: 46.09, y: 15.98))
        bezier16Path.addCurve(to: CGPoint(x: 47.41, y: 15.98), controlPoint1: CGPoint(x: 46.45, y: 15.23), controlPoint2: CGPoint(x: 47.05, y: 15.23))
        bezier16Path.addLine(to: CGPoint(x: 48.29, y: 17.78))
        bezier16Path.addLine(to: CGPoint(x: 50.26, y: 18.06))
        bezier16Path.addCurve(to: CGPoint(x: 50.67, y: 19.34), controlPoint1: CGPoint(x: 51.08, y: 18.18), controlPoint2: CGPoint(x: 51.26, y: 18.76))
        bezier16Path.addLine(to: CGPoint(x: 49.25, y: 20.74))
        bezier16Path.addLine(to: CGPoint(x: 49.59, y: 22.73))
        bezier16Path.addCurve(to: CGPoint(x: 48.51, y: 23.5), controlPoint1: CGPoint(x: 49.72, y: 23.55), controlPoint2: CGPoint(x: 49.24, y: 23.89))
        bezier16Path.addLine(to: CGPoint(x: 46.75, y: 22.57))
        bezier16Path.close()
        bezier16Path.usesEvenOddFillRule = true
        guildHeader.setFill()
        bezier16Path.fill()


        //// Bezier 17 Drawing
        let bezier17Path = UIBezierPath()
        bezier17Path.move(to: CGPoint(x: 0, y: 34))
        bezier17Path.addLine(to: CGPoint(x: 25, y: 34))
        bezier17Path.addLine(to: CGPoint(x: 25, y: 53))
        bezier17Path.addLine(to: CGPoint(x: 0, y: 53))
        bezier17Path.addLine(to: CGPoint(x: 9, y: 43.5))
        bezier17Path.addLine(to: CGPoint(x: 0, y: 34))
        bezier17Path.close()
        bezier17Path.usesEvenOddFillRule = true
        guildHeaderDark2.setFill()
        bezier17Path.fill()


        //// Bezier 18 Drawing
        let bezier18Path = UIBezierPath()
        bezier18Path.move(to: CGPoint(x: 116, y: 34))
        bezier18Path.addLine(to: CGPoint(x: 91, y: 34))
        bezier18Path.addLine(to: CGPoint(x: 91, y: 53))
        bezier18Path.addLine(to: CGPoint(x: 116, y: 53))
        bezier18Path.addLine(to: CGPoint(x: 107, y: 43.5))
        bezier18Path.addLine(to: CGPoint(x: 116, y: 34))
        bezier18Path.close()
        bezier18Path.usesEvenOddFillRule = true
        guildHeaderDark2.setFill()
        bezier18Path.fill()


        //// Bezier 19 Drawing
        let bezier19Path = UIBezierPath()
        bezier19Path.move(to: CGPoint(x: 16, y: 44))
        bezier19Path.addLine(to: CGPoint(x: 25, y: 53))
        bezier19Path.addLine(to: CGPoint(x: 25, y: 41))
        bezier19Path.addLine(to: CGPoint(x: 16, y: 44))
        bezier19Path.close()
        bezier19Path.usesEvenOddFillRule = true
        guildHeaderDark6.setFill()
        bezier19Path.fill()


        //// Bezier 20 Drawing
        let bezier20Path = UIBezierPath()
        bezier20Path.move(to: CGPoint(x: 100, y: 44))
        bezier20Path.addLine(to: CGPoint(x: 91, y: 53))
        bezier20Path.addLine(to: CGPoint(x: 91, y: 41))
        bezier20Path.addLine(to: CGPoint(x: 100, y: 44))
        bezier20Path.close()
        bezier20Path.usesEvenOddFillRule = true
        guildHeaderDark6.setFill()
        bezier20Path.fill()


        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(rect: CGRect(x: 16, y: 25, width: 84, height: 19))
        guildHeaderDark2.setFill()
        rectangle9Path.fill()


        //// Label Drawing
        context.saveGState()
        context.translateBy(x: -140.62, y: 18)

        let labelRect = CGRect(x: -178, y: 3, width: 400.27, height: 25)
        let labelTextContent = "GUILDS"
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: (shadow2.shadowColor as! UIColor).cgColor)
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .center
        let labelFontAttributes = [
            .font: UIFont(name: "HelveticaNeue", size: 12)!,
            .foregroundColor: textForeground2,
            .paragraphStyle: labelStyle,
        ] as [NSAttributedStringKey: Any]

        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()
        context.restoreGState()


        context.restoreGState()


        //// Label 2 Drawing
        let label2Rect = CGRect(x: 35.38, y: 24, width: 44.27, height: 19)
        let label2TextContent = "GUILDS"
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .center
        let label2FontAttributes = [
            .font: UIFont(name: "HelveticaNeue", size: 12)!,
            .foregroundColor: textForeground2,
            .paragraphStyle: label2Style,
        ] as [NSAttributedStringKey: Any]

        let label2TextHeight: CGFloat = label2TextContent.boundingRect(with: CGSize(width: label2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label2Rect)
        label2TextContent.draw(in: CGRect(x: label2Rect.minX, y: label2Rect.minY + (label2Rect.height - label2TextHeight) / 2, width: label2Rect.width, height: label2TextHeight), withAttributes: label2FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawTwoHandedIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 15), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 15, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 15, y: resizedFrame.height / 15)


        //// Color Declarations
        let fillColor39 = UIColor(red: 0.741, green: 0.659, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 13.85, y: 11.48))
        bezierPath.addCurve(to: CGPoint(x: 11.74, y: 13.59), controlPoint1: CGPoint(x: 13.85, y: 12.64), controlPoint2: CGPoint(x: 12.9, y: 13.59))
        bezierPath.addLine(to: CGPoint(x: 9.27, y: 13.59))
        bezierPath.addCurve(to: CGPoint(x: 7.9, y: 13.08), controlPoint1: CGPoint(x: 8.72, y: 13.59), controlPoint2: CGPoint(x: 8.34, y: 13.46))
        bezierPath.addLine(to: CGPoint(x: 8.16, y: 13.08))
        bezierPath.addCurve(to: CGPoint(x: 11.27, y: 9.97), controlPoint1: CGPoint(x: 9.88, y: 13.08), controlPoint2: CGPoint(x: 11.27, y: 11.69))
        bezierPath.addLine(to: CGPoint(x: 11.27, y: 3.78))
        bezierPath.addCurve(to: CGPoint(x: 11.66, y: 3.4), controlPoint1: CGPoint(x: 11.28, y: 3.57), controlPoint2: CGPoint(x: 11.45, y: 3.4))
        bezierPath.addCurve(to: CGPoint(x: 12.06, y: 3.79), controlPoint1: CGPoint(x: 11.88, y: 3.4), controlPoint2: CGPoint(x: 12.06, y: 3.58))
        bezierPath.addLine(to: CGPoint(x: 12.06, y: 7.67))
        bezierPath.addCurve(to: CGPoint(x: 12.56, y: 8.17), controlPoint1: CGPoint(x: 12.06, y: 7.95), controlPoint2: CGPoint(x: 12.28, y: 8.17))
        bezierPath.addCurve(to: CGPoint(x: 13.06, y: 7.67), controlPoint1: CGPoint(x: 12.83, y: 8.17), controlPoint2: CGPoint(x: 13.06, y: 7.95))
        bezierPath.addLine(to: CGPoint(x: 13.06, y: 4.9))
        bezierPath.addCurve(to: CGPoint(x: 13.45, y: 4.5), controlPoint1: CGPoint(x: 13.06, y: 4.68), controlPoint2: CGPoint(x: 13.24, y: 4.5))
        bezierPath.addCurve(to: CGPoint(x: 13.85, y: 4.9), controlPoint1: CGPoint(x: 13.67, y: 4.5), controlPoint2: CGPoint(x: 13.85, y: 4.68))
        bezierPath.addLine(to: CGPoint(x: 13.85, y: 11.48))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 5.71, y: 12.08))
        bezierPath.addLine(to: CGPoint(x: 5.69, y: 12.08))
        bezierPath.addCurve(to: CGPoint(x: 2.41, y: 9.29), controlPoint1: CGPoint(x: 4.55, y: 12.08), controlPoint2: CGPoint(x: 4.11, y: 11.55))
        bezierPath.addCurve(to: CGPoint(x: 1.15, y: 7.64), controlPoint1: CGPoint(x: 2.05, y: 8.81), controlPoint2: CGPoint(x: 1.64, y: 8.26))
        bezierPath.addCurve(to: CGPoint(x: 1.94, y: 7.33), controlPoint1: CGPoint(x: 1.36, y: 7.46), controlPoint2: CGPoint(x: 1.6, y: 7.29))
        bezierPath.addCurve(to: CGPoint(x: 3.18, y: 8.26), controlPoint1: CGPoint(x: 2.48, y: 7.34), controlPoint2: CGPoint(x: 2.91, y: 7.84))
        bezierPath.addCurve(to: CGPoint(x: 3.74, y: 8.47), controlPoint1: CGPoint(x: 3.3, y: 8.45), controlPoint2: CGPoint(x: 3.53, y: 8.53))
        bezierPath.addCurve(to: CGPoint(x: 4.1, y: 7.99), controlPoint1: CGPoint(x: 3.96, y: 8.41), controlPoint2: CGPoint(x: 4.1, y: 8.21))
        bezierPath.addLine(to: CGPoint(x: 4.1, y: 2.39))
        bezierPath.addCurve(to: CGPoint(x: 4.5, y: 1.99), controlPoint1: CGPoint(x: 4.1, y: 2.17), controlPoint2: CGPoint(x: 4.28, y: 1.99))
        bezierPath.addCurve(to: CGPoint(x: 4.9, y: 2.39), controlPoint1: CGPoint(x: 4.72, y: 1.99), controlPoint2: CGPoint(x: 4.9, y: 2.17))
        bezierPath.addLine(to: CGPoint(x: 4.9, y: 6.17))
        bezierPath.addCurve(to: CGPoint(x: 5.4, y: 6.67), controlPoint1: CGPoint(x: 4.9, y: 6.44), controlPoint2: CGPoint(x: 5.12, y: 6.67))
        bezierPath.addCurve(to: CGPoint(x: 5.9, y: 6.17), controlPoint1: CGPoint(x: 5.67, y: 6.67), controlPoint2: CGPoint(x: 5.9, y: 6.44))
        bezierPath.addLine(to: CGPoint(x: 5.9, y: 1.4))
        bezierPath.addCurve(to: CGPoint(x: 6.29, y: 1), controlPoint1: CGPoint(x: 5.9, y: 1.18), controlPoint2: CGPoint(x: 6.07, y: 1))
        bezierPath.addCurve(to: CGPoint(x: 6.69, y: 1.4), controlPoint1: CGPoint(x: 6.51, y: 1), controlPoint2: CGPoint(x: 6.69, y: 1.18))
        bezierPath.addLine(to: CGPoint(x: 6.69, y: 5.24))
        bezierPath.addCurve(to: CGPoint(x: 7.19, y: 5.74), controlPoint1: CGPoint(x: 6.69, y: 5.52), controlPoint2: CGPoint(x: 6.91, y: 5.74))
        bezierPath.addCurve(to: CGPoint(x: 7.68, y: 5.26), controlPoint1: CGPoint(x: 7.46, y: 5.74), controlPoint2: CGPoint(x: 7.67, y: 5.52))
        bezierPath.addLine(to: CGPoint(x: 7.69, y: 2.29))
        bezierPath.addCurve(to: CGPoint(x: 8.08, y: 1.9), controlPoint1: CGPoint(x: 7.69, y: 2.07), controlPoint2: CGPoint(x: 7.86, y: 1.9))
        bezierPath.addCurve(to: CGPoint(x: 8.48, y: 2.29), controlPoint1: CGPoint(x: 8.3, y: 1.9), controlPoint2: CGPoint(x: 8.48, y: 2.08))
        bezierPath.addLine(to: CGPoint(x: 8.48, y: 6.17))
        bezierPath.addCurve(to: CGPoint(x: 8.98, y: 6.67), controlPoint1: CGPoint(x: 8.48, y: 6.44), controlPoint2: CGPoint(x: 8.7, y: 6.67))
        bezierPath.addCurve(to: CGPoint(x: 9.47, y: 6.18), controlPoint1: CGPoint(x: 9.25, y: 6.67), controlPoint2: CGPoint(x: 9.46, y: 6.45))
        bezierPath.addCurve(to: CGPoint(x: 9.48, y: 6.17), controlPoint1: CGPoint(x: 9.47, y: 6.18), controlPoint2: CGPoint(x: 9.48, y: 6.17))
        bezierPath.addLine(to: CGPoint(x: 9.48, y: 3.4))
        bezierPath.addCurve(to: CGPoint(x: 9.87, y: 3), controlPoint1: CGPoint(x: 9.48, y: 3.18), controlPoint2: CGPoint(x: 9.66, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 10.27, y: 3.4), controlPoint1: CGPoint(x: 10.09, y: 3), controlPoint2: CGPoint(x: 10.27, y: 3.18))
        bezierPath.addLine(to: CGPoint(x: 10.27, y: 9.97))
        bezierPath.addCurve(to: CGPoint(x: 8.16, y: 12.08), controlPoint1: CGPoint(x: 10.27, y: 11.14), controlPoint2: CGPoint(x: 9.32, y: 12.08))
        bezierPath.addLine(to: CGPoint(x: 5.71, y: 12.08))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 13.45, y: 3.5))
        bezierPath.addCurve(to: CGPoint(x: 13.04, y: 3.57), controlPoint1: CGPoint(x: 13.31, y: 3.5), controlPoint2: CGPoint(x: 13.17, y: 3.53))
        bezierPath.addCurve(to: CGPoint(x: 11.66, y: 2.4), controlPoint1: CGPoint(x: 12.93, y: 2.91), controlPoint2: CGPoint(x: 12.36, y: 2.4))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 2.58), controlPoint1: CGPoint(x: 11.42, y: 2.4), controlPoint2: CGPoint(x: 11.2, y: 2.47))
        bezierPath.addCurve(to: CGPoint(x: 9.87, y: 2), controlPoint1: CGPoint(x: 10.74, y: 2.23), controlPoint2: CGPoint(x: 10.34, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 9.46, y: 2.07), controlPoint1: CGPoint(x: 9.73, y: 2), controlPoint2: CGPoint(x: 9.59, y: 2.03))
        bezierPath.addCurve(to: CGPoint(x: 8.08, y: 0.9), controlPoint1: CGPoint(x: 9.35, y: 1.41), controlPoint2: CGPoint(x: 8.78, y: 0.9))
        bezierPath.addCurve(to: CGPoint(x: 7.62, y: 0.98), controlPoint1: CGPoint(x: 7.92, y: 0.9), controlPoint2: CGPoint(x: 7.76, y: 0.93))
        bezierPath.addCurve(to: CGPoint(x: 6.29, y: -0), controlPoint1: CGPoint(x: 7.44, y: 0.41), controlPoint2: CGPoint(x: 6.92, y: -0))
        bezierPath.addCurve(to: CGPoint(x: 4.94, y: 1.07), controlPoint1: CGPoint(x: 5.63, y: -0), controlPoint2: CGPoint(x: 5.09, y: 0.46))
        bezierPath.addCurve(to: CGPoint(x: 4.5, y: 0.99), controlPoint1: CGPoint(x: 4.8, y: 1.02), controlPoint2: CGPoint(x: 4.65, y: 0.99))
        bezierPath.addCurve(to: CGPoint(x: 3.1, y: 2.39), controlPoint1: CGPoint(x: 3.73, y: 0.99), controlPoint2: CGPoint(x: 3.1, y: 1.62))
        bezierPath.addLine(to: CGPoint(x: 3.1, y: 6.72))
        bezierPath.addCurve(to: CGPoint(x: 1.96, y: 6.33), controlPoint1: CGPoint(x: 2.68, y: 6.42), controlPoint2: CGPoint(x: 2.28, y: 6.33))
        bezierPath.addCurve(to: CGPoint(x: 0.1, y: 7.32), controlPoint1: CGPoint(x: 1.11, y: 6.27), controlPoint2: CGPoint(x: 0.45, y: 6.82))
        bezierPath.addCurve(to: CGPoint(x: 0.11, y: 7.92), controlPoint1: CGPoint(x: -0.04, y: 7.5), controlPoint2: CGPoint(x: -0.03, y: 7.74))
        bezierPath.addCurve(to: CGPoint(x: 1.62, y: 9.9), controlPoint1: CGPoint(x: 0.7, y: 8.68), controlPoint2: CGPoint(x: 1.19, y: 9.33))
        bezierPath.addCurve(to: CGPoint(x: 5.69, y: 13.08), controlPoint1: CGPoint(x: 3.31, y: 12.15), controlPoint2: CGPoint(x: 4.01, y: 13.08))
        bezierPath.addLine(to: CGPoint(x: 6.51, y: 13.08))
        bezierPath.addCurve(to: CGPoint(x: 9.27, y: 14.59), controlPoint1: CGPoint(x: 7.4, y: 14.12), controlPoint2: CGPoint(x: 8.1, y: 14.59))
        bezierPath.addLine(to: CGPoint(x: 11.74, y: 14.59))
        bezierPath.addCurve(to: CGPoint(x: 14.85, y: 11.48), controlPoint1: CGPoint(x: 13.45, y: 14.59), controlPoint2: CGPoint(x: 14.85, y: 13.19))
        bezierPath.addLine(to: CGPoint(x: 14.85, y: 4.9))
        bezierPath.addCurve(to: CGPoint(x: 13.45, y: 3.5), controlPoint1: CGPoint(x: 14.85, y: 4.13), controlPoint2: CGPoint(x: 14.22, y: 3.5))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor39.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBlankAvatarIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 34), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 34), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 34)


        //// Color Declarations
        let fillColor40 = UIColor(red: 0.647, green: 0.631, blue: 0.675, alpha: 1.000)
        let fillColor101 = UIColor(red: 0.969, green: 0.306, blue: 0.322, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 14, y: 28))
        bezierPath.addLine(to: CGPoint(x: 22, y: 28))
        bezierPath.addLine(to: CGPoint(x: 22, y: 30))
        bezierPath.addLine(to: CGPoint(x: 14, y: 30))
        bezierPath.addLine(to: CGPoint(x: 14, y: 28))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 12, y: 6))
        bezierPath.addLine(to: CGPoint(x: 24, y: 6))
        bezierPath.addLine(to: CGPoint(x: 24, y: 8))
        bezierPath.addLine(to: CGPoint(x: 12, y: 8))
        bezierPath.addLine(to: CGPoint(x: 12, y: 6))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 6, y: 12))
        bezierPath.addLine(to: CGPoint(x: 8, y: 12))
        bezierPath.addLine(to: CGPoint(x: 8, y: 22))
        bezierPath.addLine(to: CGPoint(x: 6, y: 22))
        bezierPath.addLine(to: CGPoint(x: 6, y: 12))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 28, y: 12))
        bezierPath.addLine(to: CGPoint(x: 30, y: 12))
        bezierPath.addLine(to: CGPoint(x: 30, y: 22))
        bezierPath.addLine(to: CGPoint(x: 28, y: 22))
        bezierPath.addLine(to: CGPoint(x: 28, y: 12))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 26, y: 10))
        bezierPath.addLine(to: CGPoint(x: 28, y: 10))
        bezierPath.addLine(to: CGPoint(x: 28, y: 12))
        bezierPath.addLine(to: CGPoint(x: 26, y: 12))
        bezierPath.addLine(to: CGPoint(x: 26, y: 10))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 24, y: 8))
        bezierPath.addLine(to: CGPoint(x: 26, y: 8))
        bezierPath.addLine(to: CGPoint(x: 26, y: 10))
        bezierPath.addLine(to: CGPoint(x: 24, y: 10))
        bezierPath.addLine(to: CGPoint(x: 24, y: 8))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10, y: 8))
        bezierPath.addLine(to: CGPoint(x: 12, y: 8))
        bezierPath.addLine(to: CGPoint(x: 12, y: 10))
        bezierPath.addLine(to: CGPoint(x: 10, y: 10))
        bezierPath.addLine(to: CGPoint(x: 10, y: 8))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 8, y: 10))
        bezierPath.addLine(to: CGPoint(x: 10, y: 10))
        bezierPath.addLine(to: CGPoint(x: 10, y: 12))
        bezierPath.addLine(to: CGPoint(x: 8, y: 12))
        bezierPath.addLine(to: CGPoint(x: 8, y: 10))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 8, y: 22))
        bezierPath.addLine(to: CGPoint(x: 10, y: 22))
        bezierPath.addLine(to: CGPoint(x: 10, y: 24))
        bezierPath.addLine(to: CGPoint(x: 8, y: 24))
        bezierPath.addLine(to: CGPoint(x: 8, y: 22))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10, y: 24))
        bezierPath.addLine(to: CGPoint(x: 12, y: 24))
        bezierPath.addLine(to: CGPoint(x: 12, y: 26))
        bezierPath.addLine(to: CGPoint(x: 10, y: 26))
        bezierPath.addLine(to: CGPoint(x: 10, y: 24))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 12, y: 26))
        bezierPath.addLine(to: CGPoint(x: 14, y: 26))
        bezierPath.addLine(to: CGPoint(x: 14, y: 28))
        bezierPath.addLine(to: CGPoint(x: 12, y: 28))
        bezierPath.addLine(to: CGPoint(x: 12, y: 26))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 22, y: 26))
        bezierPath.addLine(to: CGPoint(x: 24, y: 26))
        bezierPath.addLine(to: CGPoint(x: 24, y: 28))
        bezierPath.addLine(to: CGPoint(x: 22, y: 28))
        bezierPath.addLine(to: CGPoint(x: 22, y: 26))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 26, y: 22))
        bezierPath.addLine(to: CGPoint(x: 28, y: 22))
        bezierPath.addLine(to: CGPoint(x: 28, y: 24))
        bezierPath.addLine(to: CGPoint(x: 26, y: 24))
        bezierPath.addLine(to: CGPoint(x: 26, y: 22))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 24, y: 24))
        bezierPath.addLine(to: CGPoint(x: 26, y: 24))
        bezierPath.addLine(to: CGPoint(x: 26, y: 26))
        bezierPath.addLine(to: CGPoint(x: 24, y: 26))
        bezierPath.addLine(to: CGPoint(x: 24, y: 24))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor40.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 34, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 36, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 36, y: 2))
        bezier2Path.addLine(to: CGPoint(x: 34, y: 2))
        bezier2Path.addLine(to: CGPoint(x: 34, y: 4))
        bezier2Path.addLine(to: CGPoint(x: 32, y: 4))
        bezier2Path.addLine(to: CGPoint(x: 32, y: 6))
        bezier2Path.addLine(to: CGPoint(x: 30, y: 6))
        bezier2Path.addLine(to: CGPoint(x: 30, y: 8))
        bezier2Path.addLine(to: CGPoint(x: 28, y: 8))
        bezier2Path.addLine(to: CGPoint(x: 28, y: 10))
        bezier2Path.addLine(to: CGPoint(x: 26, y: 10))
        bezier2Path.addLine(to: CGPoint(x: 26, y: 12))
        bezier2Path.addLine(to: CGPoint(x: 24, y: 12))
        bezier2Path.addLine(to: CGPoint(x: 24, y: 14))
        bezier2Path.addLine(to: CGPoint(x: 22, y: 14))
        bezier2Path.addLine(to: CGPoint(x: 22, y: 16))
        bezier2Path.addLine(to: CGPoint(x: 20, y: 16))
        bezier2Path.addLine(to: CGPoint(x: 20, y: 18))
        bezier2Path.addLine(to: CGPoint(x: 18, y: 18))
        bezier2Path.addLine(to: CGPoint(x: 18, y: 20))
        bezier2Path.addLine(to: CGPoint(x: 16, y: 20))
        bezier2Path.addLine(to: CGPoint(x: 16, y: 22))
        bezier2Path.addLine(to: CGPoint(x: 14, y: 22))
        bezier2Path.addLine(to: CGPoint(x: 14, y: 24))
        bezier2Path.addLine(to: CGPoint(x: 12, y: 24))
        bezier2Path.addLine(to: CGPoint(x: 12, y: 26))
        bezier2Path.addLine(to: CGPoint(x: 10, y: 26))
        bezier2Path.addLine(to: CGPoint(x: 10, y: 28))
        bezier2Path.addLine(to: CGPoint(x: 8, y: 28))
        bezier2Path.addLine(to: CGPoint(x: 8, y: 30))
        bezier2Path.addLine(to: CGPoint(x: 6, y: 30))
        bezier2Path.addLine(to: CGPoint(x: 6, y: 32))
        bezier2Path.addLine(to: CGPoint(x: 4, y: 32))
        bezier2Path.addLine(to: CGPoint(x: 4, y: 34))
        bezier2Path.addLine(to: CGPoint(x: 2, y: 34))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 34))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 32))
        bezier2Path.addLine(to: CGPoint(x: 2, y: 32))
        bezier2Path.addLine(to: CGPoint(x: 2, y: 30))
        bezier2Path.addLine(to: CGPoint(x: 4, y: 30))
        bezier2Path.addLine(to: CGPoint(x: 4, y: 28))
        bezier2Path.addLine(to: CGPoint(x: 6, y: 28))
        bezier2Path.addLine(to: CGPoint(x: 6, y: 26))
        bezier2Path.addLine(to: CGPoint(x: 8, y: 26))
        bezier2Path.addLine(to: CGPoint(x: 8, y: 24))
        bezier2Path.addLine(to: CGPoint(x: 10, y: 24))
        bezier2Path.addLine(to: CGPoint(x: 10, y: 22))
        bezier2Path.addLine(to: CGPoint(x: 12, y: 22))
        bezier2Path.addLine(to: CGPoint(x: 12, y: 20))
        bezier2Path.addLine(to: CGPoint(x: 14, y: 20))
        bezier2Path.addLine(to: CGPoint(x: 14, y: 18))
        bezier2Path.addLine(to: CGPoint(x: 16, y: 18))
        bezier2Path.addLine(to: CGPoint(x: 16, y: 16))
        bezier2Path.addLine(to: CGPoint(x: 18, y: 16))
        bezier2Path.addLine(to: CGPoint(x: 18, y: 14))
        bezier2Path.addLine(to: CGPoint(x: 20, y: 14))
        bezier2Path.addLine(to: CGPoint(x: 20, y: 12))
        bezier2Path.addLine(to: CGPoint(x: 22, y: 12))
        bezier2Path.addLine(to: CGPoint(x: 22, y: 10))
        bezier2Path.addLine(to: CGPoint(x: 24, y: 10))
        bezier2Path.addLine(to: CGPoint(x: 24, y: 8))
        bezier2Path.addLine(to: CGPoint(x: 26, y: 8))
        bezier2Path.addLine(to: CGPoint(x: 26, y: 6))
        bezier2Path.addLine(to: CGPoint(x: 28, y: 6))
        bezier2Path.addLine(to: CGPoint(x: 28, y: 4))
        bezier2Path.addLine(to: CGPoint(x: 30, y: 4))
        bezier2Path.addLine(to: CGPoint(x: 30, y: 2))
        bezier2Path.addLine(to: CGPoint(x: 32, y: 2))
        bezier2Path.addLine(to: CGPoint(x: 32, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 34, y: 0))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        fillColor101.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDisclosureArrow(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 8, height: 13), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 8, height: 13), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 8, y: resizedFrame.height / 13)


        //// Color Declarations
        let fillColor102 = UIColor(red: 0.780, green: 0.780, blue: 0.800, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: 1.5))
        bezierPath.addLine(to: CGPoint(x: 1.5, y: 0))
        bezierPath.addLine(to: CGPoint(x: 8, y: 6.5))
        bezierPath.addLine(to: CGPoint(x: 1.5, y: 13))
        bezierPath.addLine(to: CGPoint(x: 0, y: 11.5))
        bezierPath.addLine(to: CGPoint(x: 5, y: 6.5))
        bezierPath.addLine(to: CGPoint(x: 0, y: 1.5))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor102.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawFilterIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 22), resizing: ResizingBehavior = .aspectFit, percentage: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 22)


        //// Color Declarations
        let strokeColor19 = UIColor(red: 0.604, green: 0.384, blue: 1.000, alpha: 1.000)

        //// Variable Declarations
        let filterNode1Position: CGFloat = 3 + 10 * percentage
        let filterNode2Position: CGFloat = 13 - 10 * percentage
        let filterNode3Position: CGFloat = 3 + 5 * percentage

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 1.5, y: 18))
        bezierPath.addLine(to: CGPoint(x: 20.53, y: 18))
        strokeColor19.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.lineCapStyle = .round
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 1.5, y: 11))
        bezier2Path.addLine(to: CGPoint(x: 20.53, y: 11))
        strokeColor19.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.lineCapStyle = .round
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 1.5, y: 4))
        bezier3Path.addLine(to: CGPoint(x: 20.53, y: 4))
        strokeColor19.setStroke()
        bezier3Path.lineWidth = 2
        bezier3Path.lineCapStyle = .round
        bezier3Path.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: filterNode1Position, y: 1, width: 5, height: 5))
        UIColor.white.setFill()
        oval2Path.fill()
        strokeColor19.setStroke()
        oval2Path.lineWidth = 1.5
        oval2Path.stroke()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: filterNode2Position, y: 8, width: 5, height: 5))
        UIColor.white.setFill()
        oval4Path.fill()
        strokeColor19.setStroke()
        oval4Path.lineWidth = 1.5
        oval4Path.stroke()


        //// Oval 6 Drawing
        let oval6Path = UIBezierPath(ovalIn: CGRect(x: filterNode3Position, y: 16, width: 5, height: 5))
        UIColor.white.setFill()
        oval6Path.fill()
        strokeColor19.setStroke()
        oval6Path.lineWidth = 1.5
        oval6Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDeclineIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 13, height: 13), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 13, height: 13), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 13, y: resizedFrame.height / 13)


        //// Color Declarations
        let strokeColor20 = UIColor(red: 0.969, green: 0.306, blue: 0.322, alpha: 1.000)

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 2, y: 2.75))
        bezier2Path.addLine(to: CGPoint(x: 2.75, y: 2))
        bezier2Path.addLine(to: CGPoint(x: 6.5, y: 5.75))
        bezier2Path.addLine(to: CGPoint(x: 10.25, y: 2))
        bezier2Path.addLine(to: CGPoint(x: 11, y: 2.75))
        bezier2Path.addLine(to: CGPoint(x: 7.25, y: 6.5))
        bezier2Path.addLine(to: CGPoint(x: 11, y: 10.25))
        bezier2Path.addLine(to: CGPoint(x: 10.25, y: 11))
        bezier2Path.addLine(to: CGPoint(x: 6.5, y: 7.25))
        bezier2Path.addLine(to: CGPoint(x: 2.75, y: 11))
        bezier2Path.addLine(to: CGPoint(x: 2, y: 10.25))
        bezier2Path.addLine(to: CGPoint(x: 5.75, y: 6.5))
        bezier2Path.addLine(to: CGPoint(x: 2, y: 2.75))
        bezier2Path.close()
        strokeColor20.setStroke()
        bezier2Path.lineWidth = 1.1
        bezier2Path.miterLimit = 10
        bezier2Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawAcceptIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 13, height: 13), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 13, height: 13), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 13, y: resizedFrame.height / 13)


        //// Color Declarations
        let fillColor103 = UIColor(red: 0.125, green: 0.718, blue: 0.502, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 1.5, y: 6.5))
        bezierPath.addLine(to: CGPoint(x: 0, y: 8))
        bezierPath.addLine(to: CGPoint(x: 4, y: 12))
        bezierPath.addLine(to: CGPoint(x: 13, y: 3.5))
        bezierPath.addLine(to: CGPoint(x: 11.5, y: 2))
        bezierPath.addLine(to: CGPoint(x: 4, y: 9))
        bezierPath.addLine(to: CGPoint(x: 1.5, y: 6.5))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor103.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBuffIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 15), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 15, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 15, y: resizedFrame.height / 15)


        //// Color Declarations
        let fillColor18 = UIColor(red: 0.604, green: 0.384, blue: 1.000, alpha: 1.000)
        let fillColor85 = UIColor(red: 0.929, green: 0.925, blue: 0.933, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 15, height: 15), cornerRadius: 2)
        fillColor85.setFill()
        rectanglePath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 7.5, y: 3))
        bezier2Path.addLine(to: CGPoint(x: 11.25, y: 7.5))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 7.5))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 9))
        bezier2Path.addLine(to: CGPoint(x: 6, y: 9))
        bezier2Path.addLine(to: CGPoint(x: 6, y: 7.5))
        bezier2Path.addLine(to: CGPoint(x: 3.75, y: 7.5))
        bezier2Path.addLine(to: CGPoint(x: 7.5, y: 3))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 6, y: 9.75))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 9.75))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 10.5))
        bezier2Path.addLine(to: CGPoint(x: 6, y: 10.5))
        bezier2Path.addLine(to: CGPoint(x: 6, y: 9.75))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 6, y: 11.25))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 11.25))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 12))
        bezier2Path.addLine(to: CGPoint(x: 6, y: 12))
        bezier2Path.addLine(to: CGPoint(x: 6, y: 11.25))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        fillColor18.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfExperience: UIImage {
        if Cache.imageOfExperience != nil {
            return Cache.imageOfExperience!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 18), false, 0)
            HabiticaIcons.drawExperience()

        Cache.imageOfExperience = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfExperience!
    }

    @objc dynamic public class var imageOfMagic: UIImage {
        if Cache.imageOfMagic != nil {
            return Cache.imageOfMagic!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 18), false, 0)
            HabiticaIcons.drawMagic()

        Cache.imageOfMagic = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfMagic!
    }

    @objc dynamic public class var imageOfGold: UIImage {
        if Cache.imageOfGold != nil {
            return Cache.imageOfGold!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 18), false, 0)
            HabiticaIcons.drawGold()

        Cache.imageOfGold = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfGold!
    }

    @objc dynamic public class var imageOfGem: UIImage {
        if Cache.imageOfGem != nil {
            return Cache.imageOfGem!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 18), false, 0)
            HabiticaIcons.drawGem()

        Cache.imageOfGem = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfGem!
    }

    @objc dynamic public class var imageOfHourglass: UIImage {
        if Cache.imageOfHourglass != nil {
            return Cache.imageOfHourglass!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 18), false, 0)
            HabiticaIcons.drawHourglass()

        Cache.imageOfHourglass = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfHourglass!
    }

    @objc dynamic public class var imageOfExperienceReward: UIImage {
        if Cache.imageOfExperienceReward != nil {
            return Cache.imageOfExperienceReward!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
            HabiticaIcons.drawExperienceReward()

        Cache.imageOfExperienceReward = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfExperienceReward!
    }

    @objc dynamic public class var imageOfGoldReward: UIImage {
        if Cache.imageOfGoldReward != nil {
            return Cache.imageOfGoldReward!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
            HabiticaIcons.drawGoldReward()

        Cache.imageOfGoldReward = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfGoldReward!
    }

    @objc dynamic public class var imageOfHeartDarkBg: UIImage {
        if Cache.imageOfHeartDarkBg != nil {
            return Cache.imageOfHeartDarkBg!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 18), false, 0)
            HabiticaIcons.drawHeartDarkBg()

        Cache.imageOfHeartDarkBg = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfHeartDarkBg!
    }

    @objc dynamic public class var imageOfHeartLightBg: UIImage {
        if Cache.imageOfHeartLightBg != nil {
            return Cache.imageOfHeartLightBg!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 18), false, 0)
            HabiticaIcons.drawHeartLightBg()

        Cache.imageOfHeartLightBg = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfHeartLightBg!
    }

    @objc dynamic public class var imageOfHeartLarge: UIImage {
        if Cache.imageOfHeartLarge != nil {
            return Cache.imageOfHeartLarge!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
            HabiticaIcons.drawHeartLarge()

        Cache.imageOfHeartLarge = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfHeartLarge!
    }

    @objc dynamic public class func imageOfDifficultyStars(difficulty: CGFloat = 2) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 12), false, 0)
            HabiticaIcons.drawDifficultyStars(difficulty: difficulty)

        let imageOfDifficultyStars = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfDifficultyStars
    }

    @objc dynamic public class var imageOfStarSmall: UIImage {
        if Cache.imageOfStarSmall != nil {
            return Cache.imageOfStarSmall!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 9, height: 9), false, 0)
            HabiticaIcons.drawStarSmall()

        Cache.imageOfStarSmall = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfStarSmall!
    }

    @objc dynamic public class var imageOfStarLarge: UIImage {
        if Cache.imageOfStarLarge != nil {
            return Cache.imageOfStarLarge!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 27, height: 27), false, 0)
            HabiticaIcons.drawStarLarge()

        Cache.imageOfStarLarge = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfStarLarge!
    }

    @objc dynamic public class var imageOfStarMedium: UIImage {
        if Cache.imageOfStarMedium != nil {
            return Cache.imageOfStarMedium!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 21, height: 21), false, 0)
            HabiticaIcons.drawStarMedium()

        Cache.imageOfStarMedium = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfStarMedium!
    }

    @objc dynamic public class var imageOfPinnedItem: UIImage {
        if Cache.imageOfPinnedItem != nil {
            return Cache.imageOfPinnedItem!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 16), false, 0)
            HabiticaIcons.drawPinnedItem()

        Cache.imageOfPinnedItem = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPinnedItem!
    }

    @objc dynamic public class var imageOfPinItem: UIImage {
        if Cache.imageOfPinItem != nil {
            return Cache.imageOfPinItem!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
            HabiticaIcons.drawPinItem()

        Cache.imageOfPinItem = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPinItem!
    }

    @objc dynamic public class var imageOfUnpinItem: UIImage {
        if Cache.imageOfUnpinItem != nil {
            return Cache.imageOfUnpinItem!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
            HabiticaIcons.drawUnpinItem()

        Cache.imageOfUnpinItem = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfUnpinItem!
    }

    @objc dynamic public class var imageOfItemIndicatorNumber: UIImage {
        if Cache.imageOfItemIndicatorNumber != nil {
            return Cache.imageOfItemIndicatorNumber!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
            HabiticaIcons.drawItemIndicatorNumber()

        Cache.imageOfItemIndicatorNumber = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfItemIndicatorNumber!
    }

    @objc dynamic public class var imageOfItemIndicatorLocked: UIImage {
        if Cache.imageOfItemIndicatorLocked != nil {
            return Cache.imageOfItemIndicatorLocked!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
            HabiticaIcons.drawItemIndicatorLocked()

        Cache.imageOfItemIndicatorLocked = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfItemIndicatorLocked!
    }

    @objc dynamic public class var imageOfItemIndicatorLimited: UIImage {
        if Cache.imageOfItemIndicatorLimited != nil {
            return Cache.imageOfItemIndicatorLimited!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
            HabiticaIcons.drawItemIndicatorLimited()

        Cache.imageOfItemIndicatorLimited = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfItemIndicatorLimited!
    }

    @objc dynamic public class var imageOfGem_36: UIImage {
        if Cache.imageOfGem_36 != nil {
            return Cache.imageOfGem_36!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
            HabiticaIcons.drawGem_36()

        Cache.imageOfGem_36 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfGem_36!
    }

    @objc dynamic public class var imageOfWarriorLightBg: UIImage {
        if Cache.imageOfWarriorLightBg != nil {
            return Cache.imageOfWarriorLightBg!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            HabiticaIcons.drawWarriorLightBg()

        Cache.imageOfWarriorLightBg = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfWarriorLightBg!
    }

    @objc dynamic public class var imageOfWarriorDarkBg: UIImage {
        if Cache.imageOfWarriorDarkBg != nil {
            return Cache.imageOfWarriorDarkBg!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            HabiticaIcons.drawWarriorDarkBg()

        Cache.imageOfWarriorDarkBg = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfWarriorDarkBg!
    }

    @objc dynamic public class var imageOfRogueLightBg: UIImage {
        if Cache.imageOfRogueLightBg != nil {
            return Cache.imageOfRogueLightBg!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            HabiticaIcons.drawRogueLightBg()

        Cache.imageOfRogueLightBg = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfRogueLightBg!
    }

    @objc dynamic public class var imageOfRogueDarkBg: UIImage {
        if Cache.imageOfRogueDarkBg != nil {
            return Cache.imageOfRogueDarkBg!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            HabiticaIcons.drawRogueDarkBg()

        Cache.imageOfRogueDarkBg = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfRogueDarkBg!
    }

    @objc dynamic public class var imageOfHealerLightBg: UIImage {
        if Cache.imageOfHealerLightBg != nil {
            return Cache.imageOfHealerLightBg!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            HabiticaIcons.drawHealerLightBg()

        Cache.imageOfHealerLightBg = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfHealerLightBg!
    }

    @objc dynamic public class var imageOfHealerDarkBg: UIImage {
        if Cache.imageOfHealerDarkBg != nil {
            return Cache.imageOfHealerDarkBg!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            HabiticaIcons.drawHealerDarkBg()

        Cache.imageOfHealerDarkBg = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfHealerDarkBg!
    }

    @objc dynamic public class var imageOfMageDarkBg: UIImage {
        if Cache.imageOfMageDarkBg != nil {
            return Cache.imageOfMageDarkBg!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            HabiticaIcons.drawMageDarkBg()

        Cache.imageOfMageDarkBg = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfMageDarkBg!
    }

    @objc dynamic public class var imageOfMageLightBg: UIImage {
        if Cache.imageOfMageLightBg != nil {
            return Cache.imageOfMageLightBg!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            HabiticaIcons.drawMageLightBg()

        Cache.imageOfMageLightBg = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfMageLightBg!
    }

    @objc dynamic public class func imageOfCheckmark(checkmarkColor: UIColor = UIColor(red: 0.529, green: 0.506, blue: 0.565, alpha: 1.000), percentage: CGFloat = 0) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 12), false, 0)
            HabiticaIcons.drawCheckmark(checkmarkColor: checkmarkColor, percentage: percentage)

        let imageOfCheckmark = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfCheckmark
    }

    @objc dynamic public class var imageOfHourglassShop: UIImage {
        if Cache.imageOfHourglassShop != nil {
            return Cache.imageOfHourglassShop!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 42, height: 53), false, 0)
            HabiticaIcons.drawHourglassShop()

        Cache.imageOfHourglassShop = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfHourglassShop!
    }

    @objc dynamic public class var imageOfAttributeSparklesLeft: UIImage {
        if Cache.imageOfAttributeSparklesLeft != nil {
            return Cache.imageOfAttributeSparklesLeft!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 77, height: 24), false, 0)
            HabiticaIcons.drawAttributeSparklesLeft()

        Cache.imageOfAttributeSparklesLeft = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfAttributeSparklesLeft!
    }

    @objc dynamic public class var imageOfAttributeSparklesRight: UIImage {
        if Cache.imageOfAttributeSparklesRight != nil {
            return Cache.imageOfAttributeSparklesRight!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 77, height: 24), false, 0)
            HabiticaIcons.drawAttributeSparklesRight()

        Cache.imageOfAttributeSparklesRight = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfAttributeSparklesRight!
    }

    @objc dynamic public class var imageOfAttributeAllocateButton: UIImage {
        if Cache.imageOfAttributeAllocateButton != nil {
            return Cache.imageOfAttributeAllocateButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 15), false, 0)
            HabiticaIcons.drawAttributeAllocateButton()

        Cache.imageOfAttributeAllocateButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfAttributeAllocateButton!
    }

    @objc dynamic public class func imageOfInfoIcon(infoIconColor: UIColor = UIColor(red: 0.604, green: 0.384, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            HabiticaIcons.drawInfoIcon(infoIconColor: infoIconColor)

        let imageOfInfoIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfInfoIcon
    }

    @objc dynamic public class func imageOfContributorBadge(contributorTier: CGFloat = 1, isNPC: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 16), false, 0)
            HabiticaIcons.drawContributorBadge(contributorTier: contributorTier, isNPC: isNPC)

        let imageOfContributorBadge = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfContributorBadge
    }

    @objc dynamic public class func imageOfChatLikeIcon(wasLiked: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 12, height: 12), false, 0)
            HabiticaIcons.drawChatLikeIcon(wasLiked: wasLiked)

        let imageOfChatLikeIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfChatLikeIcon
    }

    @objc dynamic public class func imageOfQuestBackground(imageSize: CGSize = CGSize(width: 21, height: 21), bossColorDark: UIColor = UIColor(red: 0.764, green: 0.753, blue: 0.781, alpha: 1.000), bossColorMedium: UIColor = UIColor(red: 0.928, green: 0.925, blue: 0.935, alpha: 1.000), bossColorLight: UIColor = UIColor(red: 0.976, green: 0.977, blue: 0.976, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
            HabiticaIcons.drawQuestBackground(frame: CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height), bossColorDark: bossColorDark, bossColorMedium: bossColorMedium, bossColorLight: bossColorLight)

        let imageOfQuestBackground = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfQuestBackground
    }

    @objc dynamic public class var imageOfDamage: UIImage {
        if Cache.imageOfDamage != nil {
            return Cache.imageOfDamage!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 18), false, 0)
            HabiticaIcons.drawDamage()

        Cache.imageOfDamage = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfDamage!
    }

    @objc dynamic public class func imageOfCaret(caretColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000), pointsUp: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 16), false, 0)
            HabiticaIcons.drawCaret(caretColor: caretColor, pointsUp: pointsUp)

        let imageOfCaret = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfCaret
    }

    @objc dynamic public class var imageOfRageStrikeInactive: UIImage {
        if Cache.imageOfRageStrikeInactive != nil {
            return Cache.imageOfRageStrikeInactive!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 63, height: 82), false, 0)
            HabiticaIcons.drawRageStrikeInactive()

        Cache.imageOfRageStrikeInactive = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfRageStrikeInactive!
    }

    @objc dynamic public class func imageOfRageStrikeActive(rageStrikeNPC: UIImage) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 63, height: 82), false, 0)
            HabiticaIcons.drawRageStrikeActive(rageStrikeNPC: rageStrikeNPC)

        let imageOfRageStrikeActive = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfRageStrikeActive
    }

    @objc dynamic public class var imageOfRage: UIImage {
        if Cache.imageOfRage != nil {
            return Cache.imageOfRage!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 18), false, 0)
            HabiticaIcons.drawRage()

        Cache.imageOfRage = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfRage!
    }

    @objc dynamic public class func imageOfTaskDifficultyStars(taskTintColor: UIColor = UIColor(red: 0.380, green: 0.200, blue: 0.706, alpha: 1.000), difficulty: CGFloat = 2, isActive: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
            HabiticaIcons.drawTaskDifficultyStars(taskTintColor: taskTintColor, difficulty: difficulty, isActive: isActive)

        let imageOfTaskDifficultyStars = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfTaskDifficultyStars
    }

    @objc dynamic public class func imageOfHabitControlPlus(taskTintColor: UIColor = UIColor(red: 0.380, green: 0.200, blue: 0.706, alpha: 1.000), isActive: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 34, height: 34), false, 0)
            HabiticaIcons.drawHabitControlPlus(taskTintColor: taskTintColor, isActive: isActive)

        let imageOfHabitControlPlus = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfHabitControlPlus
    }

    @objc dynamic public class func imageOfHabitControlMinus(taskTintColor: UIColor = UIColor(red: 0.380, green: 0.200, blue: 0.706, alpha: 1.000), isActive: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 34, height: 34), false, 0)
            HabiticaIcons.drawHabitControlMinus(taskTintColor: taskTintColor, isActive: isActive)

        let imageOfHabitControlMinus = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfHabitControlMinus
    }

    @objc dynamic public class var imageOfLocked: UIImage {
        if Cache.imageOfLocked != nil {
            return Cache.imageOfLocked!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 15, height: 17), false, 0)
            HabiticaIcons.drawLocked()

        Cache.imageOfLocked = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfLocked!
    }

    @objc dynamic public class func imageOfGuildCrest(isOwner: Bool = false, isPublic: Bool = true, memberCount: CGFloat = 100, memberCountLabel: String = "") -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 38), false, 0)
            HabiticaIcons.drawGuildCrest(isOwner: isOwner, isPublic: isPublic, memberCount: memberCount, memberCountLabel: memberCountLabel)

        let imageOfGuildCrest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfGuildCrest
    }

    @objc dynamic public class func imageOfGuildCrestMedium(memberCount: CGFloat = 100) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 34), false, 0)
            HabiticaIcons.drawGuildCrestMedium(memberCount: memberCount)

        let imageOfGuildCrestMedium = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfGuildCrestMedium
    }

    @objc dynamic public class func imageOfGuildCrestSmall(memberCount: CGFloat = 100) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 16), false, 0)
            HabiticaIcons.drawGuildCrestSmall(memberCount: memberCount)

        let imageOfGuildCrestSmall = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfGuildCrestSmall
    }

    @objc dynamic public class func imageOfGuildHeaderCrest(guildHeader: UIColor = UIColor(red: 0.310, green: 0.165, blue: 0.576, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 116, height: 58), false, 0)
            HabiticaIcons.drawGuildHeaderCrest(guildHeader: guildHeader)

        let imageOfGuildHeaderCrest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfGuildHeaderCrest
    }

    @objc dynamic public class var imageOfTwoHandedIcon: UIImage {
        if Cache.imageOfTwoHandedIcon != nil {
            return Cache.imageOfTwoHandedIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 15, height: 15), false, 0)
            HabiticaIcons.drawTwoHandedIcon()

        Cache.imageOfTwoHandedIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfTwoHandedIcon!
    }

    @objc dynamic public class var imageOfBlankAvatarIcon: UIImage {
        if Cache.imageOfBlankAvatarIcon != nil {
            return Cache.imageOfBlankAvatarIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 34), false, 0)
            HabiticaIcons.drawBlankAvatarIcon()

        Cache.imageOfBlankAvatarIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfBlankAvatarIcon!
    }

    @objc dynamic public class var imageOfDisclosureArrow: UIImage {
        if Cache.imageOfDisclosureArrow != nil {
            return Cache.imageOfDisclosureArrow!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 8, height: 13), false, 0)
            HabiticaIcons.drawDisclosureArrow()

        Cache.imageOfDisclosureArrow = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfDisclosureArrow!
    }

    @objc dynamic public class func imageOfFilterIcon(percentage: CGFloat = 0) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
            HabiticaIcons.drawFilterIcon(percentage: percentage)

        let imageOfFilterIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfFilterIcon
    }

    @objc dynamic public class var imageOfDeclineIcon: UIImage {
        if Cache.imageOfDeclineIcon != nil {
            return Cache.imageOfDeclineIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 13, height: 13), false, 0)
            HabiticaIcons.drawDeclineIcon()

        Cache.imageOfDeclineIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfDeclineIcon!
    }

    @objc dynamic public class var imageOfAcceptIcon: UIImage {
        if Cache.imageOfAcceptIcon != nil {
            return Cache.imageOfAcceptIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 13, height: 13), false, 0)
            HabiticaIcons.drawAcceptIcon()

        Cache.imageOfAcceptIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfAcceptIcon!
    }

    @objc dynamic public class var imageOfBuffIcon: UIImage {
        if Cache.imageOfBuffIcon != nil {
            return Cache.imageOfBuffIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 15, height: 15), false, 0)
            HabiticaIcons.drawBuffIcon()

        Cache.imageOfBuffIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfBuffIcon!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var experienceTargets: [AnyObject]! {
        get { return Cache.experienceTargets }
        set {
            Cache.experienceTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfExperience)
            }
        }
    }

    @objc @IBOutlet dynamic var magicTargets: [AnyObject]! {
        get { return Cache.magicTargets }
        set {
            Cache.magicTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfMagic)
            }
        }
    }

    @objc @IBOutlet dynamic var goldTargets: [AnyObject]! {
        get { return Cache.goldTargets }
        set {
            Cache.goldTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfGold)
            }
        }
    }

    @objc @IBOutlet dynamic var gemTargets: [AnyObject]! {
        get { return Cache.gemTargets }
        set {
            Cache.gemTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfGem)
            }
        }
    }

    @objc @IBOutlet dynamic var hourglassTargets: [AnyObject]! {
        get { return Cache.hourglassTargets }
        set {
            Cache.hourglassTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfHourglass)
            }
        }
    }

    @objc @IBOutlet dynamic var experienceRewardTargets: [AnyObject]! {
        get { return Cache.experienceRewardTargets }
        set {
            Cache.experienceRewardTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfExperienceReward)
            }
        }
    }

    @objc @IBOutlet dynamic var goldRewardTargets: [AnyObject]! {
        get { return Cache.goldRewardTargets }
        set {
            Cache.goldRewardTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfGoldReward)
            }
        }
    }

    @objc @IBOutlet dynamic var heartDarkBgTargets: [AnyObject]! {
        get { return Cache.heartDarkBgTargets }
        set {
            Cache.heartDarkBgTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfHeartDarkBg)
            }
        }
    }

    @objc @IBOutlet dynamic var heartLightBgTargets: [AnyObject]! {
        get { return Cache.heartLightBgTargets }
        set {
            Cache.heartLightBgTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfHeartLightBg)
            }
        }
    }

    @objc @IBOutlet dynamic var heartLargeTargets: [AnyObject]! {
        get { return Cache.heartLargeTargets }
        set {
            Cache.heartLargeTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfHeartLarge)
            }
        }
    }

    @objc @IBOutlet dynamic var starSmallTargets: [AnyObject]! {
        get { return Cache.starSmallTargets }
        set {
            Cache.starSmallTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfStarSmall)
            }
        }
    }

    @objc @IBOutlet dynamic var starLargeTargets: [AnyObject]! {
        get { return Cache.starLargeTargets }
        set {
            Cache.starLargeTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfStarLarge)
            }
        }
    }

    @objc @IBOutlet dynamic var starMediumTargets: [AnyObject]! {
        get { return Cache.starMediumTargets }
        set {
            Cache.starMediumTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfStarMedium)
            }
        }
    }

    @objc @IBOutlet dynamic var pinnedItemTargets: [AnyObject]! {
        get { return Cache.pinnedItemTargets }
        set {
            Cache.pinnedItemTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfPinnedItem)
            }
        }
    }

    @objc @IBOutlet dynamic var pinItemTargets: [AnyObject]! {
        get { return Cache.pinItemTargets }
        set {
            Cache.pinItemTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfPinItem)
            }
        }
    }

    @objc @IBOutlet dynamic var unpinItemTargets: [AnyObject]! {
        get { return Cache.unpinItemTargets }
        set {
            Cache.unpinItemTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfUnpinItem)
            }
        }
    }

    @objc @IBOutlet dynamic var itemIndicatorNumberTargets: [AnyObject]! {
        get { return Cache.itemIndicatorNumberTargets }
        set {
            Cache.itemIndicatorNumberTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfItemIndicatorNumber)
            }
        }
    }

    @objc @IBOutlet dynamic var itemIndicatorLockedTargets: [AnyObject]! {
        get { return Cache.itemIndicatorLockedTargets }
        set {
            Cache.itemIndicatorLockedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfItemIndicatorLocked)
            }
        }
    }

    @objc @IBOutlet dynamic var itemIndicatorLimitedTargets: [AnyObject]! {
        get { return Cache.itemIndicatorLimitedTargets }
        set {
            Cache.itemIndicatorLimitedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfItemIndicatorLimited)
            }
        }
    }

    @objc @IBOutlet dynamic var gem_36Targets: [AnyObject]! {
        get { return Cache.gem_36Targets }
        set {
            Cache.gem_36Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfGem_36)
            }
        }
    }

    @objc @IBOutlet dynamic var warriorLightBgTargets: [AnyObject]! {
        get { return Cache.warriorLightBgTargets }
        set {
            Cache.warriorLightBgTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfWarriorLightBg)
            }
        }
    }

    @objc @IBOutlet dynamic var warriorDarkBgTargets: [AnyObject]! {
        get { return Cache.warriorDarkBgTargets }
        set {
            Cache.warriorDarkBgTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfWarriorDarkBg)
            }
        }
    }

    @objc @IBOutlet dynamic var rogueLightBgTargets: [AnyObject]! {
        get { return Cache.rogueLightBgTargets }
        set {
            Cache.rogueLightBgTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfRogueLightBg)
            }
        }
    }

    @objc @IBOutlet dynamic var rogueDarkBgTargets: [AnyObject]! {
        get { return Cache.rogueDarkBgTargets }
        set {
            Cache.rogueDarkBgTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfRogueDarkBg)
            }
        }
    }

    @objc @IBOutlet dynamic var healerLightBgTargets: [AnyObject]! {
        get { return Cache.healerLightBgTargets }
        set {
            Cache.healerLightBgTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfHealerLightBg)
            }
        }
    }

    @objc @IBOutlet dynamic var healerDarkBgTargets: [AnyObject]! {
        get { return Cache.healerDarkBgTargets }
        set {
            Cache.healerDarkBgTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfHealerDarkBg)
            }
        }
    }

    @objc @IBOutlet dynamic var mageDarkBgTargets: [AnyObject]! {
        get { return Cache.mageDarkBgTargets }
        set {
            Cache.mageDarkBgTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfMageDarkBg)
            }
        }
    }

    @objc @IBOutlet dynamic var mageLightBgTargets: [AnyObject]! {
        get { return Cache.mageLightBgTargets }
        set {
            Cache.mageLightBgTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfMageLightBg)
            }
        }
    }

    @objc @IBOutlet dynamic var hourglassShopTargets: [AnyObject]! {
        get { return Cache.hourglassShopTargets }
        set {
            Cache.hourglassShopTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfHourglassShop)
            }
        }
    }

    @objc @IBOutlet dynamic var attributeSparklesLeftTargets: [AnyObject]! {
        get { return Cache.attributeSparklesLeftTargets }
        set {
            Cache.attributeSparklesLeftTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfAttributeSparklesLeft)
            }
        }
    }

    @objc @IBOutlet dynamic var attributeSparklesRightTargets: [AnyObject]! {
        get { return Cache.attributeSparklesRightTargets }
        set {
            Cache.attributeSparklesRightTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfAttributeSparklesRight)
            }
        }
    }

    @objc @IBOutlet dynamic var attributeAllocateButtonTargets: [AnyObject]! {
        get { return Cache.attributeAllocateButtonTargets }
        set {
            Cache.attributeAllocateButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfAttributeAllocateButton)
            }
        }
    }

    @objc @IBOutlet dynamic var damageTargets: [AnyObject]! {
        get { return Cache.damageTargets }
        set {
            Cache.damageTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfDamage)
            }
        }
    }

    @objc @IBOutlet dynamic var rageStrikeInactiveTargets: [AnyObject]! {
        get { return Cache.rageStrikeInactiveTargets }
        set {
            Cache.rageStrikeInactiveTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfRageStrikeInactive)
            }
        }
    }

    @objc @IBOutlet dynamic var rageTargets: [AnyObject]! {
        get { return Cache.rageTargets }
        set {
            Cache.rageTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfRage)
            }
        }
    }

    @objc @IBOutlet dynamic var lockedTargets: [AnyObject]! {
        get { return Cache.lockedTargets }
        set {
            Cache.lockedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfLocked)
            }
        }
    }

    @objc @IBOutlet dynamic var twoHandedIconTargets: [AnyObject]! {
        get { return Cache.twoHandedIconTargets }
        set {
            Cache.twoHandedIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfTwoHandedIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var blankAvatarIconTargets: [AnyObject]! {
        get { return Cache.blankAvatarIconTargets }
        set {
            Cache.blankAvatarIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfBlankAvatarIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var disclosureArrowTargets: [AnyObject]! {
        get { return Cache.disclosureArrowTargets }
        set {
            Cache.disclosureArrowTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfDisclosureArrow)
            }
        }
    }

    @objc @IBOutlet dynamic var declineIconTargets: [AnyObject]! {
        get { return Cache.declineIconTargets }
        set {
            Cache.declineIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfDeclineIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var acceptIconTargets: [AnyObject]! {
        get { return Cache.acceptIconTargets }
        set {
            Cache.acceptIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfAcceptIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var buffIconTargets: [AnyObject]! {
        get { return Cache.buffIconTargets }
        set {
            Cache.buffIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfBuffIcon)
            }
        }
    }




    @objc(HabiticaIconsResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
